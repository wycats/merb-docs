<?xml version="1.0" encoding="utf-8"?>
<rdoc>
<file-list>

  <file name="autoload.rb" id="lib37merb-core37autoload.rb">
    <file-info>
      <path>lib/merb-core/autoload.rb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/core_ext"

         />

         <required-file name="merb-core/controller/template"

         />

         <required-file name="merb-core/controller/merb_controller"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="bootloader.rb" id="lib37merb-core37bootloader.rb">
    <file-info>
      <path>lib/merb-core/bootloader.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="json/ext"

         />

         <required-file name="json/pure"

         />

         <required-file name="merb-core/dispatch/session"

         />

         <required-file name="yaml"

         />

         <required-file name="merb-core/dispatch/cookies"

         />

         <required-file name="rack"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="config.rb" id="lib37merb-core37config.rb">
    <file-info>
      <path>lib/merb-core/config.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="optparse"

         />

         <required-file name="yaml"

         />

         <required-file name="ruby-debug"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="constants.rb" id="lib37merb-core37constants.rb">
    <file-info>
      <path>lib/merb-core/constants.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="abstract_controller.rb" id="lib37merb-core37controller37abstract_controller.rb">
    <file-info>
      <path>lib/merb-core/controller/abstract_controller.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="exceptions.rb" id="lib37merb-core37controller37exceptions.rb">
    <file-info>
      <path>lib/merb-core/controller/exceptions.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="merb_controller.rb" id="lib37merb-core37controller37merb_controller.rb">
    <file-info>
      <path>lib/merb-core/controller/merb_controller.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="mime.rb" id="lib37merb-core37controller37mime.rb">
    <file-info>
      <path>lib/merb-core/controller/mime.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="authentication.rb" id="lib37merb-core37controller37mixins37authentication.rb">
    <file-info>
      <path>lib/merb-core/controller/mixins/authentication.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="conditional_get.rb" id="lib37merb-core37controller37mixins37conditional_get.rb">
    <file-info>
      <path>lib/merb-core/controller/mixins/conditional_get.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="controller.rb" id="lib37merb-core37controller37mixins37controller.rb">
    <file-info>
      <path>lib/merb-core/controller/mixins/controller.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="render.rb" id="lib37merb-core37controller37mixins37render.rb">
    <file-info>
      <path>lib/merb-core/controller/mixins/render.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="responder.rb" id="lib37merb-core37controller37mixins37responder.rb">
    <file-info>
      <path>lib/merb-core/controller/mixins/responder.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="enumerator"

         />

         <required-file name="merb-core/controller/mime"

         />

         <required-file name="erubis"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="template.rb" id="lib37merb-core37controller37template.rb">
    <file-info>
      <path>lib/merb-core/controller/template.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="hash.rb" id="lib37merb-core37core_ext37hash.rb">
    <file-info>
      <path>lib/merb-core/core_ext/hash.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="kernel.rb" id="lib37merb-core37core_ext37kernel.rb">
    <file-info>
      <path>lib/merb-core/core_ext/kernel.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="rubygems/dependency"

         />

         <required-file name="ruby-prof"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="core_ext.rb" id="lib37merb-core37core_ext.rb">
    <file-info>
      <path>lib/merb-core/core_ext.rb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="extlib"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="cookies.rb" id="lib37merb-core37dispatch37cookies.rb">
    <file-info>
      <path>lib/merb-core/dispatch/cookies.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="default_exception.rb" id="lib37merb-core37dispatch37default_exception37default_exception.rb">
    <file-info>
      <path>lib/merb-core/dispatch/default_exception/default_exception.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="_css.html.erb" id="lib37merb-core37dispatch37default_exception37views37_css.html.erb">
    <file-info>
      <path>lib/merb-core/dispatch/default_exception/views/_css.html.erb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="_javascript.html.erb" id="lib37merb-core37dispatch37default_exception37views37_javascript.html.erb">
    <file-info>
      <path>lib/merb-core/dispatch/default_exception/views/_javascript.html.erb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="index.html.erb" id="lib37merb-core37dispatch37default_exception37views37index.html.erb">
    <file-info>
      <path>lib/merb-core/dispatch/default_exception/views/index.html.erb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="dispatcher.rb" id="lib37merb-core37dispatch37dispatcher.rb">
    <file-info>
      <path>lib/merb-core/dispatch/dispatcher.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="request.rb" id="lib37merb-core37dispatch37request.rb">
    <file-info>
      <path>lib/merb-core/dispatch/request.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="tempfile"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="request_parsers.rb" id="lib37merb-core37dispatch37request_parsers.rb">
    <file-info>
      <path>lib/merb-core/dispatch/request_parsers.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="behavior.rb" id="lib37merb-core37dispatch37router37behavior.rb">
    <file-info>
      <path>lib/merb-core/dispatch/router/behavior.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="cached_proc.rb" id="lib37merb-core37dispatch37router37cached_proc.rb">
    <file-info>
      <path>lib/merb-core/dispatch/router/cached_proc.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="resources.rb" id="lib37merb-core37dispatch37router37resources.rb">
    <file-info>
      <path>lib/merb-core/dispatch/router/resources.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="route.rb" id="lib37merb-core37dispatch37router37route.rb">
    <file-info>
      <path>lib/merb-core/dispatch/router/route.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="router.rb" id="lib37merb-core37dispatch37router.rb">
    <file-info>
      <path>lib/merb-core/dispatch/router.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/dispatch/router/cached_proc"

         />

         <required-file name="merb-core/dispatch/router/behavior"

         />

         <required-file name="merb-core/dispatch/router/resources"

         />

         <required-file name="merb-core/dispatch/router/route"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="container.rb" id="lib37merb-core37dispatch37session37container.rb">
    <file-info>
      <path>lib/merb-core/dispatch/session/container.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="cookie.rb" id="lib37merb-core37dispatch37session37cookie.rb">
    <file-info>
      <path>lib/merb-core/dispatch/session/cookie.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="base64"

         />

         <required-file name="openssl"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="memcached.rb" id="lib37merb-core37dispatch37session37memcached.rb">
    <file-info>
      <path>lib/merb-core/dispatch/session/memcached.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="memory.rb" id="lib37merb-core37dispatch37session37memory.rb">
    <file-info>
      <path>lib/merb-core/dispatch/session/memory.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="store_container.rb" id="lib37merb-core37dispatch37session37store_container.rb">
    <file-info>
      <path>lib/merb-core/dispatch/session/store_container.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="session.rb" id="lib37merb-core37dispatch37session.rb">
    <file-info>
      <path>lib/merb-core/dispatch/session.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/dispatch/session/container"

         />

         <required-file name="merb-core/dispatch/session/store_container"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="worker.rb" id="lib37merb-core37dispatch37worker.rb">
    <file-info>
      <path>lib/merb-core/dispatch/worker.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="erubis.rb" id="lib37merb-core37gem_ext37erubis.rb">
    <file-info>
      <path>lib/merb-core/gem_ext/erubis.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="erubis"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="logger.rb" id="lib37merb-core37logger.rb">
    <file-info>
      <path>lib/merb-core/logger.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="plugins.rb" id="lib37merb-core37plugins.rb">
    <file-info>
      <path>lib/merb-core/plugins.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="yaml"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="abstract.rb" id="lib37merb-core37rack37adapter37abstract.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/abstract.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="ebb.rb" id="lib37merb-core37rack37adapter37ebb.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/ebb.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="ebb"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="evented_mongrel.rb" id="lib37merb-core37rack37adapter37evented_mongrel.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/evented_mongrel.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="swiftcore/evented_mongrel"

         />

         <required-file name="merb-core/rack/handler/mongrel"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="fcgi.rb" id="lib37merb-core37rack37adapter37fcgi.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/fcgi.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="irb.rb" id="lib37merb-core37rack37adapter37irb.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/irb.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="irb"

         />

         <required-file name="irb/completion"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="mongrel.rb" id="lib37merb-core37rack37adapter37mongrel.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/mongrel.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="mongrel"

         />

         <required-file name="merb-core/rack/handler/mongrel"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="runner.rb" id="lib37merb-core37rack37adapter37runner.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/runner.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="swiftiplied_mongrel.rb" id="lib37merb-core37rack37adapter37swiftiplied_mongrel.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/swiftiplied_mongrel.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="swiftcore/swiftiplied_mongrel"

         />

         <required-file name="merb-core/rack/handler/mongrel"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="thin.rb" id="lib37merb-core37rack37adapter37thin.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/thin.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="thin"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="thin_turbo.rb" id="lib37merb-core37rack37adapter37thin_turbo.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/thin_turbo.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="thin-turbo"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="webrick.rb" id="lib37merb-core37rack37adapter37webrick.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter/webrick.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="webrick"

         />

         <required-file name="webrick/utils"

         />

         <required-file name="rack/handler/webrick"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="adapter.rb" id="lib37merb-core37rack37adapter.rb">
    <file-info>
      <path>lib/merb-core/rack/adapter.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="application.rb" id="lib37merb-core37rack37application.rb">
    <file-info>
      <path>lib/merb-core/rack/application.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="mongrel.rb" id="lib37merb-core37rack37handler37mongrel.rb">
    <file-info>
      <path>lib/merb-core/rack/handler/mongrel.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="stringio"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="helpers.rb" id="lib37merb-core37rack37helpers.rb">
    <file-info>
      <path>lib/merb-core/rack/helpers.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="conditional_get.rb" id="lib37merb-core37rack37middleware37conditional_get.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware/conditional_get.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="content_length.rb" id="lib37merb-core37rack37middleware37content_length.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware/content_length.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="path_prefix.rb" id="lib37merb-core37rack37middleware37path_prefix.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware/path_prefix.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="profiler.rb" id="lib37merb-core37rack37middleware37profiler.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware/profiler.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="static.rb" id="lib37merb-core37rack37middleware37static.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware/static.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="tracer.rb" id="lib37merb-core37rack37middleware37tracer.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware/tracer.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="middleware.rb" id="lib37merb-core37rack37middleware.rb">
    <file-info>
      <path>lib/merb-core/rack/middleware.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="stream_wrapper.rb" id="lib37merb-core37rack37stream_wrapper.rb">
    <file-info>
      <path>lib/merb-core/rack/stream_wrapper.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="rack.rb" id="lib37merb-core37rack.rb">
    <file-info>
      <path>lib/merb-core/rack.rb</path>
      <dtm-modified>Sat Nov 08 08:14:52 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="rack"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="server.rb" id="lib37merb-core37server.rb">
    <file-info>
      <path>lib/merb-core/server.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="etc"

         />

         <required-file name="irb"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="audit.rake" id="lib37merb-core37tasks37audit.rake">
    <file-info>
      <path>lib/merb-core/tasks/audit.rake</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="gem_management.rb" id="lib37merb-core37tasks37gem_management.rb">
    <file-info>
      <path>lib/merb-core/tasks/gem_management.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="rubygems"

         />

         <required-file name="rubygems/dependency_installer"

         />

         <required-file name="rubygems/uninstaller"

         />

         <required-file name="rubygems/dependency"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="merb.rb" id="lib37merb-core37tasks37merb.rb">
    <file-info>
      <path>lib/merb-core/tasks/merb.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/tasks/merb_rake_helper"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="merb_rake_helper.rb" id="lib37merb-core37tasks37merb_rake_helper.rb">
    <file-info>
      <path>lib/merb-core/tasks/merb_rake_helper.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="stats.rake" id="lib37merb-core37tasks37stats.rake">
    <file-info>
      <path>lib/merb-core/tasks/stats.rake</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="controller_helper.rb" id="lib37merb-core37test37helpers37controller_helper.rb">
    <file-info>
      <path>lib/merb-core/test/helpers/controller_helper.rb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="cookie_jar.rb" id="lib37merb-core37test37helpers37cookie_jar.rb">
    <file-info>
      <path>lib/merb-core/test/helpers/cookie_jar.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="uri"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="mock_request_helper.rb" id="lib37merb-core37test37helpers37mock_request_helper.rb">
    <file-info>
      <path>lib/merb-core/test/helpers/mock_request_helper.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="tempfile"

         />

         <required-file name="rubygems"

         />

         <required-file name="mime/types"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="multipart_request_helper.rb" id="lib37merb-core37test37helpers37multipart_request_helper.rb">
    <file-info>
      <path>lib/merb-core/test/helpers/multipart_request_helper.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="request_helper.rb" id="lib37merb-core37test37helpers37request_helper.rb">
    <file-info>
      <path>lib/merb-core/test/helpers/request_helper.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="rack"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="route_helper.rb" id="lib37merb-core37test37helpers37route_helper.rb">
    <file-info>
      <path>lib/merb-core/test/helpers/route_helper.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="helpers.rb" id="lib37merb-core37test37helpers.rb">
    <file-info>
      <path>lib/merb-core/test/helpers.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/test/helpers/cookie_jar"

         />

         <required-file name="merb-core/test/helpers/mock_request_helper"

         />

         <required-file name="merb-core/test/helpers/route_helper"

         />

         <required-file name="merb-core/test/helpers/request_helper"

         />

         <required-file name="merb-core/test/helpers/multipart_request_helper"

         />

         <required-file name="merb-core/test/helpers/controller_helper"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="controller_matchers.rb" id="lib37merb-core37test37matchers37controller_matchers.rb">
    <file-info>
      <path>lib/merb-core/test/matchers/controller_matchers.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="request_matchers.rb" id="lib37merb-core37test37matchers37request_matchers.rb">
    <file-info>
      <path>lib/merb-core/test/matchers/request_matchers.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="route_matchers.rb" id="lib37merb-core37test37matchers37route_matchers.rb">
    <file-info>
      <path>lib/merb-core/test/matchers/route_matchers.rb</path>
      <dtm-modified>Fri Nov 07 11:00:19 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="matchers.rb" id="lib37merb-core37test37matchers.rb">
    <file-info>
      <path>lib/merb-core/test/matchers.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/test/matchers/controller_matchers"

         />

         <required-file name="merb-core/test/matchers/route_matchers"

         />

         <required-file name="merb-core/test/matchers/request_matchers"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="run_spec.rb" id="lib37merb-core37test37run_spec.rb">
    <file-info>
      <path>lib/merb-core/test/run_spec.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="stringio"

         />

         <required-file name="rubygems"

         />

         <required-file name="spec"

         />

         <required-file name="spec/runner/formatter/specdoc_formatter"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="run_specs.rb" id="lib37merb-core37test37run_specs.rb">
    <file-info>
      <path>lib/merb-core/test/run_specs.rb</path>
      <dtm-modified>Fri Nov 07 11:00:20 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="rubygems"

         />

         <required-file name="benchmark"

         />

         <required-file name="spec"

         />

         <required-file name="spec/runner/formatter/base_text_formatter"

         />

         <required-file name="spec/spec_helper.rb"

         />

         <required-file name="spec/mocks"

         />

         <required-file name="spec/mocks/extensions"

         />

         <required-file name="spec/runner/formatter/specdoc_formatter"

         />

         <required-file name="base64"

         />

         <required-file name="nkf"

         />

         <required-file name="kconv"

         />

         <required-file name="rack"

         />

         <required-file name="fileutils"

         />

         <required-file name="json"

         />

         <required-file name="json/pure"

         />

         <required-file name="optparse"

         />

         <required-file name="spec"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="spectasks.rb" id="lib37merb-core37test37tasks37spectasks.rb">
    <file-info>
      <path>lib/merb-core/test/tasks/spectasks.rb</path>
      <dtm-modified>Sat Nov 15 10:27:50 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="hpricot.rb" id="lib37merb-core37test37test_ext37hpricot.rb">
    <file-info>
      <path>lib/merb-core/test/test_ext/hpricot.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="object.rb" id="lib37merb-core37test37test_ext37object.rb">
    <file-info>
      <path>lib/merb-core/test/test_ext/object.rb</path>
      <dtm-modified>Fri Nov 07 11:00:20 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="rspec.rb" id="lib37merb-core37test37test_ext37rspec.rb">
    <file-info>
      <path>lib/merb-core/test/test_ext/rspec.rb</path>
      <dtm-modified>Sat Nov 08 14:28:20 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="spec"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="string.rb" id="lib37merb-core37test37test_ext37string.rb">
    <file-info>
      <path>lib/merb-core/test/test_ext/string.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

  <file name="test.rb" id="lib37merb-core37test.rb">
    <file-info>
      <path>lib/merb-core/test.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>

      <required-file-list>

         <required-file name="merb-core/test/test_ext/object"

         />

         <required-file name="merb-core/test/test_ext/string"

         />

         <required-file name="merb-core/test/helpers"

         />

         <required-file name="webrat"

         />

         <required-file name="webrat/merb"

         />

         <required-file name="merb-core/test/test_ext/rspec"

         />

         <required-file name="merb-core/test/matchers"

         />

      </required-file-list>



    </contents>

  </file>

  <file name="version.rb" id="lib37merb-core37version.rb">
    <file-info>
      <path>lib/merb-core/version.rb</path>
      <dtm-modified>Sat Nov 08 08:14:53 -0800 2008</dtm-modified>
    </file-info>

    <contents>



    </contents>

  </file>

</file-list>
<class-module-list>

  <Class name="Hash" id="Hash">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37core_ext37hash.rb">lib/merb-core/core_ext/hash.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="extract!" type="Public" category="Instance" id="M000003">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Returns the value of self for each argument and deletes those entries.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*args:</td><td>the keys whose values should be extracted and deleted.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Object]:</td><td>The values of the provided arguments in corresponding order.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/hash.rb, line 11</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">extract!</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span>.<span class="ruby-identifier">map</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">arg</span><span class="ruby-operator">|</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">arg</span>)
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Memcached" id="Memcached">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37memcached.rb">lib/merb-core/dispatch/session/memcached.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
For the memcached gem.
</p>

    ]]></description>

    <contents>









      <included-module-list>

        <included-module name="Merb::MemcacheStore"

                         href="Merb::MemcacheStore"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="MemCache" id="MemCache">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37memcached.rb">lib/merb-core/dispatch/session/memcached.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
For the memcache-client gem.
</p>

    ]]></description>

    <contents>









      <included-module-list>

        <included-module name="Merb::MemcacheStore"

                         href="Merb::MemcacheStore"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Exception" id="Exception">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="action_name" type="Public" category="Class" id="M000006">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the <a href="#M000004">action_name</a> that will be invoked on your
Exceptions controller when an instance is raised during a request.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The name of the action in the Exceptions controller which will get invoked

</td></tr>
</table>
<pre>
  when an instance of this Exception sub/class is raised by an action.
</pre>
<p>
:api: public @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 33</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">action_name</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span> <span class="ruby-operator">==</span> <span class="ruby-constant">Exception</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Object</span>.<span class="ruby-identifier">const_defined?</span>(<span class="ruby-identifier">:Exceptions</span>) <span class="ruby-operator">&amp;&amp;</span> 
        <span class="ruby-constant">Exceptions</span>.<span class="ruby-identifier">method_defined?</span>(<span class="ruby-identifier">:exception</span>)
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">name</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">split</span>(<span class="ruby-value str">'::'</span>).<span class="ruby-identifier">last</span>.<span class="ruby-identifier">snake_case</span>
    <span class="ruby-constant">Object</span>.<span class="ruby-identifier">const_defined?</span>(<span class="ruby-identifier">:Exceptions</span>) <span class="ruby-operator">&amp;&amp;</span> 
      <span class="ruby-constant">Exceptions</span>.<span class="ruby-identifier">method_defined?</span>(<span class="ruby-identifier">name</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">name</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">superclass</span>.<span class="ruby-identifier">action_name</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status" type="Public" category="Class" id="M000007">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
The status that will be sent in the response when an instance is raised
during a request. Override this to send a different status.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Integer:</td><td>The status code to send in the response. Defaults to 500.

</td></tr>
</table>
<p>
:api: public @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 51</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">status</span>
    <span class="ruby-value">500</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="action_name" type="Public" category="Instance" id="M000004">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the <a href="#M000004">action_name</a> that will be invoked on your
Exceptions controller when this exception is raised. Override this method
to force a different action to be invoked.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The name of the action in the Exceptions controller which will get invoked

</td></tr>
</table>
<pre>
  when this exception is raised during a request.
</pre>
<p>
:api: public @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 11</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">action_name</span>() <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">action_name</span> <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="same?" type="Public" category="Instance" id="M000005">
          <parameters>(other)</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>Whether or not this exception is the same as another.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 18</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">same?</span>(<span class="ruby-identifier">other</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">other</span>.<span class="ruby-identifier">class</span> <span class="ruby-operator">&amp;&amp;</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">message</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">other</span>.<span class="ruby-identifier">message</span> <span class="ruby-operator">&amp;&amp;</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">backtrace</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">other</span>.<span class="ruby-identifier">backtrace</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Object" id="Object">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37object.rb">lib/merb-core/test/test_ext/object.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="assigns" type="Public" category="Instance" id="M000008">
          <parameters>(attr)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">attr&lt;~to_s&gt;:</td><td>The name of the instance variable to get.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Object:</td><td>The instance variable @attr for this object.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  # In a spec
  @my_obj.assigns(:my_value).should == @my_value
</pre>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/object.rb, line 11</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">assigns</span>(<span class="ruby-identifier">attr</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">instance_variable_get</span>(<span class="ruby-node">&quot;@#{attr}&quot;</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="String" id="String">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37string.rb">lib/merb-core/test/test_ext/string.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="contain?" type="Public" category="Instance" id="M000009">
          <parameters>(value)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/string.rb, line 2</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">contain?</span>(<span class="ruby-identifier">value</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">value</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="contains?" type="Public" category="Instance" id="M000010">
          <parameters>(value)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000009">contain?</a>
</p>
          ]]></description>


        </method>

        <method name="match?" type="Public" category="Instance" id="M000011">
          <parameters>(regex)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/string.rb, line 8</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">match?</span>(<span class="ruby-identifier">regex</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">match</span>(<span class="ruby-identifier">regex</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000012">
          <parameters>(regex)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000011">match?</a>
</p>
          ]]></description>


        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="GemManagement" id="GemManagement">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37tasks37gem_management.rb">lib/merb-core/tasks/gem_management.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="clobber" type="Public" category="Instance" id="M000018">
          <parameters>(source_dir)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 199</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">clobber</span>(<span class="ruby-identifier">source_dir</span>)
    <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">chdir</span>(<span class="ruby-identifier">source_dir</span>) <span class="ruby-keyword kw">do</span> 
      <span class="ruby-identifier">system</span> <span class="ruby-node">&quot;#{Gem.ruby} -S rake -s clobber&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-value str">'Thorfile'</span>)
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="ensure_bin_wrapper_for" type="Public" category="Instance" id="M000025">
          <parameters>(gem_dir, bin_dir, *gems)</parameters>

          <description><![CDATA[
            <p>
Create a modified executable wrapper in the specified bin directory.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 280</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">ensure_bin_wrapper_for</span>(<span class="ruby-identifier">gem_dir</span>, <span class="ruby-identifier">bin_dir</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">gems</span>)
    <span class="ruby-identifier">options</span> = <span class="ruby-identifier">gems</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">gems</span>.<span class="ruby-identifier">last</span> <span class="ruby-operator">:</span> {}
    <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:no_minigems</span>] <span class="ruby-operator">||=</span> []
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">bin_dir</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">directory?</span>(<span class="ruby-identifier">bin_dir</span>)
      <span class="ruby-identifier">gems</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">gem</span><span class="ruby-operator">|</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">gemspec_path</span> = <span class="ruby-constant">Dir</span>[<span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">gem_dir</span>, <span class="ruby-value str">'specifications'</span>, <span class="ruby-node">&quot;#{gem}-*.gemspec&quot;</span>)].<span class="ruby-identifier">last</span>
          <span class="ruby-identifier">spec</span> = <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Specification</span>.<span class="ruby-identifier">load</span>(<span class="ruby-identifier">gemspec_path</span>)
          <span class="ruby-identifier">enable_minigems</span> = <span class="ruby-operator">!</span><span class="ruby-identifier">options</span>[<span class="ruby-identifier">:no_minigems</span>].<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">spec</span>.<span class="ruby-identifier">name</span>)
          <span class="ruby-identifier">spec</span>.<span class="ruby-identifier">executables</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">exec</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">executable</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">bin_dir</span>, <span class="ruby-identifier">exec</span>)
            <span class="ruby-identifier">message</span> <span class="ruby-node">&quot;Writing executable wrapper #{executable}&quot;</span>
            <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">executable</span>, <span class="ruby-value str">'w'</span>, <span class="ruby-value">0755</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">f</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">f</span>.<span class="ruby-identifier">write</span>(<span class="ruby-identifier">executable_wrapper</span>(<span class="ruby-identifier">spec</span>, <span class="ruby-identifier">exec</span>, <span class="ruby-identifier">enable_minigems</span>))
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="ensure_bin_wrapper_for_installed_gems" type="Public" category="Instance" id="M000026">
          <parameters>(gemspecs, options)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 300</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">ensure_bin_wrapper_for_installed_gems</span>(<span class="ruby-identifier">gemspecs</span>, <span class="ruby-identifier">options</span>)
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:install_dir</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:bin_dir</span>]
      <span class="ruby-identifier">gems</span> = <span class="ruby-identifier">gemspecs</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">spec</span><span class="ruby-operator">|</span> <span class="ruby-identifier">spec</span>.<span class="ruby-identifier">name</span> }
      <span class="ruby-identifier">ensure_bin_wrapper_for</span>(<span class="ruby-identifier">options</span>[<span class="ruby-identifier">:install_dir</span>], <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:bin_dir</span>], <span class="ruby-operator">*</span><span class="ruby-identifier">gems</span>)
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="install_gem" type="Public" category="Instance" id="M000013">
          <parameters>(gem, options = {})</parameters>

          <description><![CDATA[
            <p>
Install a gem - looks remotely and local gem cache; won&#8217;t process
rdoc or ri options.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 46</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">install_gem</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">options</span> = {})
    <span class="ruby-identifier">refresh</span> = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:refresh</span>) <span class="ruby-operator">||</span> []
    <span class="ruby-identifier">from_cache</span> = (<span class="ruby-identifier">options</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:cache</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:cache</span>))
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">from_cache</span>
      <span class="ruby-identifier">install_gem_from_cache</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">options</span>)
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">version</span> = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:version</span>)
      <span class="ruby-constant">Gem</span>.<span class="ruby-identifier">configuration</span>.<span class="ruby-identifier">update_sources</span> = <span class="ruby-keyword kw">false</span>

      <span class="ruby-comment cmt"># Limit source index to install dir</span>
      <span class="ruby-identifier">update_source_index</span>(<span class="ruby-identifier">options</span>[<span class="ruby-identifier">:install_dir</span>]) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:install_dir</span>]

      <span class="ruby-identifier">installer</span> = <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">DependencyInstaller</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:user_install</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>))
      
      <span class="ruby-comment cmt"># Force-refresh certain gems by excluding them from the current index</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-operator">!</span><span class="ruby-identifier">options</span>[<span class="ruby-identifier">:ignore_dependencies</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">refresh</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:include?</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">refresh</span>.<span class="ruby-identifier">empty?</span>
        <span class="ruby-identifier">source_index</span> = <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">instance_variable_get</span>(<span class="ruby-identifier">:@source_index</span>)
        <span class="ruby-identifier">source_index</span>.<span class="ruby-identifier">gems</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span>, <span class="ruby-identifier">spec</span><span class="ruby-operator">|</span> 
          <span class="ruby-identifier">source_index</span>.<span class="ruby-identifier">gems</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">name</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">refresh</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">spec</span>.<span class="ruby-identifier">name</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-identifier">exception</span> = <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">install</span> <span class="ruby-identifier">gem</span>, <span class="ruby-identifier">version</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">InstallError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-identifier">exception</span> = <span class="ruby-identifier">e</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">GemNotFoundException</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">from_cache</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">gem_file</span> = <span class="ruby-identifier">find_gem_in_cache</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">version</span>)
          <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Located #{gem} in gem cache...&quot;</span>
          <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">install</span> <span class="ruby-identifier">gem_file</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">exception</span> = <span class="ruby-identifier">e</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">rescue</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-identifier">exception</span> = <span class="ruby-identifier">e</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">exception</span>
        <span class="ruby-identifier">error</span> <span class="ruby-node">&quot;Failed to install gem '#{gem} (#{version || 'any version'})' (#{exception.message})&quot;</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">ensure_bin_wrapper_for_installed_gems</span>(<span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>, <span class="ruby-identifier">options</span>)
      <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">spec</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">success</span> <span class="ruby-node">&quot;Successfully installed #{spec.full_name}&quot;</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-operator">!</span><span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>.<span class="ruby-identifier">empty?</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="install_gem_from_cache" type="Public" category="Instance" id="M000014">
          <parameters>(gem, options = {})</parameters>

          <description><![CDATA[
            <p>
Install a gem - looks in the system&#8217;s gem cache instead of remotely;
won&#8217;t process rdoc or ri options.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 96</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">install_gem_from_cache</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">options</span> = {})
    <span class="ruby-identifier">version</span> = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:version</span>)
    <span class="ruby-constant">Gem</span>.<span class="ruby-identifier">configuration</span>.<span class="ruby-identifier">update_sources</span> = <span class="ruby-keyword kw">false</span>
    <span class="ruby-identifier">installer</span> = <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">DependencyInstaller</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:user_install</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>))
    <span class="ruby-identifier">exception</span> = <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">begin</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">gem_file</span> = <span class="ruby-identifier">find_gem_in_cache</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">version</span>)
        <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Located #{gem} in gem cache...&quot;</span>
        <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">install</span> <span class="ruby-identifier">gem_file</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">InstallError</span>, <span class="ruby-node">&quot;Unknown gem #{gem}&quot;</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">InstallError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
      <span class="ruby-identifier">exception</span> = <span class="ruby-identifier">e</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">exception</span>
      <span class="ruby-identifier">error</span> <span class="ruby-node">&quot;Failed to install gem '#{gem}' (#{e.message})&quot;</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">ensure_bin_wrapper_for_installed_gems</span>(<span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>, <span class="ruby-identifier">options</span>)
    <span class="ruby-identifier">installer</span>.<span class="ruby-identifier">installed_gems</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">spec</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">success</span> <span class="ruby-node">&quot;Successfully installed #{spec.full_name}&quot;</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="install_gem_from_source" type="Public" category="Instance" id="M000015">
          <parameters>(source_dir, *args)</parameters>

          <description><![CDATA[
            <p>
Install a gem from source - builds and packages it first then installs.
</p>
<p>
Examples: <a href="#M000015">install_gem_from_source</a>(source_dir,
:install_dir =&gt; &#8230;) <a
href="#M000015">install_gem_from_source</a>(source_dir, gem_name) <a
href="#M000015">install_gem_from_source</a>(source_dir, :skip =&gt;
[&#8230;])
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 126</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">install_gem_from_source</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">installed_gems</span> = []
    <span class="ruby-identifier">opts</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">args</span>.<span class="ruby-identifier">pop</span> <span class="ruby-operator">:</span> {}
    <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">chdir</span>(<span class="ruby-identifier">source_dir</span>) <span class="ruby-keyword kw">do</span>      
      <span class="ruby-identifier">gem_name</span>     = <span class="ruby-identifier">args</span>[<span class="ruby-value">0</span>] <span class="ruby-operator">||</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">source_dir</span>)
      <span class="ruby-identifier">gem_pkg_dir</span>  = <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-value str">'pkg'</span>)
      <span class="ruby-identifier">gem_pkg_glob</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">gem_pkg_dir</span>, <span class="ruby-node">&quot;#{gem_name}-*.gem&quot;</span>)
      <span class="ruby-identifier">skip_gems</span>    = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:skip</span>) <span class="ruby-operator">||</span> []

      <span class="ruby-comment cmt"># Cleanup what's already there</span>
      <span class="ruby-identifier">clobber</span>(<span class="ruby-identifier">source_dir</span>)
      <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">mkdir_p</span>(<span class="ruby-identifier">gem_pkg_dir</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">directory?</span>(<span class="ruby-identifier">gem_pkg_dir</span>)

      <span class="ruby-comment cmt"># Recursively process all gem packages within the source dir</span>
      <span class="ruby-identifier">skip_gems</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">gem_name</span>
      <span class="ruby-identifier">packages</span> = <span class="ruby-identifier">package_all</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-identifier">skip_gems</span>)
      
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">packages</span>.<span class="ruby-identifier">length</span> <span class="ruby-operator">==</span> <span class="ruby-value">1</span>
        <span class="ruby-comment cmt"># The are no subpackages for the main package</span>
        <span class="ruby-identifier">refresh</span> = [<span class="ruby-identifier">gem_name</span>]
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-comment cmt"># Gather all packages into the top-level pkg directory</span>
        <span class="ruby-identifier">packages</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">pkg</span><span class="ruby-operator">|</span>
          <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">copy_entry</span>(<span class="ruby-identifier">pkg</span>, <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">gem_pkg_dir</span>, <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">pkg</span>)))
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-comment cmt"># Finally package the main gem - without clobbering the already copied pkgs</span>
        <span class="ruby-identifier">package</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-keyword kw">false</span>)
        
        <span class="ruby-comment cmt"># Gather subgems to refresh during installation of the main gem</span>
        <span class="ruby-identifier">refresh</span> = <span class="ruby-identifier">packages</span>.<span class="ruby-identifier">map</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">pkg</span><span class="ruby-operator">|</span>
          <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">pkg</span>, <span class="ruby-value str">'.gem'</span>)[<span class="ruby-regexp re">/^(.*?)-([\d\.]+)$/</span>, <span class="ruby-value">1</span>] <span class="ruby-keyword kw">rescue</span> <span class="ruby-keyword kw">nil</span>
        <span class="ruby-keyword kw">end</span>.<span class="ruby-identifier">compact</span>
        
        <span class="ruby-comment cmt"># Install subgems explicitly even if ignore_dependencies is set</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:ignore_dependencies</span>]
          <span class="ruby-identifier">refresh</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span><span class="ruby-operator">|</span> 
            <span class="ruby-identifier">gem_pkg</span> = <span class="ruby-constant">Dir</span>[<span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">gem_pkg_dir</span>, <span class="ruby-node">&quot;#{name}-*.gem&quot;</span>)][<span class="ruby-value">0</span>]
            <span class="ruby-identifier">install_pkg</span>(<span class="ruby-identifier">gem_pkg</span>, <span class="ruby-identifier">opts</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-identifier">ensure_bin_wrapper_for</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:install_dir</span>], <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:bin_dir</span>], <span class="ruby-operator">*</span><span class="ruby-identifier">installed_gems</span>)
      
      <span class="ruby-comment cmt"># Finally install the main gem</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">install_pkg</span>(<span class="ruby-constant">Dir</span>[<span class="ruby-identifier">gem_pkg_glob</span>][<span class="ruby-value">0</span>], <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:refresh</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">refresh</span>))
        <span class="ruby-identifier">installed_gems</span> = <span class="ruby-identifier">refresh</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">installed_gems</span> = []
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">installed_gems</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="install_pkg" type="Public" category="Instance" id="M000016">
          <parameters>(gem_pkg, opts = {})</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 181</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">install_pkg</span>(<span class="ruby-identifier">gem_pkg</span>, <span class="ruby-identifier">opts</span> = {})
    <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">gem_pkg</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-identifier">gem_pkg</span>))
      <span class="ruby-comment cmt"># Needs to be executed from the directory that contains all packages</span>
      <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">chdir</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">dirname</span>(<span class="ruby-identifier">gem_pkg</span>)) { <span class="ruby-identifier">install_gem</span>(<span class="ruby-identifier">gem_pkg</span>, <span class="ruby-identifier">opts</span>) }
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-keyword kw">false</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="package" type="Public" category="Instance" id="M000019">
          <parameters>(source_dir, clobber = true)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 205</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">package</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-identifier">clobber</span> = <span class="ruby-keyword kw">true</span>)
    <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">chdir</span>(<span class="ruby-identifier">source_dir</span>) <span class="ruby-keyword kw">do</span> 
      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-value str">'Thorfile'</span>)
        <span class="ruby-identifier">thor</span> <span class="ruby-value str">&quot;:package&quot;</span>
      <span class="ruby-keyword kw">elsif</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-value str">'Rakefile'</span>)
        <span class="ruby-identifier">rake</span> <span class="ruby-value str">&quot;clobber&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">clobber</span>
        <span class="ruby-identifier">rake</span> <span class="ruby-value str">&quot;package&quot;</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-constant">Dir</span>[<span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-value str">'pkg/*.gem'</span>)]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="package_all" type="Public" category="Instance" id="M000020">
          <parameters>(source_dir, skip = [], packages = [])</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 217</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">package_all</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-identifier">skip</span> = [], <span class="ruby-identifier">packages</span> = [])
    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Dir</span>[<span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-value str">'{Rakefile,Thorfile}'</span>)][<span class="ruby-value">0</span>]
      <span class="ruby-identifier">name</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">source_dir</span>)
      <span class="ruby-constant">Dir</span>[<span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">source_dir</span>, <span class="ruby-value str">'*'</span>, <span class="ruby-value str">'{Rakefile,Thorfile}'</span>)].<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">taskfile</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">package_all</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">dirname</span>(<span class="ruby-identifier">taskfile</span>), <span class="ruby-identifier">skip</span>, <span class="ruby-identifier">packages</span>)
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">packages</span>.<span class="ruby-identifier">push</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">package</span>(<span class="ruby-identifier">source_dir</span>)) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">skip</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">name</span>)
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">packages</span>.<span class="ruby-identifier">uniq</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="partition_dependencies" type="Public" category="Instance" id="M000024">
          <parameters>(dependencies, gem_dir)</parameters>

          <description><![CDATA[
            <p>
Partition gems into system, local and missing gems
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 248</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">partition_dependencies</span>(<span class="ruby-identifier">dependencies</span>, <span class="ruby-identifier">gem_dir</span>)
    <span class="ruby-identifier">system_specs</span>, <span class="ruby-identifier">local_specs</span>, <span class="ruby-identifier">missing_deps</span> = [], [], []
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">gem_dir</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">directory?</span>(<span class="ruby-identifier">gem_dir</span>)
      <span class="ruby-identifier">gem_dir</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">gem_dir</span>)
      <span class="ruby-operator">::</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">clear_paths</span>; <span class="ruby-operator">::</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">path</span>.<span class="ruby-identifier">unshift</span>(<span class="ruby-identifier">gem_dir</span>)
      <span class="ruby-operator">::</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">source_index</span>.<span class="ruby-identifier">refresh!</span>
      <span class="ruby-identifier">dependencies</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">dep</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">gemspecs</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">source_index</span>.<span class="ruby-identifier">search</span>(<span class="ruby-identifier">dep</span>)
        <span class="ruby-identifier">local</span> = <span class="ruby-identifier">gemspecs</span>.<span class="ruby-identifier">reverse</span>.<span class="ruby-identifier">find</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">s</span><span class="ruby-operator">|</span> <span class="ruby-identifier">s</span>.<span class="ruby-identifier">loaded_from</span>.<span class="ruby-identifier">index</span>(<span class="ruby-identifier">gem_dir</span>) <span class="ruby-operator">==</span> <span class="ruby-value">0</span> }
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">local</span>
          <span class="ruby-identifier">local_specs</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">local</span>
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">gemspecs</span>.<span class="ruby-identifier">last</span>
          <span class="ruby-identifier">system_specs</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">gemspecs</span>.<span class="ruby-identifier">last</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">missing_deps</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">dep</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-operator">::</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">clear_paths</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">dependencies</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">dep</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">gemspecs</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">source_index</span>.<span class="ruby-identifier">search</span>(<span class="ruby-identifier">dep</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">gemspecs</span>.<span class="ruby-identifier">last</span>
          <span class="ruby-identifier">system_specs</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">gemspecs</span>.<span class="ruby-identifier">last</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">missing_deps</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">dep</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
    [<span class="ruby-identifier">system_specs</span>, <span class="ruby-identifier">local_specs</span>, <span class="ruby-identifier">missing_deps</span>]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="rake" type="Public" category="Instance" id="M000021">
          <parameters>(cmd)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 228</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">rake</span>(<span class="ruby-identifier">cmd</span>)
    <span class="ruby-identifier">cmd</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot; &gt;/dev/null&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">$SILENT</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">win_platform?</span>
    <span class="ruby-identifier">system</span> <span class="ruby-node">&quot;#{Gem.ruby} -S #{which('rake')} -s #{cmd} &gt;/dev/null&quot;</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="thor" type="Public" category="Instance" id="M000022">
          <parameters>(cmd)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 233</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">thor</span>(<span class="ruby-identifier">cmd</span>)
    <span class="ruby-identifier">cmd</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot; &gt;/dev/null&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">$SILENT</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-constant">Gem</span>.<span class="ruby-identifier">win_platform?</span>
    <span class="ruby-identifier">system</span> <span class="ruby-node">&quot;#{Gem.ruby} -S #{which('thor')} #{cmd}&quot;</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="uninstall_gem" type="Public" category="Instance" id="M000017">
          <parameters>(gem, options = {})</parameters>

          <description><![CDATA[
            <p>
Uninstall a gem.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 191</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">uninstall_gem</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">options</span> = {})
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:version</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">options</span>[<span class="ruby-identifier">:version</span>].<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Requirement</span>)
      <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:version</span>] = <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Requirement</span>.<span class="ruby-identifier">new</span> [<span class="ruby-node">&quot;= #{options[:version]}&quot;</span>]
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">update_source_index</span>(<span class="ruby-identifier">options</span>[<span class="ruby-identifier">:install_dir</span>]) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:install_dir</span>]
    <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Uninstaller</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">gem</span>, <span class="ruby-identifier">options</span>).<span class="ruby-identifier">uninstall</span> <span class="ruby-keyword kw">rescue</span> <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="which" type="Public" category="Instance" id="M000023">
          <parameters>(executable)</parameters>

          <description><![CDATA[
            <p>
Use the local bin/* executables if available.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 239</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">which</span>(<span class="ruby-identifier">executable</span>)
    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">executable?</span>(<span class="ruby-identifier">exec</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-constant">Dir</span>.<span class="ruby-identifier">pwd</span>, <span class="ruby-value str">'bin'</span>, <span class="ruby-identifier">executable</span>))
      <span class="ruby-identifier">exec</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">executable</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="ColorfulMessages"

                         href="ColorfulMessages"

        />

      </included-module-list>

    </contents>

  </Module>

  <Module name="Gem" id="Gem">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37core_ext37kernel.rb">lib/merb-core/core_ext/kernel.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Class name="Gem::Dependency" id="Gem::Dependency">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37core_ext37kernel.rb">lib/merb-core/core_ext/kernel.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="require_as">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="require_block">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>





    </contents>

  </Class>

  <Module name="Spec" id="Spec">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37run_spec.rb">lib/merb-core/test/run_spec.rb</a></infile>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Spec::Matchers" id="Spec::Matchers">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="create" type="Public" category="Class" id="M000029">
          <parameters>(*names, &amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 81</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">create</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">names</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-ivar">@guid</span> <span class="ruby-operator">||=</span> <span class="ruby-value">0</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Test</span><span class="ruby-operator">::</span><span class="ruby-constant">Matchers</span>.<span class="ruby-identifier">module_eval</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">klass</span> = <span class="ruby-constant">Class</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">MatcherDSL</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">expected_value</span>)
            <span class="ruby-ivar">@expected_value</span> = <span class="ruby-identifier">expected_value</span>
          <span class="ruby-keyword kw">end</span>          
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">class_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        
        <span class="ruby-identifier">names</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">name</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-operator">*</span><span class="ruby-identifier">expected_value</span><span class="ruby-operator">|</span>
            <span class="ruby-comment cmt"># Avoid a warning for the form should foo.</span>
            <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">expected_value</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">expected_value</span>[<span class="ruby-value">0</span>])
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new" type="Public" category="Class" id="M000030">
          <parameters>(expected_value)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 85</span>
          <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">expected_value</span>)
            <span class="ruby-ivar">@expected_value</span> = <span class="ruby-identifier">expected_value</span>
          <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="fail" type="Public" category="Instance" id="M000027">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 19</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">fail</span>
      <span class="ruby-identifier">raise_error</span>(<span class="ruby-constant">Spec</span><span class="ruby-operator">::</span><span class="ruby-constant">Expectations</span><span class="ruby-operator">::</span><span class="ruby-constant">ExpectationNotMetError</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="fail_with" type="Public" category="Instance" id="M000028">
          <parameters>(message)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 23</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">fail_with</span>(<span class="ruby-identifier">message</span>)
      <span class="ruby-identifier">raise_error</span>(<span class="ruby-constant">Spec</span><span class="ruby-operator">::</span><span class="ruby-constant">Expectations</span><span class="ruby-operator">::</span><span class="ruby-constant">ExpectationNotMetError</span>, <span class="ruby-identifier">message</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Spec::Matchers::MatcherDSL" id="Spec::Matchers::MatcherDSL">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="expected_value" type="Public" category="Class" id="M000032">
          <parameters>(&amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 116</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">expected_value</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:transform_expected</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:initialize</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">expected_value</span><span class="ruby-operator">|</span>
          <span class="ruby-ivar">@expected_value</span> = <span class="ruby-identifier">transform_expected</span>(<span class="ruby-identifier">expected_value</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">expected_value</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="failure_message" type="Public" category="Class" id="M000034">
          <parameters>(&amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 132</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">failure_message</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:proxy_failure_message</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:failure_message</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-identifier">proxy_failure_message</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches" type="Public" category="Class" id="M000031">
          <parameters>(&amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 103</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">matches</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:matches_proxy</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:matches?</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">object</span><span class="ruby-operator">|</span>
          <span class="ruby-ivar">@object</span> = <span class="ruby-identifier">object</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block</span>.<span class="ruby-identifier">arity</span> <span class="ruby-operator">==</span> <span class="ruby-value">2</span>
            <span class="ruby-identifier">matches_proxy</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>)
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">matches_proxy</span>(<span class="ruby-ivar">@object</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="message" type="Public" category="Class" id="M000035">
          <parameters>(&amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 140</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">message</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">class_eval</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
            <span class="ruby-identifier">generic_message</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>, <span class="ruby-keyword kw">nil</span>)
          <span class="ruby-keyword kw">end</span>
          
          <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
            <span class="ruby-identifier">generic_message</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>, <span class="ruby-value str">&quot; not&quot;</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:proxy_generic_message</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)

        <span class="ruby-identifier">ar</span> = <span class="ruby-identifier">block</span>.<span class="ruby-identifier">arity</span>
        
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:generic_message</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">object</span>, <span class="ruby-identifier">expected</span>, <span class="ruby-identifier">not_string</span><span class="ruby-operator">|</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">ar</span> <span class="ruby-operator">==</span> <span class="ruby-value">3</span>
            <span class="ruby-identifier">proxy_generic_message</span>(<span class="ruby-identifier">not_string</span>, <span class="ruby-identifier">object</span>, <span class="ruby-identifier">expected</span>)
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">proxy_generic_message</span>(<span class="ruby-identifier">not_string</span>, <span class="ruby-identifier">object</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Class" id="M000033">
          <parameters>(&amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 124</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">negative_failure_message</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:proxy_negative_failure_message</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        
        <span class="ruby-identifier">define_method</span>(<span class="ruby-identifier">:negative_failure_message</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-identifier">proxy_negative_failure_message</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="failure_message" type="Public" category="Instance" id="M000036">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 142</span>
          <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
            <span class="ruby-identifier">generic_message</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>, <span class="ruby-keyword kw">nil</span>)
          <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Instance" id="M000037">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 146</span>
          <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
            <span class="ruby-identifier">generic_message</span>(<span class="ruby-ivar">@object</span>, <span class="ruby-ivar">@expected_value</span>, <span class="ruby-value str">&quot; not&quot;</span>)
          <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::Test::RouteHelper"

                         href="Merb::Test::RouteHelper"

        />

      </included-module-list>

    </contents>

  </Class>

  <Module name="Spec::Runner" id="Spec::Runner">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37run_spec.rb">lib/merb-core/test/run_spec.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Spec::Runner::Formatter" id="Spec::Runner::Formatter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37run_spec.rb">lib/merb-core/test/run_spec.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Class name="Spec::Runner::Formatter::BaseTextFormatter" id="Spec::Runner::Formatter::BaseTextFormatter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37run_spec.rb">lib/merb-core/test/run_spec.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="dump_failure" type="Public" category="Instance" id="M000038">
          <parameters>(counter, failure)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/run_spec.rb, line 10</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dump_failure</span>(<span class="ruby-identifier">counter</span>, <span class="ruby-identifier">failure</span>)
          <span class="ruby-identifier">output</span> = <span class="ruby-ivar">@options</span>.<span class="ruby-identifier">error_stream</span>
          <span class="ruby-identifier">output</span>.<span class="ruby-identifier">puts</span>
          <span class="ruby-identifier">output</span>.<span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;#{counter.to_s})&quot;</span>
          <span class="ruby-identifier">output</span>.<span class="ruby-identifier">puts</span> <span class="ruby-identifier">colourise</span>(<span class="ruby-node">&quot;#{failure.header}\n#{failure.exception.message}&quot;</span>, <span class="ruby-identifier">failure</span>)
          <span class="ruby-identifier">output</span>.<span class="ruby-identifier">puts</span> <span class="ruby-identifier">format_backtrace</span>(<span class="ruby-identifier">failure</span>.<span class="ruby-identifier">exception</span>.<span class="ruby-identifier">backtrace</span>)
          <span class="ruby-identifier">output</span>.<span class="ruby-identifier">flush</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Kernel" id="Kernel">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37core_ext37kernel.rb">lib/merb-core/core_ext/kernel.rb</a></infile>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="__caller_info__" type="Public" category="Instance" id="M000049">
          <parameters>(i = 1)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">i&lt;Fixnum&gt;:</td><td>The caller number. Defaults to 1.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">&lt;Array[Array]&gt;:</td><td>The file, line and method of the caller.

</td></tr>
</table>
<h4>Example</h4>
<p>
<em>caller_info</em>(1)
</p>
<pre>
  # =&gt; ['/usr/lib/ruby/1.8/irb/workspace.rb', '52', 'irb_binding']
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 338</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">__caller_info__</span>(<span class="ruby-identifier">i</span> = <span class="ruby-value">1</span>)
    <span class="ruby-identifier">file</span>, <span class="ruby-identifier">line</span>, <span class="ruby-identifier">meth</span> = <span class="ruby-identifier">caller</span>[<span class="ruby-identifier">i</span>].<span class="ruby-identifier">scan</span>(<span class="ruby-regexp re">/(.*?):(\d+):in `(.*?)'/</span>).<span class="ruby-identifier">first</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="__caller_lines__" type="Public" category="Instance" id="M000050">
          <parameters>(file, line, size = 4) {|:error, &quot;Template Error! Problem while rendering&quot;, false| ...}</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">file&lt;String&gt;:</td><td>The file to read.

</td></tr>
<tr><td valign="top">line&lt;Fixnum&gt;:</td><td>The line number to look for.

</td></tr>
</table>
<p>
size&lt;Fixnum&gt;
</p>
<pre>
  Number of lines to include above and below the the line to look for.
  Defaults to 4.
</pre>
<h4>Returns</h4>
<p>
&lt;Array[Array]&gt;
</p>
<pre>
  Triplets containing the line number, the line and whether this was the
  searched line.
</pre>
<p>
@example
</p>
<pre>
  __caller_lines__('/usr/lib/ruby/1.8/debug.rb', 122, 2) # =&gt;
    [
      [ 120, &quot;  def check_suspend&quot;,                               false ],
      [ 121, &quot;    return if Thread.critical&quot;,                     false ],
      [ 122, &quot;    while (Thread.critical = true; @suspend_next)&quot;, true  ],
      [ 123, &quot;      DEBUGGER__.waiting.push Thread.current&quot;,      false ],
      [ 124, &quot;      @suspend_next = false&quot;,                       false ]
    ]
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 365</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">__caller_lines__</span>(<span class="ruby-identifier">file</span>, <span class="ruby-identifier">line</span>, <span class="ruby-identifier">size</span> = <span class="ruby-value">4</span>)
    <span class="ruby-identifier">line</span> = <span class="ruby-identifier">line</span>.<span class="ruby-identifier">to_i</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">file</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/\(erubis\)/</span>
      <span class="ruby-keyword kw">yield</span> <span class="ruby-operator">:</span><span class="ruby-identifier">error</span>, <span class="ruby-value str">&quot;Template Error! Problem while rendering&quot;</span>, <span class="ruby-keyword kw">false</span>
    <span class="ruby-keyword kw">elsif</span> <span class="ruby-operator">!</span><span class="ruby-constant">File</span>.<span class="ruby-identifier">file?</span>(<span class="ruby-identifier">file</span>) <span class="ruby-operator">||</span> <span class="ruby-operator">!</span><span class="ruby-constant">File</span>.<span class="ruby-identifier">readable?</span>(<span class="ruby-identifier">file</span>)
      <span class="ruby-keyword kw">yield</span> <span class="ruby-operator">:</span><span class="ruby-identifier">error</span>, <span class="ruby-node">&quot;File `#{file}' not available&quot;</span>, <span class="ruby-keyword kw">false</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">lines</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">file</span>).<span class="ruby-identifier">split</span>(<span class="ruby-value str">&quot;\n&quot;</span>)
      <span class="ruby-identifier">first_line</span> = (<span class="ruby-identifier">f</span> = <span class="ruby-identifier">line</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">size</span> <span class="ruby-operator">-</span> <span class="ruby-value">1</span>) <span class="ruby-operator">&lt;</span> <span class="ruby-value">0</span> <span class="ruby-operator">?</span> <span class="ruby-value">0</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">f</span>
      
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">first_line</span>.<span class="ruby-identifier">zero?</span>
        <span class="ruby-identifier">new_size</span> = <span class="ruby-identifier">line</span> <span class="ruby-operator">-</span> <span class="ruby-value">1</span>
        <span class="ruby-identifier">lines</span> = <span class="ruby-identifier">lines</span>[<span class="ruby-identifier">first_line</span>, <span class="ruby-identifier">size</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">new_size</span> <span class="ruby-operator">+</span> <span class="ruby-value">1</span>]
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">new_size</span> = <span class="ruby-keyword kw">nil</span>
        <span class="ruby-identifier">lines</span> = <span class="ruby-identifier">lines</span>[<span class="ruby-identifier">first_line</span>, <span class="ruby-identifier">size</span> <span class="ruby-operator">*</span> <span class="ruby-value">2</span> <span class="ruby-operator">+</span> <span class="ruby-value">1</span>]
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-identifier">lines</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">lines</span>.<span class="ruby-identifier">each_with_index</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">str</span>, <span class="ruby-identifier">index</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">line_n</span> = <span class="ruby-identifier">index</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">line</span>
        <span class="ruby-identifier">line_n</span> = (<span class="ruby-identifier">new_size</span>.<span class="ruby-identifier">nil?</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">line_n</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">size</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">line_n</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">new_size</span>
        <span class="ruby-keyword kw">yield</span> <span class="ruby-identifier">line_n</span>, <span class="ruby-identifier">str</span>.<span class="ruby-identifier">chomp</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="__profile__" type="Public" category="Instance" id="M000051">
          <parameters>(name, min=1, iter=100) {|| ...}</parameters>

          <description><![CDATA[
            <p>
Takes a block, profiles the results of running the block specified number
of times and generates HTML report.
</p>
<h4>Parameters</h4>
<p>
name&lt;to_s&gt;
</p>
<pre>
  The file name. The result will be written out to
  Merb.root/&quot;log/#{name}.html&quot;.
</pre>
<p>
min&lt;Fixnum&gt;
</p>
<pre>
  Minimum percentage of the total time a method must take for it to be
  included in the result. Defaults to 1.
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">&lt;String&gt;:</td><td>The result of the profiling.

</td></tr>
</table>
<h4>Note</h4>
<p>
Requires ruby-prof (<tt>sudo gem install ruby-prof</tt>)
</p>
<h4>Example</h4>
<p>
<em>profile</em>(&quot;MyProfile&quot;, 5, 30) do
</p>
<pre>
  rand(10)**rand(10)
  puts &quot;Profile run&quot;
</pre>
<p>
end
</p>
<p>
Assuming that the total time taken for puts calls was less than 5% of the
total time to run, puts won&#8217;t appear in the profile report. The code
block will be run 30 times in the example above.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 419</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">__profile__</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">min</span>=<span class="ruby-value">1</span>, <span class="ruby-identifier">iter</span>=<span class="ruby-value">100</span>)
    <span class="ruby-identifier">require</span> <span class="ruby-value str">'ruby-prof'</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-keyword kw">defined?</span>(<span class="ruby-constant">RubyProf</span>)
    <span class="ruby-identifier">return_result</span> = <span class="ruby-value str">''</span>
    <span class="ruby-identifier">result</span> = <span class="ruby-constant">RubyProf</span>.<span class="ruby-identifier">profile</span> <span class="ruby-keyword kw">do</span>
      <span class="ruby-identifier">iter</span>.<span class="ruby-identifier">times</span>{<span class="ruby-identifier">return_result</span> = <span class="ruby-keyword kw">yield</span>}
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">printer</span> = <span class="ruby-constant">RubyProf</span><span class="ruby-operator">::</span><span class="ruby-constant">GraphHtmlPrinter</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">result</span>)
    <span class="ruby-identifier">path</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span>, <span class="ruby-value str">'log'</span>, <span class="ruby-node">&quot;#{name}.html&quot;</span>)
    <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">path</span>, <span class="ruby-value str">'w'</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">file</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">printer</span>.<span class="ruby-identifier">print</span>(<span class="ruby-identifier">file</span>, {<span class="ruby-identifier">:min_percent</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">min</span>,
                      <span class="ruby-identifier">:print_file</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>})
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">return_result</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="debugger" type="Public" category="Instance" id="M000054">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Defines debugger method so that code even works if debugger was not
requested. Drops a note to the logs that Debugger was not available.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 477</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">debugger</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info!</span> <span class="ruby-value str">&quot;\n***** Debugger requested, but was not &quot;</span> <span class="ruby-operator">+</span>
        <span class="ruby-value str">&quot;available: Start server with --debugger &quot;</span> <span class="ruby-operator">+</span>
        <span class="ruby-value str">&quot;to enable *****\n&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="dependencies" type="Public" category="Instance" id="M000042">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Loads both gem and library dependencies that are passed in as arguments.
Execution is deferred to the <a
href="#M000594">Merb::BootLoader::Dependencies.run</a> during bootup.
</p>
<h4>Parameters</h4>
<p>
*args&lt;<a href="#String">String</a>, <a href="#Hash">Hash</a>, Array&gt;
The dependencies to load.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[(<a href="#Gem::Dependency">Gem::Dependency</a>, Array[Gem::Dependency])]:</td><td>Gem::Dependencies for the

</td></tr>
</table>
<pre>
  dependencies specified in args.
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 176</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dependencies</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span>.<span class="ruby-identifier">map</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">arg</span><span class="ruby-operator">|</span>
      <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">arg</span>
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">String</span> <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">dependency</span>(<span class="ruby-identifier">arg</span>)
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Hash</span>   <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">r</span>,<span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-identifier">dependency</span>(<span class="ruby-identifier">r</span>, <span class="ruby-identifier">v</span>) }
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Array</span>  <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">r</span><span class="ruby-operator">|</span>   <span class="ruby-identifier">dependency</span>(<span class="ruby-identifier">r</span>)    }
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="dependency" type="Public" category="Instance" id="M000040">
          <parameters>(name, *ver, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Loads the given string as a gem. Execution is deferred until after the
logger has been instantiated and the framework directory structure is
defined.
</p>
<p>
If that has already happened, the gem will be activated immediately, but it
will still be registered.
</p>
<h4>Parameters</h4>
<p>
name&lt;String&gt; The name of the gem to load. *ver&lt;Gem::Requirement,
Gem::Version, Array, to_str&gt;
</p>
<pre>
  Version requirements to be passed to Gem::Dependency.new.
  If the last argument is a Hash, extract the :immediate option,
  forcing a dependency to load immediately.
</pre>
<h4>Options</h4>
<p>
:immediate when true, gem is loaded immediately even if framework is not
yet ready. :require_as file name to require for this gem.
</p>
<p>
See examples below.
</p>
<h4>Notes</h4>
<p>
If block is given, it is called after require is called. If you use a block
to require multiple files, require first using :require_as option and the
rest in the block.
</p>
<h4>Examples</h4>
<p>
Usage scenario is typically one of the following:
</p>
<ol>
<li><a href="#Gem">Gem</a> name and loaded file names are the same (ex.: amqp
gem uses amqp.rb). In this case no extra options needed.

</li>
</ol>
<p>
dependency &quot;amqp&quot;
</p>
<ol>
<li><a href="#Gem">Gem</a> name is different from the file needs to be required
(ex.: ParseTree gem uses parse_tree.rb as main file).

</li>
</ol>
<p>
dependency &quot;ParseTree&quot;, :require_as =&gt; &quot;parse_tree&quot;
</p>
<ol>
<li>You need to require a number of files from the library explicitly (ex.:
cherry pick features from xmpp4r). Pass a n array to :require_as.

</li>
</ol>
<p>
dependency &quot;xmpp4r&quot;, :require_as =&gt; %w(xmpp4r/client
xmpp4r/sasl xmpp4r/vcard)
</p>
<ol>
<li>You need to require a specific version of the gem.

</li>
</ol>
<p>
dependency &quot;RedCloth&quot;, &quot;3.0.4&quot;
</p>
<ol>
<li>You want to load dependency as soon as the method is called.

</li>
</ol>
<p>
dependency &quot;syslog&quot;, :immediate =&gt; true
</p>
<ol>
<li>You need to execute some arbitraty code after dependency is loaded:

</li>
</ol>
<p>
dependency &quot;ruby-growl&quot; do
</p>
<pre>
  g = Growl.new &quot;localhost&quot;, &quot;ruby-growl&quot;,
             [&quot;ruby-growl Notification&quot;]
  g.notify &quot;ruby-growl Notification&quot;, &quot;Ruby-Growl is set up&quot;,
        &quot;Ruby-Growl is set up&quot;
</pre>
<p>
end
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Gem::Dependency:</td><td>The dependency information.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 107</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dependency</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">ver</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-identifier">immediate</span> = <span class="ruby-identifier">ver</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:immediate</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">ver</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>)
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">immediate</span> <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">finished?</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span><span class="ruby-operator">::</span><span class="ruby-constant">Dependencies</span>)
      <span class="ruby-identifier">load_dependency</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">ver</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">track_dependency</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">ver</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="enforce!" type="Public" category="Instance" id="M000053">
          <parameters>(opts = {})</parameters>

          <description><![CDATA[
            <p>
Checks that the given objects quack like the given conditions.
</p>
<h4>Parameters</h4>
<p>
opts&lt;Hash&gt;
</p>
<pre>
  Conditions to enforce. Each key will receive a quacks_like? call with the
  value (see Object#quacks_like? for details).
</pre>
<h4>Raises</h4>
<table>
<tr><td valign="top">&lt;ArgumentError&gt;:</td><td>An object failed to quack like a condition.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 467</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">enforce!</span>(<span class="ruby-identifier">opts</span> = {})
    <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>,<span class="ruby-identifier">v</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-node">&quot;#{k.inspect} doesn't quack like #{v.inspect}&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">k</span>.<span class="ruby-identifier">quacks_like?</span>(<span class="ruby-identifier">v</span>)
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="extract_options_from_args!" type="Public" category="Instance" id="M000052">
          <parameters>(args)</parameters>

          <description><![CDATA[
            <p>
Extracts an options hash if it is the last item in the args array. Used
internally in methods that take *args.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">args&lt;Array&gt;:</td><td>The arguments to extract the hash from.

</td></tr>
</table>
<h4>Example</h4>
<p>
def render(*args,&amp;blk)
</p>
<pre>
  opts = extract_options_from_args!(args) || {}
  # [...]
</pre>
<p>
end
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 447</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">last_arg</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">last_arg</span>.<span class="ruby-identifier">instance_of?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">last_arg</span>.<span class="ruby-identifier">instance_of?</span>(<span class="ruby-constant">Mash</span>)
      <span class="ruby-identifier">args</span>.<span class="ruby-identifier">pop</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="given" type="Public" category="Instance" id="M000055">
          <parameters>(*args, &amp;example_group_block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 3</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">given</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">example_group_block</span>)
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> {} <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Hash</span> <span class="ruby-operator">===</span> <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>
    <span class="ruby-identifier">params</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>
    
    <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:shared</span>] = <span class="ruby-keyword kw">true</span>
    
    <span class="ruby-identifier">describe</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>) <span class="ruby-keyword kw">do</span>
      <span class="ruby-identifier">prepend_before</span>(<span class="ruby-identifier">:each</span>) <span class="ruby-keyword kw">do</span>
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">instance_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">example_group_block</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="load_dependencies" type="Public" category="Instance" id="M000043">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Loads both gem and library dependencies that are passed in as arguments.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*args&lt;<a href="#String">String</a>, <a href="#Hash">Hash</a>, Array&gt;:</td><td>The dependencies to load.

</td></tr>
</table>
<h4>Notes</h4>
<p>
Each argument can be:
</p>
<pre>
  String:: Single dependency.
  Hash::
    Multiple dependencies where the keys are names and the values versions.
  Array:: Multiple string dependencies.
</pre>
<h4>Examples</h4>
<p>
dependencies &quot;RedCloth&quot; # Loads the the RedCloth gem dependencies
&quot;RedCloth&quot;, &quot;merb_helpers&quot; # Loads RedCloth and
merb_helpers dependencies &quot;RedCloth&quot; =&gt; &quot;3.0&quot; #
Loads RedCloth 3.0
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 204</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">load_dependencies</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span>.<span class="ruby-identifier">map</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">arg</span><span class="ruby-operator">|</span>
      <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">arg</span>
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">String</span> <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">load_dependency</span>(<span class="ruby-identifier">arg</span>)
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Hash</span>   <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">r</span>,<span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-identifier">load_dependency</span>(<span class="ruby-identifier">r</span>, <span class="ruby-identifier">v</span>) }
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Array</span>  <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">r</span><span class="ruby-operator">|</span>   <span class="ruby-identifier">load_dependency</span>(<span class="ruby-identifier">r</span>)    }
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="load_dependency" type="Public" category="Instance" id="M000041">
          <parameters>(name, *ver, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Loads the given string as a gem.
</p>
<p>
This new version tries to load the file via ROOT/gems first before moving
off to the system gems (so if you have a lower version of a gem in
ROOT/gems, it&#8217;ll still get loaded).
</p>
<h4>Parameters</h4>
<p>
name&lt;String&gt; The name or dependency object of the gem to load.
*ver&lt;Gem::Requirement, Gem::Version, Array, to_str&gt;
</p>
<pre>
  Version requirements to be passed to Gem.activate.
</pre>
<h4>Notes</h4>
<p>
If the gem cannot be found, the method will attempt to require the string
as a library. If block given, it is called instead of doing a require, so
that you can pass some arbitraty code do load the gem.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Gem::Dependency:</td><td>The dependency information.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 138</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">load_dependency</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">ver</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-identifier">dep</span> = <span class="ruby-identifier">name</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Dependency</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">name</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">track_dependency</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">ver</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">verbose!</span>(<span class="ruby-node">&quot;activating gem '#{dep.name}' ...&quot;</span>)
    <span class="ruby-identifier">gem</span>(<span class="ruby-identifier">dep</span>)
  <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">LoadError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
    <span class="ruby-identifier">msg</span> = <span class="ruby-node">&quot;Could not activate gem #{name} using gem '#{dep.name}': #{e.message}.\nIt usually means gem has unsatisfied dependencies. Run Merb with --verbose option if you are not sure what the problem is.&quot;</span>
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-identifier">msg</span>, <span class="ruby-identifier">e</span>
  <span class="ruby-keyword kw">ensure</span>
    <span class="ruby-keyword kw">begin</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">verbose!</span>(<span class="ruby-node">&quot;loading gem '#{dep.name}' ...&quot;</span>)
      [<span class="ruby-identifier">dep</span>.<span class="ruby-identifier">require_as</span>].<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">req</span><span class="ruby-operator">|</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">verbose!</span>(<span class="ruby-node">&quot;running require '#{req}' ...&quot;</span>)
        <span class="ruby-identifier">require</span> <span class="ruby-identifier">req</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">LoadError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
      <span class="ruby-identifier">msg</span> = <span class="ruby-node">&quot;Could not load gem #{name} (tried to require #{dep.require_as.inspect}): #{e.message}.\nIt may happen because you mispelled file to require or gem has unsatisfied dependencies. Run Merb with --verbose option if you are not sure what the problem is.&quot;</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-identifier">msg</span>, <span class="ruby-identifier">e</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block</span> = <span class="ruby-identifier">dep</span>.<span class="ruby-identifier">require_block</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">verbose!</span>(<span class="ruby-node">&quot;calling a block after loading of '#{dep.name}' ...&quot;</span>)
      <span class="ruby-identifier">block</span>.<span class="ruby-identifier">call</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">dep</span> <span class="ruby-comment cmt"># ensure needs explicit return</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="rescue_require" type="Public" category="Instance" id="M000044">
          <parameters>(library, message = nil)</parameters>

          <description><![CDATA[
            <p>
Does a basic require, and prints a message if an error occurs.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">library&lt;to_s&gt;:</td><td>The library to attempt to include.

</td></tr>
<tr><td valign="top">message&lt;String&gt;:</td><td>The error to add to the log upon failure. Defaults to nil.

</td></tr>
</table>
<p>
:api: private @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 222</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">rescue_require</span>(<span class="ruby-identifier">library</span>, <span class="ruby-identifier">message</span> = <span class="ruby-keyword kw">nil</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn</span>(<span class="ruby-value str">&quot;Deprecation warning: rescue_require is deprecated&quot;</span>)
    <span class="ruby-identifier">sleep</span> <span class="ruby-value">2.0</span>
    <span class="ruby-identifier">require</span> <span class="ruby-identifier">library</span>
  <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">LoadError</span>, <span class="ruby-constant">RuntimeError</span>
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">error!</span>(<span class="ruby-identifier">message</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">message</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="track_dependency" type="Public" category="Instance" id="M000039">
          <parameters>(name, *ver, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Keeps track of all required dependencies.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;String&gt;:</td><td>The name of the gem to load.

</td></tr>
</table>
<p>
*ver&lt;Gem::Requirement, Gem::Version, Array, to_str&gt;
</p>
<pre>
  Version requirements to be passed to Gem::Dependency.new.
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">Gem::Dependency:</td><td>The dependency information.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 23</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">track_dependency</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">ver</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-identifier">options</span> = <span class="ruby-identifier">ver</span>.<span class="ruby-identifier">pop</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">ver</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>)
    <span class="ruby-identifier">new_dep</span> = <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Dependency</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">ver</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-value">? </span><span class="ruby-keyword kw">nil</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">ver</span>)
    <span class="ruby-identifier">new_dep</span>.<span class="ruby-identifier">require_block</span> = <span class="ruby-identifier">blk</span>
    <span class="ruby-identifier">new_dep</span>.<span class="ruby-identifier">require_as</span> = (<span class="ruby-identifier">options</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:require_as</span>]) <span class="ruby-operator">||</span> <span class="ruby-identifier">name</span>
    
    <span class="ruby-identifier">deps</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span><span class="ruby-operator">::</span><span class="ruby-constant">Dependencies</span>.<span class="ruby-identifier">dependencies</span>

    <span class="ruby-identifier">idx</span> = <span class="ruby-identifier">deps</span>.<span class="ruby-identifier">each_with_index</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">d</span>,<span class="ruby-identifier">i</span><span class="ruby-operator">|</span> <span class="ruby-keyword kw">break</span> <span class="ruby-identifier">i</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">d</span>.<span class="ruby-identifier">name</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">new_dep</span>.<span class="ruby-identifier">name</span>}

    <span class="ruby-identifier">idx</span> = <span class="ruby-identifier">idx</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Array</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">deps</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">+</span> <span class="ruby-value">1</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">idx</span>
    <span class="ruby-identifier">deps</span>.<span class="ruby-identifier">delete_at</span>(<span class="ruby-identifier">idx</span>)
    <span class="ruby-identifier">deps</span>.<span class="ruby-identifier">insert</span>(<span class="ruby-identifier">idx</span> <span class="ruby-operator">-</span> <span class="ruby-value">1</span>, <span class="ruby-identifier">new_dep</span>)

    <span class="ruby-identifier">new_dep</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="use_orm" type="Public" category="Instance" id="M000045">
          <parameters>(orm, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Used in Merb.root/config/init.rb to tell <a href="#Merb">Merb</a> which ORM
(<a href="#Object">Object</a> Relational Mapper) you wish to use. Currently
<a href="#Merb">Merb</a> has plugins to support ActiveRecord, DataMapper,
and Sequel.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">orm&lt;Symbol&gt;:</td><td>The ORM to use.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<h4>Example</h4>
<pre>
  use_orm :datamapper

  # This will use the DataMapper generator for your ORM
  $ merb-gen model ActivityEvent
</pre>
<h4>Notes</h4>
<pre>
  If for some reason this is called more than once, latter
  call takes over other.
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 251</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">use_orm</span>(<span class="ruby-identifier">orm</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-keyword kw">begin</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">orm</span> = <span class="ruby-identifier">orm</span>
      <span class="ruby-identifier">orm_plugin</span> = <span class="ruby-node">&quot;merb_#{orm}&quot;</span>
      <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">dependency</span>(<span class="ruby-identifier">orm_plugin</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">LoadError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;The #{orm_plugin} gem was not found.  You may need to install it.&quot;</span>)
      <span class="ruby-identifier">raise</span> <span class="ruby-identifier">e</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="use_template_engine" type="Public" category="Instance" id="M000048">
          <parameters>(template_engine, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Used in Merb.root/config/init.rb to tell <a href="#Merb">Merb</a> which
template engine to prefer.
</p>
<h4>Parameters</h4>
<p>
template_engine&lt;Symbol&gt;
</p>
<pre>
  The template engine to use.
</pre>
<h4>Returns</h4>
<p>
nil
</p>
<h4>Example</h4>
<pre>
  use_template_engine :haml

  # This will now use haml templates in generators where available.
  $ merb-gen resource_controller Project
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 308</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">use_template_engine</span>(<span class="ruby-identifier">template_engine</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">template_engine</span> = <span class="ruby-identifier">template_engine</span>

    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template_engine</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">:erb</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template_engine</span>.<span class="ruby-identifier">in?</span>(<span class="ruby-identifier">:haml</span>, <span class="ruby-identifier">:builder</span>)
        <span class="ruby-identifier">template_engine_plugin</span> = <span class="ruby-node">&quot;merb-#{template_engine}&quot;</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">template_engine_plugin</span> = <span class="ruby-node">&quot;merb_#{template_engine}&quot;</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">dependency</span>(<span class="ruby-identifier">template_engine_plugin</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-keyword kw">end</span>
    
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">LoadError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;The #{template_engine_plugin} gem was not found.  You may need to install it.&quot;</span>)
    <span class="ruby-identifier">raise</span> <span class="ruby-identifier">e</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="use_test" type="Public" category="Instance" id="M000047">
          <parameters>(*args)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 287</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">use_test</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">use_testing_framework</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="use_testing_framework" type="Public" category="Instance" id="M000046">
          <parameters>(test_framework, *test_dependencies)</parameters>

          <description><![CDATA[
            <p>
Used in Merb.root/config/init.rb to tell <a href="#Merb">Merb</a> which
testing framework to use. Currently <a href="#Merb">Merb</a> has plugins to
support RSpec and Test::Unit.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">test_framework&lt;Symbol&gt;:</td><td>The test framework to use. Currently only supports :rspec and :test_unit.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<h4>Example</h4>
<pre>
  use_test :rspec

  # This will now use the RSpec generator for tests
  $ merb-gen model ActivityEvent
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/core_ext/kernel.rb, line 280</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">use_testing_framework</span>(<span class="ruby-identifier">test_framework</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">test_dependencies</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">test_framework</span> = <span class="ruby-identifier">test_framework</span>
    
    <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">dependencies</span> <span class="ruby-identifier">test_dependencies</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">env</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;test&quot;</span> <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">env</span>.<span class="ruby-identifier">nil?</span>
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Mongrel" id="Mongrel">
    <classmod-info>

      <infiles>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Class name="Mongrel::HttpResponse" id="Mongrel::HttpResponse">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37handler37mongrel.rb">lib/merb-core/rack/handler/mongrel.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>




      <constant-list>

        <constant name="NO_CLOSE_STATUS_FORMAT">

          <value>&quot;HTTP/1.1 %d %s\r\n&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Instance">


        <method name="send_status_no_connection_close" type="Public" category="Instance" id="M000056">
          <parameters>(content_length=@body.length)</parameters>

          <description><![CDATA[
            <p>
Sends the status to the client without closing the connection.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">content_length&lt;Fixnum&gt;:</td><td>The length of the content. Defaults to body length.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/handler/mongrel.rb, line 9</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">send_status_no_connection_close</span>(<span class="ruby-identifier">content_length</span>=<span class="ruby-ivar">@body</span>.<span class="ruby-identifier">length</span>)
    <span class="ruby-keyword kw">unless</span> <span class="ruby-ivar">@status_sent</span>
      <span class="ruby-identifier">write</span>(<span class="ruby-constant">NO_CLOSE_STATUS_FORMAT</span> <span class="ruby-operator">%</span> [<span class="ruby-ivar">@status</span>, <span class="ruby-constant">Mongrel</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_STATUS_CODES</span>[<span class="ruby-ivar">@status</span>]])
      <span class="ruby-ivar">@status_sent</span> = <span class="ruby-keyword kw">true</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Erubis" id="Erubis">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

        <infile><a href="#lib37merb-core37gem_ext37erubis.rb">lib/merb-core/gem_ext/erubis.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="load_yaml_file" type="Public" category="Class" id="M000057">
          <parameters>(file, binding = binding)</parameters>

          <description><![CDATA[
            <p>
Loads a file, runs it through <a href="#Erubis">Erubis</a> and parses it as
YAML.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">file&lt;String&gt;:</td><td>The name of the file to load.

</td></tr>
<tr><td valign="top">binding&lt;Binding&gt;:</td><td>The binding to use when evaluating the ERB tags. Defaults to the current
binding.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/gem_ext/erubis.rb, line 80</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">load_yaml_file</span>(<span class="ruby-identifier">file</span>, <span class="ruby-identifier">binding</span> = <span class="ruby-identifier">binding</span>)
    <span class="ruby-constant">YAML</span><span class="ruby-operator">::</span><span class="ruby-identifier">load</span>(<span class="ruby-constant">Erubis</span><span class="ruby-operator">::</span><span class="ruby-constant">MEruby</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">IO</span>.<span class="ruby-identifier">read</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">file</span>))).<span class="ruby-identifier">result</span>(<span class="ruby-identifier">binding</span>))
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Erubis::Basic" id="Erubis::Basic">
    <classmod-info>

      <infiles>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Erubis::Basic::Converter" id="Erubis::Basic::Converter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37gem_ext37erubis.rb">lib/merb-core/gem_ext/erubis.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
This adds support for embedding the return value of a block call:
</p>
<pre>
  &lt;%= foo do %&gt;...&lt;% end =%&gt;
</pre>
<p>
:api: private
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="convert_input" type="Public" category="Instance" id="M000058">
          <parameters>(src, input)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/gem_ext/erubis.rb, line 8</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">convert_input</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">input</span>)
      <span class="ruby-identifier">pat</span> = <span class="ruby-ivar">@pattern</span>
      <span class="ruby-identifier">regexp</span> = <span class="ruby-identifier">pat</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">pat</span> <span class="ruby-operator">==</span> <span class="ruby-value str">'&lt;% %&gt;'</span> <span class="ruby-operator">?</span> <span class="ruby-constant">DEFAULT_REGEXP</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">pattern_regexp</span>(<span class="ruby-identifier">pat</span>)
      <span class="ruby-identifier">pos</span> = <span class="ruby-value">0</span>
      <span class="ruby-identifier">is_bol</span> = <span class="ruby-keyword kw">true</span>     <span class="ruby-comment cmt"># is beginning of line</span>
      <span class="ruby-identifier">input</span>.<span class="ruby-identifier">scan</span>(<span class="ruby-identifier">regexp</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">indicator</span>, <span class="ruby-identifier">code</span>, <span class="ruby-identifier">tailch</span>, <span class="ruby-identifier">rspace</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">match</span> = <span class="ruby-constant">Regexp</span>.<span class="ruby-identifier">last_match</span>()
        <span class="ruby-identifier">len</span>  = <span class="ruby-identifier">match</span>.<span class="ruby-identifier">begin</span>(<span class="ruby-value">0</span>) <span class="ruby-operator">-</span> <span class="ruby-identifier">pos</span>
        <span class="ruby-identifier">text</span> = <span class="ruby-identifier">input</span>[<span class="ruby-identifier">pos</span>, <span class="ruby-identifier">len</span>]
        <span class="ruby-identifier">pos</span>  = <span class="ruby-identifier">match</span>.<span class="ruby-identifier">end</span>(<span class="ruby-value">0</span>)
        <span class="ruby-identifier">ch</span>   = <span class="ruby-identifier">indicator</span> <span class="ruby-value">? </span><span class="ruby-identifier">indicator</span>[<span class="ruby-value">0</span>] <span class="ruby-operator">:</span> <span class="ruby-keyword kw">nil</span>
        <span class="ruby-identifier">lspace</span> = <span class="ruby-identifier">ch</span> <span class="ruby-operator">==</span> <span class="ruby-value">?=</span> <span class="ruby-operator">?</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">detect_spaces_at_bol</span>(<span class="ruby-identifier">text</span>, <span class="ruby-identifier">is_bol</span>)
        <span class="ruby-identifier">is_bol</span> = <span class="ruby-identifier">rspace</span> <span class="ruby-value">? </span><span class="ruby-keyword kw">true</span> <span class="ruby-operator">:</span> <span class="ruby-keyword kw">false</span>
        <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">text</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">text</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">text</span>.<span class="ruby-identifier">empty?</span>
        <span class="ruby-comment cmt">## * when '&lt;%= %&gt;', do nothing</span>
        <span class="ruby-comment cmt">## * when '&lt;% %&gt;' or '&lt;%# %&gt;', delete spaces iff only spaces are around '&lt;% %&gt;'</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">ch</span> <span class="ruby-operator">==</span> <span class="ruby-value">?=</span>              <span class="ruby-comment cmt"># &lt;%= %&gt;</span>
          <span class="ruby-identifier">rspace</span> = <span class="ruby-keyword kw">nil</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">tailch</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">tailch</span>.<span class="ruby-identifier">empty?</span>
          <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">lspace</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">lspace</span>
          <span class="ruby-identifier">add_expr</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">code</span>, <span class="ruby-identifier">indicator</span>)
          <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">rspace</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">rspace</span>
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">ch</span> <span class="ruby-operator">==</span> <span class="ruby-value">?\#</span>          <span class="ruby-comment cmt"># &lt;%# %&gt;</span>
          <span class="ruby-identifier">n</span> = <span class="ruby-identifier">code</span>.<span class="ruby-identifier">count</span>(<span class="ruby-value str">&quot;\n&quot;</span>) <span class="ruby-operator">+</span> (<span class="ruby-identifier">rspace</span> <span class="ruby-value">? </span><span class="ruby-value">1</span> <span class="ruby-operator">:</span> <span class="ruby-value">0</span>)
          <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@trim</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">lspace</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">rspace</span>
            <span class="ruby-identifier">add_stmt</span>(<span class="ruby-identifier">src</span>, <span class="ruby-value str">&quot;\n&quot;</span> <span class="ruby-operator">*</span> <span class="ruby-identifier">n</span>)
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">lspace</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">lspace</span>
            <span class="ruby-identifier">add_stmt</span>(<span class="ruby-identifier">src</span>, <span class="ruby-value str">&quot;\n&quot;</span> <span class="ruby-operator">*</span> <span class="ruby-identifier">n</span>)
            <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">rspace</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">rspace</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">ch</span> <span class="ruby-operator">==</span> <span class="ruby-value">?%</span>           <span class="ruby-comment cmt"># &lt;%% %&gt;</span>
          <span class="ruby-identifier">s</span> = <span class="ruby-node">&quot;#{lspace}#{@prefix||='&lt;%'}#{code}#{tailch}#{@postfix||='%&gt;'}#{rspace}&quot;</span>
          <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">s</span>)
        <span class="ruby-keyword kw">else</span>                     <span class="ruby-comment cmt"># &lt;% %&gt;</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@trim</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">lspace</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">rspace</span>
            <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:add_stmt2</span>)
              <span class="ruby-identifier">add_stmt2</span>(<span class="ruby-identifier">src</span>, <span class="ruby-node">&quot;#{lspace}#{code}#{rspace}&quot;</span>, <span class="ruby-identifier">tailch</span>)
            <span class="ruby-keyword kw">else</span>
              <span class="ruby-identifier">add_stmt</span>(<span class="ruby-identifier">src</span>, <span class="ruby-node">&quot;#{lspace}#{code}#{rspace}&quot;</span>)
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">lspace</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">lspace</span>
            <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:add_stmt2</span>)
              <span class="ruby-identifier">add_stmt2</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">code</span>, <span class="ruby-identifier">tailch</span>)
            <span class="ruby-keyword kw">else</span>
              <span class="ruby-identifier">add_stmt</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">code</span>)
            <span class="ruby-keyword kw">end</span>
            <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">rspace</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">rspace</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-comment cmt">#rest = $' || input                        # ruby1.8</span>
      <span class="ruby-identifier">rest</span> = <span class="ruby-identifier">pos</span> <span class="ruby-operator">==</span> <span class="ruby-value">0</span> <span class="ruby-operator">?</span> <span class="ruby-identifier">input</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">input</span>[<span class="ruby-identifier">pos</span><span class="ruby-operator">..</span><span class="ruby-value">-1</span>]   <span class="ruby-comment cmt"># ruby1.9</span>
      <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">rest</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Erubis::BlockAwareEnhancer" id="Erubis::BlockAwareEnhancer">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="add_expr_escaped" type="Public" category="Instance" id="M000062">
          <parameters>(src, code)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 264</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_expr_escaped</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">code</span>)
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">' @_erb_buf.concat('</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">escaped_expr</span>(<span class="ruby-identifier">code</span>) <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">');'</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_expr_literal" type="Public" category="Instance" id="M000064">
          <parameters>(src, code)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 276</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_expr_literal</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">code</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">code</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/(do|\{)(\s*\|[^|]*\|)?\s*\Z/</span>
        <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">' @_erb_buf.concat( '</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">code</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;; &quot;</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">' @_erb_buf.concat(('</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">code</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">').to_s);'</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_postamble" type="Public" category="Instance" id="M000060">
          <parameters>(src)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 253</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_postamble</span>(<span class="ruby-identifier">src</span>)
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;\n&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">src</span>[<span class="ruby-value">-1</span>] <span class="ruby-operator">==</span> <span class="ruby-value">?\n</span>      
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;_ret = @_erb_buf; @_erb_buf = _old_buf; _ret.to_s;\n&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_preamble" type="Public" category="Instance" id="M000059">
          <parameters>(src)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 247</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_preamble</span>(<span class="ruby-identifier">src</span>)
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;_old_buf, @_erb_buf = @_erb_buf, ''; &quot;</span>
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;@_engine = 'erb'; &quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_stmt2" type="Public" category="Instance" id="M000063">
          <parameters>(src, code, tailch)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 269</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_stmt2</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">code</span>, <span class="ruby-identifier">tailch</span>)
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">code</span>
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot; ).to_s; &quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">tailch</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;=&quot;</span>
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">';'</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">code</span>[<span class="ruby-value">-1</span>] <span class="ruby-operator">==</span> <span class="ruby-value">?\n</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_text" type="Public" category="Instance" id="M000061">
          <parameters>(src, text)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 259</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_text</span>(<span class="ruby-identifier">src</span>, <span class="ruby-identifier">text</span>)
      <span class="ruby-identifier">src</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot; @_erb_buf.concat('&quot;</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">escape_text</span>(<span class="ruby-identifier">text</span>) <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;'); &quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Erubis::MEruby" id="Erubis::MEruby">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37gem_ext37erubis.rb">lib/merb-core/gem_ext/erubis.rb</a></infile>

      </infiles>


     <superclass>Erubis::Eruby</superclass>

    </classmod-info>

    <contents>









      <included-module-list>

        <included-module name="PercentLineEnhancer"

        />

        <included-module name="StringBufferEnhancer"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Erubis::BlockAwareEruby" id="Erubis::BlockAwareEruby">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

      </infiles>


     <superclass>Eruby</superclass>

    </classmod-info>

    <contents>









      <included-module-list>

        <included-module name="BlockAwareEnhancer"

                         href="Erubis::BlockAwareEnhancer"

        />

      </included-module-list>

    </contents>

  </Class>

  <Module name="Merb" id="Merb">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37autoload.rb">lib/merb-core/autoload.rb</a></infile>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

        <infile><a href="#lib37merb-core37config.rb">lib/merb-core/config.rb</a></infile>

        <infile><a href="#lib37merb-core37constants.rb">lib/merb-core/constants.rb</a></infile>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

        <infile><a href="#lib37merb-core37controller37mime.rb">lib/merb-core/controller/mime.rb</a></infile>

        <infile><a href="#lib37merb-core37controller37mixins37controller.rb">lib/merb-core/controller/mixins/controller.rb</a></infile>

        <infile><a href="#lib37merb-core37controller37mixins37responder.rb">lib/merb-core/controller/mixins/responder.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37cookies.rb">lib/merb-core/dispatch/cookies.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37default_exception37default_exception.rb">lib/merb-core/dispatch/default_exception/default_exception.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37dispatcher.rb">lib/merb-core/dispatch/dispatcher.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37request.rb">lib/merb-core/dispatch/request.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37request_parsers.rb">lib/merb-core/dispatch/request_parsers.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37behavior.rb">lib/merb-core/dispatch/router/behavior.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37cached_proc.rb">lib/merb-core/dispatch/router/cached_proc.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37resources.rb">lib/merb-core/dispatch/router/resources.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37route.rb">lib/merb-core/dispatch/router/route.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router.rb">lib/merb-core/dispatch/router.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session37container.rb">lib/merb-core/dispatch/session/container.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session37cookie.rb">lib/merb-core/dispatch/session/cookie.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session37memcached.rb">lib/merb-core/dispatch/session/memcached.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session37memory.rb">lib/merb-core/dispatch/session/memory.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session37store_container.rb">lib/merb-core/dispatch/session/store_container.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37worker.rb">lib/merb-core/dispatch/worker.rb</a></infile>

        <infile><a href="#lib37merb-core37logger.rb">lib/merb-core/logger.rb</a></infile>

        <infile><a href="#lib37merb-core37plugins.rb">lib/merb-core/plugins.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37abstract.rb">lib/merb-core/rack/adapter/abstract.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37ebb.rb">lib/merb-core/rack/adapter/ebb.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37evented_mongrel.rb">lib/merb-core/rack/adapter/evented_mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37fcgi.rb">lib/merb-core/rack/adapter/fcgi.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37irb.rb">lib/merb-core/rack/adapter/irb.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37mongrel.rb">lib/merb-core/rack/adapter/mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37runner.rb">lib/merb-core/rack/adapter/runner.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37swiftiplied_mongrel.rb">lib/merb-core/rack/adapter/swiftiplied_mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37thin.rb">lib/merb-core/rack/adapter/thin.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37thin_turbo.rb">lib/merb-core/rack/adapter/thin_turbo.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37webrick.rb">lib/merb-core/rack/adapter/webrick.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter.rb">lib/merb-core/rack/adapter.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37application.rb">lib/merb-core/rack/application.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37handler37mongrel.rb">lib/merb-core/rack/handler/mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37helpers.rb">lib/merb-core/rack/helpers.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37conditional_get.rb">lib/merb-core/rack/middleware/conditional_get.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37content_length.rb">lib/merb-core/rack/middleware/content_length.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37path_prefix.rb">lib/merb-core/rack/middleware/path_prefix.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37profiler.rb">lib/merb-core/rack/middleware/profiler.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37static.rb">lib/merb-core/rack/middleware/static.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37tracer.rb">lib/merb-core/rack/middleware/tracer.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware.rb">lib/merb-core/rack/middleware.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37stream_wrapper.rb">lib/merb-core/rack/stream_wrapper.rb</a></infile>

        <infile><a href="#lib37merb-core37rack.rb">lib/merb-core/rack.rb</a></infile>

        <infile><a href="#lib37merb-core37server.rb">lib/merb-core/server.rb</a></infile>

        <infile><a href="#lib37merb-core37tasks37merb_rake_helper.rb">lib/merb-core/tasks/merb_rake_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37controller_helper.rb">lib/merb-core/test/helpers/controller_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37cookie_jar.rb">lib/merb-core/test/helpers/cookie_jar.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37mock_request_helper.rb">lib/merb-core/test/helpers/mock_request_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37request_helper.rb">lib/merb-core/test/helpers/request_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37route_helper.rb">lib/merb-core/test/helpers/route_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37run_specs.rb">lib/merb-core/test/run_specs.rb</a></infile>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

        <infile><a href="#lib37merb-core37test.rb">lib/merb-core/test.rb</a></infile>

        <infile><a href="#lib37merb-core37version.rb">lib/merb-core/version.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
Most of this list is simply constants frozen for efficiency and lowered
memory consumption. Every time Ruby VM comes across a string or a number or
a regexp literal, new object is created.
</p>
<p>
This means if you refer to the same string 6 times per request and your
application takes 100 requests per second, there are 600 objects for weak
MRI garbage collector to work on.
</p>
<p>
GC cycles take up to 80% (!) time of request processing in some cases.
Eventually Rubinius and maybe MRI 2.0 gonna improve this situation but at
the moment, all commonly used strings, regexp and numbers used as constants
so no extra objects created and VM just operates pointers.
</p>
<hr size="1"></hr><p>
require &quot;time&quot; # httpdate
</p>
<h4>Public <a href="#Merb">Merb</a> <a href="#Merb::Logger">Logger</a> API</h4>
<p>
To replace an existing logger with a new one:
</p>
<pre>
 Merb::Logger.set_log(log{String, IO},level{Symbol, String})
</pre>
<p>
Available logging levels are
</p>
<pre>
  Merb::Logger::{ Fatal, Error, Warn, Info, Debug }
</pre>
<p>
Logging via:
</p>
<pre>
  Merb.logger.fatal(message&lt;String&gt;,&amp;block)
  Merb.logger.error(message&lt;String&gt;,&amp;block)
  Merb.logger.warn(message&lt;String&gt;,&amp;block)
  Merb.logger.info(message&lt;String&gt;,&amp;block)
  Merb.logger.debug(message&lt;String&gt;,&amp;block)
</pre>
<p>
Logging with autoflush:
</p>
<pre>
  Merb.logger.fatal!(message&lt;String&gt;,&amp;block)
  Merb.logger.error!(message&lt;String&gt;,&amp;block)
  Merb.logger.warn!(message&lt;String&gt;,&amp;block)
  Merb.logger.info!(message&lt;String&gt;,&amp;block)
  Merb.logger.debug!(message&lt;String&gt;,&amp;block)
</pre>
<p>
Flush the buffer to
</p>
<pre>
  Merb.logger.flush
</pre>
<p>
Remove the current log object
</p>
<pre>
  Merb.logger.close
</pre>
<h4>Private <a href="#Merb">Merb</a> <a href="#Merb::Logger">Logger</a> API</h4>
<p>
To initialize the logger you create a new object, proxies to set_log.
</p>
<pre>
  Merb::Logger.new(log{String, IO},level{Symbol, String})
</pre>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="VERSION">

          <value>'1.0' unless defined?(Merb::VERSION)</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="add_mime_type" type="Public" category="Class" id="M000068">
          <parameters>(key, transform_method, mimes, new_response_headers = {}, default_quality = 1, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Any specific outgoing headers should be included here. These are not the
content-type header but anything in addition to it.
<tt>transform_method</tt> should be set to a symbol of the method used to
transform a resource into this mime type. For example for the :xml mime
type an object might be transformed by calling :to_xml, or for the :js mime
type, :to_json. If there is no transform method, use nil.
</p>
<h4>Autogenerated Methods</h4>
<p>
Adding a mime-type adds a render_type method that sets the content type and
calls render.
</p>
<p>
By default this does: def render_all, def render_yaml, def render_text, def
render_html, def render_xml, def render_js, and def render_yaml
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Symbol&gt;:</td><td>The name of the mime-type. This is used by the provides API

</td></tr>
<tr><td valign="top">transform_method&lt;~to_s&gt;:</td><td>The associated method to call on objects to convert them to the appropriate
mime-type. For instance, :json would use :to_json as its transform_method.

</td></tr>
<tr><td valign="top">mimes&lt;Array[String]&gt;:</td><td>A list of possible values sent in the Accept header, such as text/html,
that should be associated with this content-type.

</td></tr>
<tr><td valign="top">new_response_headers&lt;Hash&gt;:</td><td>The response headers to set for the mime type. For example:
&#8216;Content-Type&#8217; =&gt; &#8216;application/json;
charset=utf-8&#8217;; As a shortcut for the common charset option, use
:charset =&gt; &#8216;utf-8&#8217;, which will be correctly appended to the
mimetype itself.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>a block which receives the current controller when the format

</td></tr>
</table>
<pre>
  is set (in the controller's #content_type method)
</pre>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mime.rb, line 70</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">transform_method</span>, <span class="ruby-identifier">mimes</span>, <span class="ruby-identifier">new_response_headers</span> = {}, <span class="ruby-identifier">default_quality</span> = <span class="ruby-value">1</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>) 
      <span class="ruby-identifier">enforce!</span>(<span class="ruby-identifier">key</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Symbol</span>, <span class="ruby-identifier">mimes</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Array</span>)
      
      <span class="ruby-identifier">content_type</span> = <span class="ruby-identifier">new_response_headers</span>[<span class="ruby-value str">&quot;Content-Type&quot;</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">mimes</span>.<span class="ruby-identifier">first</span>
      
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">charset</span> = <span class="ruby-identifier">new_response_headers</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:charset</span>)
        <span class="ruby-identifier">content_type</span> <span class="ruby-operator">+=</span> <span class="ruby-node">&quot;; charset=#{charset}&quot;</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">TYPES</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">key</span> =<span class="ruby-operator">&gt;</span> 
        {<span class="ruby-identifier">:accepts</span>           =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">mimes</span>, 
         <span class="ruby-identifier">:transform_method</span>  =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">transform_method</span>,
         <span class="ruby-identifier">:content_type</span>      =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">content_type</span>,
         <span class="ruby-identifier">:response_headers</span>  =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">new_response_headers</span>,
         <span class="ruby-identifier">:default_quality</span>   =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">default_quality</span>,
         <span class="ruby-identifier">:response_block</span>    =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">block</span> })

      <span class="ruby-identifier">mimes</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">mime</span><span class="ruby-operator">|</span>
        <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">MIMES</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">mime</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">key</span>)
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">RenderMixin</span>.<span class="ruby-identifier">class_eval</span> <span class="ruby-value str">&quot;def render_\#{key}(thing = nil, opts = {})\nself.content_type = :\#{key}\nrender thing, opts\nend\n&quot;</span>, <span class="ruby-keyword kw">__FILE__</span>, <span class="ruby-keyword kw">__LINE__</span>
      
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="available_accepts" type="Public" category="Class" id="M000067">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Hash{<a href="#String">String</a> =&gt; Symbol}:</td><td>A hash mapping Content-Type values to the mime type key of the appropriate
entry in <a href="#M000066">available_mime_types</a>

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mime.rb, line 30</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">available_accepts</span>
      <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">MIMES</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="available_mime_types" type="Public" category="Class" id="M000066">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns a hash of the available mime types.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash{Symbol =&gt; Hash{Symbol =&gt; Object}}:</td><td>The available mime types.

</td></tr>
</table>
<h4>Notes</h4>
<p>
Each entry corresponds to a call to <a href="#M000068">add_mime_type</a>,
having the mime type key (:html, :xml, :json, etc.) as the key and a hash
containing the following entries:
</p>
<pre>
  :accepts           # the mime types that will be recognized by this entry
  :transform_method  # the method called on an object to convert it to content of this type (such as to_json)
  :content_type      # the value set to the &quot;Content-Type&quot; HTTP header when this mime is sent in a response
  :response_headers  # sent in a response using this content type
  :default_quality   # the scale factor used in describing content type preference
  :response_block    # the block to be called with the controller when a request responds to this mime type
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mime.rb, line 21</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">available_mime_types</span>
      <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">TYPES</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="exception" type="Public" category="Class" id="M000065">
          <parameters>(e)</parameters>

          <description><![CDATA[
            <p>
Required to show exceptions in the log file
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">e&lt;Exception&gt;:</td><td>The exception that a message is being generated for

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 346</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">exception</span>(<span class="ruby-identifier">e</span>)
    <span class="ruby-node">&quot;#{ e.message } - (#{ e.class })\n&quot;</span> <span class="ruby-operator">&lt;&lt;</span>  
    <span class="ruby-node">&quot;#{(e.backtrace or []).join(&quot;\n&quot;)}&quot;</span> 
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="mime_transform_method" type="Public" category="Class" id="M000070">
          <parameters>(key)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Symbol&gt;:</td><td>The key that represents the mime-type.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Symbol:</td><td>The transform method for the mime type, e.g. :to_json.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>The requested mime type is not valid.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mime.rb, line 130</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">mime_transform_method</span>(<span class="ruby-identifier">key</span>)
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-node">&quot;:#{key} is not a valid MIME-type&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">TYPES</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">key</span>)
      <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">TYPES</span>[<span class="ruby-identifier">key</span>][<span class="ruby-identifier">:transform_method</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="remove_mime_type" type="Public" category="Class" id="M000069">
          <parameters>(key)</parameters>

          <description><![CDATA[
            <p>
Removes a MIME-type from the mime-type list.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Symbol&gt;:</td><td>The key that represents the mime-type to remove.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">(Boolean, Hash{Symbol =&gt; Object}):</td><td>If it was present, the old specification of the MIME-type. Same structure

</td></tr>
</table>
<pre>
  as a value in Merb.available_mime_types. False if the key was not present.
</pre>
<h4>Notes</h4>
<p>
:all is the key for <b>/</b>; It can&#8217;t be removed.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mime.rb, line 115</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">remove_mime_type</span>(<span class="ruby-identifier">key</span>)
      <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">false</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">key</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:all</span>
      <span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">TYPES</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">key</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Plugins" id="Merb::Plugins">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37plugins.rb">lib/merb-core/plugins.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="add_generators" type="Public" category="Class" id="M000075">
          <parameters>(*generators)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">*generators:</td><td>Generator paths to add to the list of plugin generators.

</td></tr>
</table>
<h4>Notes</h4>
<p>
This is the recommended way to register your plugin&#8217;s generators in
<a href="#Merb">Merb</a>.
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/plugins.rb, line 76</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">add_generators</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">generators</span>)
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_generators</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">generators</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_rakefiles" type="Public" category="Class" id="M000074">
          <parameters>(*rakefiles)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">*rakefiles:</td><td>Rakefiles to add to the list of plugin Rakefiles.

</td></tr>
</table>
<h4>Notes</h4>
<p>
This is a recommended way to register your plugin&#8217;s Raketasks in <a
href="#Merb">Merb</a>.
</p>
<h4>Examples</h4>
<p>
From merb_sequel plugin:
</p>
<p>
if defined(<a href="#Merb::Plugins">Merb::Plugins</a>)
</p>
<pre>
  Merb::Plugins.add_rakefiles &quot;merb_sequel&quot; / &quot;merbtasks&quot;
</pre>
<p>
end
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/plugins.rb, line 63</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">add_rakefiles</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">rakefiles</span>)
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_rakefiles</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">rakefiles</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="config" type="Public" category="Class" id="M000071">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the configuration settings hash for plugins. This is prepopulated
from Merb.root / &quot;config/plugins.yml&quot; if it is present.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The configuration loaded from Merb.root / &quot;config/plugins.yml&quot;
or, if the load fails, an empty hash whose default value is another <a
href="#Hash">Hash</a>.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/plugins.rb, line 14</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">config</span>
      <span class="ruby-ivar">@config</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
        <span class="ruby-comment cmt"># this is so you can do Merb.plugins.config[:helpers][:awesome] = &quot;bar&quot;</span>
        <span class="ruby-identifier">config_hash</span> = <span class="ruby-constant">Hash</span>.<span class="ruby-identifier">new</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">h</span>,<span class="ruby-identifier">k</span><span class="ruby-operator">|</span> <span class="ruby-identifier">h</span>[<span class="ruby-identifier">k</span>] = {}}
        <span class="ruby-identifier">file</span> = <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;config&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;plugins.yml&quot;</span>

        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-identifier">file</span>)
          <span class="ruby-identifier">require</span> <span class="ruby-value str">'yaml'</span>
          <span class="ruby-identifier">to_merge</span> = <span class="ruby-constant">YAML</span>.<span class="ruby-identifier">load_file</span>(<span class="ruby-identifier">file</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">to_merge</span> = {}
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">config_hash</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">to_merge</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="generators" type="Public" category="Class" id="M000073">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Array(<a href="#String">String</a>):</td><td>All Generator load paths <a href="#Merb">Merb</a> uses for plugins.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/plugins.rb, line 43</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">generators</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">generators</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="rakefiles" type="Public" category="Class" id="M000072">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Array(<a href="#String">String</a>):</td><td>All Rakefile load paths <a href="#Merb">Merb</a> uses for plugins.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/plugins.rb, line 35</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">rakefiles</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">rakefiles</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::SessionMixin" id="Merb::SessionMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
This is mixed into <a href="#Merb::Controller">Merb::Controller</a> on
framework boot.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="included" type="Public" category="Class" id="M000076">
          <parameters>(base)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 53</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">included</span>(<span class="ruby-identifier">base</span>)
      <span class="ruby-comment cmt"># Register a callback to finalize sessions - needs to run before the cookie</span>
      <span class="ruby-comment cmt"># callback extracts Set-Cookie headers from request.cookies.</span>
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">_after_dispatch_callbacks</span>.<span class="ruby-identifier">unshift</span> <span class="ruby-identifier">lambda</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">finalize_session</span> }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="needs_new_cookie!" type="Public" category="Class" id="M000079">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Marks this session as needing a new cookie.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 92</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">needs_new_cookie!</span>
      <span class="ruby-ivar">@_new_cookie</span> = <span class="ruby-keyword kw">true</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="needs_new_cookie?" type="Public" category="Class" id="M000080">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Does session need new cookie?
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>true if a new cookie is needed, false otherwise.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 102</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">needs_new_cookie?</span>
      <span class="ruby-ivar">@_new_cookie</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="rand_uuid" type="Public" category="Class" id="M000078">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>A random 32 character string for use as a unique session ID.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 76</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">rand_uuid</span>
      <span class="ruby-identifier">values</span> = [
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x0010000</span>),
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x0010000</span>),
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x0010000</span>),
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x0010000</span>),
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x0010000</span>),
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x1000000</span>),
        <span class="ruby-identifier">rand</span>(<span class="ruby-value">0x1000000</span>),
      ]
      <span class="ruby-value str">&quot;%04x%04x%04x%04x%04x%06x%06x&quot;</span> <span class="ruby-operator">%</span> <span class="ruby-identifier">values</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="session" type="Public" category="Instance" id="M000077">
          <parameters>(session_store = nil)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_store&lt;String&gt;:</td><td>The type of session store to access.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>The session that was extracted from the request object.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 66</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session</span>(<span class="ruby-identifier">session_store</span> = <span class="ruby-keyword kw">nil</span>)
      <span class="ruby-identifier">request</span>.<span class="ruby-identifier">session</span>(<span class="ruby-identifier">session_store</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::SessionMixin::RequestMixin" id="Merb::SessionMixin::RequestMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="included" type="Public" category="Class" id="M000081">
          <parameters>(base)</parameters>

          <description><![CDATA[
            <p>
Adds class methods to <a href="#Merb::Request">Merb::Request</a> object.
Sets up repository of session store types. Sets the session ID key and
expiry values.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 115</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">included</span>(<span class="ruby-identifier">base</span>)
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">extend</span> <span class="ruby-constant">ClassMethods</span>
        
        <span class="ruby-comment cmt"># Keep track of all known session store types.</span>
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">cattr_accessor</span> <span class="ruby-identifier">:registered_session_types</span>
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">registered_session_types</span> = <span class="ruby-constant">Dictionary</span>.<span class="ruby-identifier">new</span>
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">class_inheritable_accessor</span> <span class="ruby-identifier">:_session_id_key</span>, <span class="ruby-identifier">:_session_secret_key</span>,
                                        <span class="ruby-identifier">:_session_expiry</span>
        
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">_session_id_key</span>        = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_id_key</span>] <span class="ruby-operator">||</span> <span class="ruby-value str">'_session_id'</span>
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">_session_expiry</span>        = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_expiry</span>] <span class="ruby-operator">||</span> <span class="ruby-value">0</span>
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">_session_secret_key</span>    = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_secret_key</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="default_cookies" type="Public" category="Instance" id="M000089">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Assigns default cookie values
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 231</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default_cookies</span>
        <span class="ruby-identifier">defaults</span> = {}
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">route</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">route</span>.<span class="ruby-identifier">allow_fixation?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">params</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">_session_id_key</span>)
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span>(<span class="ruby-node">&quot;Fixated session id: #{_session_id_key}&quot;</span>)
          <span class="ruby-identifier">defaults</span>[<span class="ruby-identifier">_session_id_key</span>] = <span class="ruby-identifier">params</span>[<span class="ruby-identifier">_session_id_key</span>]
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">defaults</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="default_session_store" type="Public" category="Instance" id="M000082">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
The default session store type.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 148</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default_session_store</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_store</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_store</span>].<span class="ruby-identifier">to_sym</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="destroy_session_cookie" type="Public" category="Instance" id="M000094">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Destroy the session cookie.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 266</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">destroy_session_cookie</span>
        <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">_session_id_key</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="finalize_session" type="Public" category="Instance" id="M000087">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Teardown and/or persist the current sessions.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 223</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">finalize_session</span>
        <span class="ruby-identifier">session_stores</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">name</span>, <span class="ruby-identifier">store</span><span class="ruby-operator">|</span> <span class="ruby-identifier">store</span>.<span class="ruby-identifier">finalize</span>(<span class="ruby-keyword kw">self</span>) }
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="finalize_sessions" type="Public" category="Instance" id="M000088">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000087">finalize_session</a>
</p>
          ]]></description>


        </method>

        <method name="session" type="Public" category="Instance" id="M000084">
          <parameters>(session_store = nil)</parameters>

          <description><![CDATA[
            <p>
Returns session container. <a href="#Merb">Merb</a> is able to handle
multiple session stores, hence a parameter to pick it.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">session_store&lt;String&gt;:</td><td>The type of session store to access,

</td></tr>
</table>
<p>
defaults to default_session_store.
</p>
<h4>Notes</h4>
<p>
If no suitable session store type is given, it defaults to cookie-based
sessions.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>an instance of a session store extending <a
href="#Merb::SessionContainer">Merb::SessionContainer</a>.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 176</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session</span>(<span class="ruby-identifier">session_store</span> = <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-identifier">session_store</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">default_session_store</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">class_name</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">registered_session_types</span>[<span class="ruby-identifier">session_store</span>]
          <span class="ruby-identifier">session_stores</span>[<span class="ruby-identifier">session_store</span>] <span class="ruby-operator">||=</span> <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">class_name</span>).<span class="ruby-identifier">setup</span>(<span class="ruby-keyword kw">self</span>)
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">fallback</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">registered_session_types</span>.<span class="ruby-identifier">keys</span>.<span class="ruby-identifier">first</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn</span> <span class="ruby-node">&quot;Session store '#{session_store}' not found. Check your configuration in init file.&quot;</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn</span> <span class="ruby-node">&quot;Falling back to #{fallback} session store.&quot;</span>
          <span class="ruby-identifier">session</span>(<span class="ruby-identifier">fallback</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">msg</span> = <span class="ruby-value str">&quot;No session store set. Set it in init file like this: c[:session_store] = 'activerecord'&quot;</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">error!</span>(<span class="ruby-identifier">msg</span>)
          <span class="ruby-identifier">raise</span> <span class="ruby-constant">NoSessionContainer</span>, <span class="ruby-identifier">msg</span>            
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="session=" type="Public" category="Instance" id="M000085">
          <parameters>(new_session)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">new_session&lt;Merb::SessionContainer&gt;:</td><td>A session store instance.

</td></tr>
</table>
<h4>Notes</h4>
<p>
The session is assigned internally by its session_store_type key.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 198</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session=</span>(<span class="ruby-identifier">new_session</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session?</span>(<span class="ruby-identifier">new_session</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">session_store_type</span>)
          <span class="ruby-identifier">original_session_id</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session</span>(<span class="ruby-identifier">new_session</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">session_store_type</span>).<span class="ruby-identifier">session_id</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">new_session</span>.<span class="ruby-identifier">session_id</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">original_session_id</span>
            <span class="ruby-identifier">set_session_id_cookie</span>(<span class="ruby-identifier">new_session</span>.<span class="ruby-identifier">session_id</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">session_stores</span>[<span class="ruby-identifier">new_session</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">session_store_type</span>] = <span class="ruby-identifier">new_session</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="session?" type="Public" category="Instance" id="M000086">
          <parameters>(session_store = nil)</parameters>

          <description><![CDATA[
            <p>
Whether a session has been setup
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>true if the session is part of the session stores configured.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 214</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session?</span>(<span class="ruby-identifier">session_store</span> = <span class="ruby-keyword kw">nil</span>)
        (<span class="ruby-identifier">session_store</span> <span class="ruby-value">? </span>[<span class="ruby-identifier">session_store</span>] <span class="ruby-operator">:</span> <span class="ruby-identifier">session_stores</span>).<span class="ruby-identifier">any?</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">type</span>, <span class="ruby-identifier">store</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">store</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionContainer</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="session_cookie_value" type="Public" category="Instance" id="M000092">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The value of the session cookie; either the session id or the actual
encoded data.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 258</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session_cookie_value</span>
        <span class="ruby-identifier">cookies</span>[<span class="ruby-identifier">_session_id_key</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="session_id" type="Public" category="Instance" id="M000093">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000092">session_cookie_value</a>
</p>
          ]]></description>


        </method>

        <method name="session_stores" type="Public" category="Instance" id="M000083">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>All active session stores by type.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 156</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session_stores</span>
        <span class="ruby-ivar">@session_stores</span> <span class="ruby-operator">||=</span> {}
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="set_session_cookie_value" type="Public" category="Instance" id="M000090">
          <parameters>(value, options = {})</parameters>

          <description><![CDATA[
            <p>
Sets session cookie value.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">value&lt;String&gt;:</td><td>The value of the session cookie; either the session id or the actual
encoded data.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Cookie options like domain, path and expired.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 247</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">set_session_cookie_value</span>(<span class="ruby-identifier">value</span>, <span class="ruby-identifier">options</span> = {})
        <span class="ruby-identifier">defaults</span> = {}
        <span class="ruby-identifier">defaults</span>[<span class="ruby-identifier">:expires</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">_session_expiry</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">_session_expiry</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">0</span>
        <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">set_cookie</span>(<span class="ruby-identifier">_session_id_key</span>, <span class="ruby-identifier">value</span>, <span class="ruby-identifier">defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">options</span>))
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="set_session_id_cookie" type="Public" category="Instance" id="M000091">
          <parameters>(value, options = {})</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000090">set_session_cookie_value</a>
</p>
          ]]></description>


        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::SessionMixin::RequestMixin::ClassMethods" id="Merb::SessionMixin::RequestMixin::ClassMethods">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="register_session_type" type="Public" category="Instance" id="M000095">
          <parameters>(name, class_name)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;~to_sym&gt;:</td><td>Name of the session type to register.

</td></tr>
<tr><td valign="top">class_name&lt;String&gt;:</td><td>The corresponding class name.

</td></tr>
</table>
<h4>Notes</h4>
<p>
This is automatically called when <a
href="#Merb::SessionContainer">Merb::SessionContainer</a> is subclassed.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 139</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">register_session_type</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">class_name</span>)
          <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">registered_session_types</span>[<span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_sym</span>] = <span class="ruby-identifier">class_name</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::SessionMixin::NoSessionContainer" id="Merb::SessionMixin::NoSessionContainer">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Raised when no suitable session store has been setup.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::SessionMixin::SessionOverflow" id="Merb::SessionMixin::SessionOverflow">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Raised when storing more data than the available space reserved.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Module name="Merb::RenderMixin" id="Merb::RenderMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37render.rb">lib/merb-core/controller/mixins/render.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="included" type="Public" category="Class" id="M000096">
          <parameters>(base)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">base&lt;Module&gt;:</td><td>Module that is including <a href="#Merb::RenderMixin">RenderMixin</a>
(probably a controller)

</td></tr>
</table>
<p>
@api private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 9</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">included</span>(<span class="ruby-identifier">base</span>)
    <span class="ruby-identifier">base</span>.<span class="ruby-identifier">extend</span>(<span class="ruby-constant">ClassMethods</span>)
    <span class="ruby-identifier">base</span>.<span class="ruby-identifier">class_eval</span> <span class="ruby-keyword kw">do</span>
      <span class="ruby-identifier">class_inheritable_accessor</span> <span class="ruby-identifier">:_default_render_options</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="_get_layout" type="Public" category="Instance" id="M000101">
          <parameters>(layout = nil)</parameters>

          <description><![CDATA[
            <p>
Gets the layout that should be used. The content-type will be appended to
the layout unless the layout already contains a &quot;.&quot; in it.
</p>
<p>
If no layout was passed in, this method will look for one with the same
name as the controller, and finally one in
&quot;application.#{content_type}&quot;.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">layout&lt;~to_s&gt;:</td><td>A layout, relative to the layout root. Defaults to nil.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The method name that corresponds to the found layout.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">TemplateNotFound:</td><td>If a layout was specified (either via layout in the class or by passing one
in to this method), and not found. No error will be raised if no layout was
specified, and the default layouts were not found.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 369</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_get_layout</span>(<span class="ruby-identifier">layout</span> = <span class="ruby-keyword kw">nil</span>)
    <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">false</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">layout</span> <span class="ruby-operator">==</span> <span class="ruby-keyword kw">false</span>
    
    <span class="ruby-identifier">layout</span> = <span class="ruby-identifier">layout</span>.<span class="ruby-identifier">instance_of?</span>(<span class="ruby-constant">Symbol</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">layout</span>, <span class="ruby-keyword kw">true</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">send</span>(<span class="ruby-identifier">layout</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">layout</span>
    <span class="ruby-identifier">layout</span> = <span class="ruby-identifier">layout</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">layout</span>

    <span class="ruby-comment cmt"># If a layout was provided, throw an error if it's not found</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">layout</span>      
      <span class="ruby-identifier">template_method</span>, <span class="ruby-identifier">template_location</span> = 
        <span class="ruby-identifier">_template_for</span>(<span class="ruby-identifier">layout</span>, <span class="ruby-identifier">layout</span>.<span class="ruby-identifier">index</span>(<span class="ruby-value str">&quot;.&quot;</span>) <span class="ruby-operator">?</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">content_type</span>, <span class="ruby-value str">&quot;layout&quot;</span>)
        
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">TemplateNotFound</span>, <span class="ruby-node">&quot;No layout found at #{template_location}&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">template_method</span>
      <span class="ruby-identifier">template_method</span>

    <span class="ruby-comment cmt"># If a layout was not provided, try the default locations</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">template</span>, <span class="ruby-identifier">location</span> = <span class="ruby-identifier">_template_for</span>(<span class="ruby-identifier">controller_name</span>, <span class="ruby-identifier">content_type</span>, <span class="ruby-value str">&quot;layout&quot;</span>)
      <span class="ruby-identifier">template</span>, <span class="ruby-identifier">location</span> = <span class="ruby-identifier">_template_for</span>(<span class="ruby-value str">&quot;application&quot;</span>, <span class="ruby-identifier">content_type</span>, <span class="ruby-value str">&quot;layout&quot;</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">template</span>
      <span class="ruby-identifier">template</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_handle_options!" type="Public" category="Instance" id="M000100">
          <parameters>(opts)</parameters>

          <description><![CDATA[
            <p>
Takes the options hash and handles it as appropriate.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>The options hash that was passed into render.

</td></tr>
</table>
<h4>Options</h4>
<table>
<tr><td valign="top">:status&lt;~to_i&gt;:</td><td>The status of the response will be set to opts[:status].to_i

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The options hash that was passed in.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 344</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_handle_options!</span>(<span class="ruby-identifier">opts</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">status</span> = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:status</span>).<span class="ruby-identifier">to_i</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:status</span>]
    <span class="ruby-identifier">headers</span>[<span class="ruby-value str">&quot;Location&quot;</span>] = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:location</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:location</span>]
    <span class="ruby-identifier">opts</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_for" type="Public" category="Instance" id="M000102">
          <parameters>(context, content_type, controller=nil, template=nil, locals=[])</parameters>

          <description><![CDATA[
            <p>
Iterates over the template roots in reverse order, and returns the template
and template location of the first match.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">context&lt;Object&gt;:</td><td>The controller action or template (basename or absolute path).

</td></tr>
<tr><td valign="top">content_type&lt;~to_s&gt;:</td><td>The content type (like html or json).

</td></tr>
<tr><td valign="top">controller&lt;~to_s&gt;:</td><td>The name of the controller. Defaults to nil.

</td></tr>
<tr><td valign="top">locals&lt;Array[Symbol]&gt;:</td><td>A list of locals to assign from the args passed into the compiled template.

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:template&lt;String&gt;:</td><td>The location of the template to use. Defaults to whatever matches this
context, content_type and controller.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol, String]:</td><td>A pair consisting of the template method and location.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 410</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_template_for</span>(<span class="ruby-identifier">context</span>, <span class="ruby-identifier">content_type</span>, <span class="ruby-identifier">controller</span>=<span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">template</span>=<span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">locals</span>=[])
    <span class="ruby-identifier">template_method</span>, <span class="ruby-identifier">template_location</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-keyword kw">nil</span>

    <span class="ruby-comment cmt"># absolute path to a template (:template =&gt; &quot;/foo/bar&quot;)</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">String</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">template</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">%r{^/}</span>
      <span class="ruby-identifier">template_location</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_absolute_template_location</span>(<span class="ruby-identifier">template</span>, <span class="ruby-identifier">content_type</span>)
      <span class="ruby-keyword kw">return</span> [<span class="ruby-identifier">_template_method_for</span>(<span class="ruby-identifier">template_location</span>, <span class="ruby-identifier">locals</span>), <span class="ruby-identifier">template_location</span>]
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">_template_roots</span>.<span class="ruby-identifier">reverse_each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">root</span>, <span class="ruby-identifier">template_meth</span><span class="ruby-operator">|</span>
      <span class="ruby-comment cmt"># :template =&gt; &quot;foo/bar.html&quot; where root / &quot;foo/bar.html.*&quot; exists</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template</span>
        <span class="ruby-identifier">template_location</span> = <span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">template_meth</span>, <span class="ruby-identifier">template</span>, <span class="ruby-identifier">content_type</span>, <span class="ruby-keyword kw">nil</span>)
      <span class="ruby-comment cmt"># :layout =&gt; &quot;foo&quot; where root / &quot;layouts&quot; / &quot;#{controller}.html.*&quot; exists        </span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">template_location</span> = <span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">template_meth</span>, <span class="ruby-identifier">context</span>, <span class="ruby-identifier">content_type</span>, <span class="ruby-identifier">controller</span>)
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-keyword kw">break</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template_method</span> = <span class="ruby-identifier">_template_method_for</span>(<span class="ruby-identifier">template_location</span>.<span class="ruby-identifier">to_s</span>, <span class="ruby-identifier">locals</span>)
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># template_location is a Pathname</span>
    [<span class="ruby-identifier">template_method</span>, <span class="ruby-identifier">template_location</span>.<span class="ruby-identifier">to_s</span>]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_method_for" type="Public" category="Instance" id="M000103">
          <parameters>(template_location, locals)</parameters>

          <description><![CDATA[
            <p>
Returns the template method for a location, and checks to make sure the
current controller actually responds to the method.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">template_location&lt;String&gt;:</td><td>The physical path of the template

</td></tr>
<tr><td valign="top">locals&lt;Array[Symbol]&gt;:</td><td>A list of locals to assign from the args passed into the compiled template.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The method, if it exists. Otherwise return nil.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 446</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_template_method_for</span>(<span class="ruby-identifier">template_location</span>, <span class="ruby-identifier">locals</span>)
    <span class="ruby-identifier">meth</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Template</span>.<span class="ruby-identifier">template_for</span>(<span class="ruby-identifier">template_location</span>, [], <span class="ruby-identifier">locals</span>)
    <span class="ruby-identifier">meth</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">meth</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">meth</span> <span class="ruby-operator">:</span> <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="append_content" type="Public" category="Instance" id="M000107">
          <parameters>(obj, string = nil, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Called in templates to append content for later use. Works like
throw_content.
</p>
<p>
@param [Object] obj
</p>
<pre>
  Key used in the thrown_content hash.
</pre>
<p>
@param [String] string
</p>
<pre>
  Textual content. Default to nil.
</pre>
<p>
@yield
</p>
<pre>
  Evaluated with result concatenated to string.
</pre>
<p>
@raise [ArgumentError]
</p>
<pre>
  Neither string nor block given
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 512</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">append_content</span>(<span class="ruby-identifier">obj</span>, <span class="ruby-identifier">string</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">string</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">block_given?</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-value str">&quot;You must pass a block or a string into append_content&quot;</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-ivar">@_caught_content</span>[<span class="ruby-identifier">obj</span>] = [] <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@_caught_content</span>[<span class="ruby-identifier">obj</span>].<span class="ruby-identifier">nil?</span>
    <span class="ruby-ivar">@_caught_content</span>[<span class="ruby-identifier">obj</span>] <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">string</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-operator">&lt;&lt;</span> (<span class="ruby-identifier">block_given?</span> <span class="ruby-value">? </span><span class="ruby-identifier">capture</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>) <span class="ruby-operator">:</span> <span class="ruby-value str">&quot;&quot;</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="catch_content" type="Public" category="Instance" id="M000104">
          <parameters>(obj = :for_layout)</parameters>

          <description><![CDATA[
            <p>
Called in templates to get at content thrown in another template. The
results of rendering a template are automatically thrown into :for_layout,
so <a href="#M000104">catch_content</a> or <a
href="#M000104">catch_content</a>(:for_layout) can be used inside layouts
to get the content rendered by the action template.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">obj&lt;Object&gt;:</td><td>The key in the thrown_content hash. Defaults to :for_layout.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 460</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">catch_content</span>(<span class="ruby-identifier">obj</span> = <span class="ruby-identifier">:for_layout</span>)
    <span class="ruby-ivar">@_caught_content</span>[<span class="ruby-identifier">obj</span>] <span class="ruby-operator">||</span> <span class="ruby-value str">''</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="clear_content" type="Public" category="Instance" id="M000108">
          <parameters>(obj = :for_layout)</parameters>

          <description><![CDATA[
            <p>
Called when renderers need to be sure that existing thrown content is
cleared before throwing new content. This prevents double rendering of
content when multiple templates are rendered after each other.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">obj&lt;Object&gt;:</td><td>The key in the thrown_content hash. Defaults to :for_layout.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 528</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">clear_content</span>(<span class="ruby-identifier">obj</span> = <span class="ruby-identifier">:for_layout</span>)
    <span class="ruby-ivar">@_caught_content</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">obj</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-ivar">@_caught_content</span>[<span class="ruby-identifier">obj</span>].<span class="ruby-identifier">nil?</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="display" type="Public" category="Instance" id="M000098">
          <parameters>(object, thing = nil, opts = {})</parameters>

          <description><![CDATA[
            <p>
Renders an object using to registered transform method based on the
negotiated content-type, if a template does not exist. For instance, if the
content-type is :json, <a href="#Merb">Merb</a> will first look for
current_action.json.*. Failing that, it will run object.to_json.
</p>
<h4>Parameter</h4>
<table>
<tr><td valign="top">object&lt;Object&gt;:</td><td>An object that responds_to? the transform method registered for the
negotiated mime-type.

</td></tr>
<tr><td valign="top">thing&lt;<a href="#String">String</a>, Symbol&gt;:</td><td>The thing to attempt to render via <a href="#M000097">render</a> before
calling the transform method on the object. Defaults to nil.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>An options hash that will be used for rendering (passed on to <a
href="#M000097">render</a> or serialization methods like to_json or to_xml)

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The rendered template or if no template is found, the transformed object.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">NotAcceptable:</td><td>If there is no transform method for the specified mime-type or the object
does not respond to the transform method.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
A string in the second parameter will be interpreted as a template:
</p>
<pre>
  display @object, &quot;path/to/foo&quot;
  #=&gt; display @object, nil, :template =&gt; &quot;path/to/foo&quot;
</pre>
<p>
A hash in the second parameters will be interpreted as opts:
</p>
<pre>
  display @object, :layout =&gt; &quot;zoo&quot;
  #=&gt; display @object, nil, :layout =&gt; &quot;zoo&quot;
</pre>
<p>
If you need to pass extra parameters to serialization method, for instance,
to exclude some of attributes or serialize associations, just pass options
for it. For instance,
</p>
<p>
display @locations, :except =&gt; [:locatable_type, :locatable_id],
:include =&gt; [:locatable]
</p>
<p>
serializes object with polymorphic association, not raw locatable_*
attributes.
</p>
<h4>Options</h4>
<p>
:template a template to use for rendering :layout a layout to use for
rendering :status the status code to return (defaults to 200) :location the
value of the Location header
</p>
<p>
all other options options that will be pass to serialization method
</p>
<pre>
                         like #to_json or #to_xml
</pre>
<h4>Notes</h4>
<p>
The transformed object will not be used in a layout unless a :layout is
explicitly passed in the opts.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 205</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">display</span>(<span class="ruby-identifier">object</span>, <span class="ruby-identifier">thing</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">opts</span> = {})
    <span class="ruby-identifier">template_opt</span> = <span class="ruby-identifier">thing</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">thing</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:template</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:template</span>)

    <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">thing</span>
    <span class="ruby-comment cmt"># display @object, &quot;path/to/foo&quot; means display @object, nil, :template =&gt; &quot;path/to/foo&quot;</span>
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">String</span>
      <span class="ruby-identifier">template_opt</span>, <span class="ruby-identifier">thing</span> = <span class="ruby-identifier">thing</span>, <span class="ruby-keyword kw">nil</span>
    <span class="ruby-comment cmt"># display @object, :template =&gt; &quot;path/to/foo&quot; means display @object, nil, :template =&gt; &quot;path/to/foo&quot;</span>
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Hash</span>
      <span class="ruby-identifier">opts</span>, <span class="ruby-identifier">thing</span> = <span class="ruby-identifier">thing</span>, <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># Try to render without the object</span>
    <span class="ruby-identifier">render</span>(<span class="ruby-identifier">thing</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">action_name</span>.<span class="ruby-identifier">to_sym</span>, <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:template</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">template_opt</span>))

  <span class="ruby-comment cmt"># If the render fails (i.e. a template was not found)</span>
  <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">TemplateNotFound</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
    <span class="ruby-comment cmt"># Merge with class level default render options</span>
    <span class="ruby-comment cmt"># @todo can we find a way to refactor this out so we don't have to do it everywhere?</span>
    <span class="ruby-identifier">opts</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">default_render_options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">opts</span>)

    <span class="ruby-comment cmt"># Figure out what to transform and raise NotAcceptable unless there's a transform method assigned</span>
    <span class="ruby-identifier">transform</span> = <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">mime_transform_method</span>(<span class="ruby-identifier">content_type</span>)
    <span class="ruby-keyword kw">if</span> <span class="ruby-operator">!</span><span class="ruby-identifier">transform</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotAcceptable</span>, <span class="ruby-node">&quot;#{e.message} and there was no transform method registered for #{content_type.inspect}&quot;</span>
    <span class="ruby-keyword kw">elsif</span> <span class="ruby-operator">!</span><span class="ruby-identifier">object</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">transform</span>)
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotAcceptable</span>, <span class="ruby-node">&quot;#{e.message} and your object does not respond to ##{transform}&quot;</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-identifier">layout_opt</span> = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:layout</span>)
    <span class="ruby-identifier">_handle_options!</span>(<span class="ruby-identifier">opts</span>)
    <span class="ruby-identifier">throw_content</span>(<span class="ruby-identifier">:for_layout</span>, <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-value">? </span><span class="ruby-identifier">object</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">transform</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">object</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">transform</span>, <span class="ruby-identifier">opts</span>))
    
    <span class="ruby-identifier">meth</span>, <span class="ruby-identifier">_</span> = <span class="ruby-identifier">_template_for</span>(<span class="ruby-identifier">layout_opt</span>, <span class="ruby-identifier">layout_opt</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">index</span>(<span class="ruby-value str">&quot;.&quot;</span>) <span class="ruby-operator">?</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">content_type</span>, <span class="ruby-value str">&quot;layout&quot;</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">layout_opt</span>
    <span class="ruby-identifier">meth</span> <span class="ruby-value">? </span><span class="ruby-identifier">send</span>(<span class="ruby-identifier">meth</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">catch_content</span>(<span class="ruby-identifier">:for_layout</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="partial" type="Public" category="Instance" id="M000099">
          <parameters>(template, opts={})</parameters>

          <description><![CDATA[
            <p>
Renders a partial template.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">template&lt;~to_s&gt;:</td><td>The path to the template, relative to the current controller or the
template root; absolute path will work too. If the template contains a
&quot;/&quot;, <a href="#Merb">Merb</a> will search for it relative to the
template root; otherwise, <a href="#Merb">Merb</a> will search for it
relative to the current controller.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>A hash of options (see below)

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:with&lt;<a href="#Object">Object</a>, Array&gt;:</td><td>An object or an array of objects that will be passed into the partial.

</td></tr>
<tr><td valign="top">:as&lt;~to_sym&gt;:</td><td>The local name of the :with <a href="#Object">Object</a> inside of the
partial.

</td></tr>
<tr><td valign="top">:format&lt;Symbol&gt;:</td><td>The mime format that you want the partial to be in (:js, :html, etc.)

</td></tr>
<tr><td valign="top">others:</td><td>A <a href="#Hash">Hash</a> object names and values that will be the local
names and values inside the partial.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  partial :foo, :hello =&gt; @object
</pre>
<p>
The &quot;_foo&quot; partial will be called, relative to the current
controller, with a local variable of <tt>hello</tt> inside of it, assigned
to @object.
</p>
<pre>
  partial :bar, :with =&gt; ['one', 'two', 'three']
</pre>
<p>
The &quot;_bar&quot; partial will be called once for each element of the
array specified by :with for a total of three iterations. Each element of
the array will be available in the partial via a local variable named
<tt>bar</tt>. Additionally, there will be two extra local variables:
<tt>collection_index</tt> and <tt>collection_size</tt>.
<tt>collection_index</tt> is the index of the object currently referenced
by <tt>bar</tt> in the collection passed to the partial.
<tt>collection_size</tt> is the total size of the collection.
</p>
<p>
By default, the object specified by :with will be available through a local
variable with the same name as the partial template. However, this can be
changed using the :as option.
</p>
<pre>
  partial :bar, :with =&gt; &quot;one&quot;, :as =&gt; :number
</pre>
<p>
In this case, &quot;one&quot; will be available in the partial through the
local variable named <tt>number</tt>.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 287</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">partial</span>(<span class="ruby-identifier">template</span>, <span class="ruby-identifier">opts</span>={})

    <span class="ruby-comment cmt"># partial :foo becomes &quot;#{controller_name}/_foo&quot;</span>
    <span class="ruby-comment cmt"># partial &quot;foo/bar&quot; becomes &quot;foo/_bar&quot;</span>
    <span class="ruby-identifier">template</span> = <span class="ruby-identifier">template</span>.<span class="ruby-identifier">to_s</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">%r{^/}</span>
      <span class="ruby-identifier">template_path</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">dirname</span>(<span class="ruby-identifier">template</span>) <span class="ruby-operator">/</span> <span class="ruby-node">&quot;_#{File.basename(template)}&quot;</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">kontroller</span> = (<span class="ruby-identifier">m</span> = <span class="ruby-identifier">template</span>.<span class="ruby-identifier">match</span>(<span class="ruby-regexp re">/.*(?=\/)/</span>)) <span class="ruby-operator">?</span> <span class="ruby-identifier">m</span>[<span class="ruby-value">0</span>] <span class="ruby-operator">:</span> <span class="ruby-identifier">controller_name</span>
      <span class="ruby-identifier">template</span> = <span class="ruby-node">&quot;_#{File.basename(template)}&quot;</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># This handles no :with as well</span>
    <span class="ruby-identifier">with</span> = [<span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:with</span>)].<span class="ruby-identifier">flatten</span>
    <span class="ruby-identifier">as</span> = (<span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:as</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">template</span>.<span class="ruby-identifier">match</span>(<span class="ruby-regexp re">%r[(?:.*/)?_([^\./]*)]</span>)[<span class="ruby-value">1</span>]).<span class="ruby-identifier">to_sym</span>

    <span class="ruby-comment cmt"># Ensure that as is in the locals hash even if it isn't passed in here</span>
    <span class="ruby-comment cmt"># so that it's included in the preamble. </span>
    <span class="ruby-identifier">locals</span> = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:collection_index</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value">-1</span>, <span class="ruby-identifier">:collection_size</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">with</span>.<span class="ruby-identifier">size</span>, <span class="ruby-identifier">as</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">as</span>])
    <span class="ruby-identifier">template_method</span>, <span class="ruby-identifier">template_location</span> = <span class="ruby-identifier">_template_for</span>(
      <span class="ruby-identifier">template</span>, 
      <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:format</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">content_type</span>, 
      <span class="ruby-identifier">kontroller</span>, 
      <span class="ruby-identifier">template_path</span>, 
      <span class="ruby-identifier">locals</span>.<span class="ruby-identifier">keys</span>)
    
    <span class="ruby-comment cmt"># this handles an edge-case where the name of the partial is _foo.* and your opts</span>
    <span class="ruby-comment cmt"># have :foo as a key.</span>
    <span class="ruby-identifier">named_local</span> = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">as</span>)
    
    <span class="ruby-identifier">sent_template</span> = <span class="ruby-identifier">with</span>.<span class="ruby-identifier">map</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">temp</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">locals</span>[<span class="ruby-identifier">as</span>] = <span class="ruby-identifier">temp</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">named_local</span>

      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">template_method</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">template_method</span>)
        <span class="ruby-identifier">locals</span>[<span class="ruby-identifier">:collection_index</span>] <span class="ruby-operator">+=</span> <span class="ruby-value">1</span>
        <span class="ruby-identifier">send</span>(<span class="ruby-identifier">template_method</span>, <span class="ruby-identifier">locals</span>)
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">TemplateNotFound</span>, <span class="ruby-node">&quot;Could not find template at #{template_location}.*&quot;</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>.<span class="ruby-identifier">join</span>
    
    <span class="ruby-identifier">sent_template</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="render" type="Public" category="Instance" id="M000097">
          <parameters>(thing = nil, opts = {})</parameters>

          <description><![CDATA[
            <p>
Renders the specified item, with the specified options.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">thing&lt;<a href="#String">String</a>, Symbol, nil&gt;:</td><td>The thing to render. This will default to the current action

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>An options hash (see below)

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:format&lt;Symbol&gt;:</td><td>A registered mime-type format

</td></tr>
<tr><td valign="top">:template&lt;String&gt;:</td><td>The path to the template relative to the template root

</td></tr>
<tr><td valign="top">:status&lt;~to_i&gt;:</td><td>The status to send to the client. Typically, this would be an integer
(200), or a <a href="#Merb">Merb</a> status code (Accepted)

</td></tr>
<tr><td valign="top">:layout&lt;~to_s, FalseClass&gt;:</td><td>A layout to use instead of the default. This should be relative to the
layout root. By default, the layout will be either the controller_name or
application. If you want to use an alternative content-type than the one
that the base template was rendered as, you will need to do :layout =&gt;
&quot;foo.#{content_type}&quot; (i.e. &quot;foo.json&quot;). If you want to
render without layout, use :layout =&gt; false. This overrides layout set
by <tt>layout</tt> method.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The rendered template, including layout, if appropriate.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">TemplateNotFound:</td><td>There is no template for the specified location.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If you pass a <a href="#Hash">Hash</a> as the first parameter, it will be
moved to opts and &quot;thing&quot; will be the current action
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 100</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">render</span>(<span class="ruby-identifier">thing</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">opts</span> = {})
    <span class="ruby-comment cmt"># render :format =&gt; :xml means render nil, :format =&gt; :xml</span>
    <span class="ruby-identifier">opts</span>, <span class="ruby-identifier">thing</span> = <span class="ruby-identifier">thing</span>, <span class="ruby-keyword kw">nil</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">thing</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>)

    <span class="ruby-comment cmt"># Merge with class level default render options</span>
    <span class="ruby-identifier">opts</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">default_render_options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">opts</span>)

    <span class="ruby-comment cmt"># If you don't specify a thing to render, assume they want to render the current action</span>
    <span class="ruby-identifier">thing</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">action_name</span>.<span class="ruby-identifier">to_sym</span>

    <span class="ruby-comment cmt"># Content negotiation</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">content_type</span> = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:format</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:format</span>]

    <span class="ruby-comment cmt"># Handle options (:status)</span>
    <span class="ruby-identifier">_handle_options!</span>(<span class="ruby-identifier">opts</span>)

    <span class="ruby-comment cmt"># Do we have a template to try to render?</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">thing</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Symbol</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:template</span>]

      <span class="ruby-identifier">template_method</span>, <span class="ruby-identifier">template_location</span> = 
        <span class="ruby-identifier">_template_for</span>(<span class="ruby-identifier">thing</span>, <span class="ruby-identifier">content_type</span>, <span class="ruby-identifier">controller_name</span>, <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:template</span>])

      <span class="ruby-comment cmt"># Raise an error if there's no template</span>
      <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">template_method</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">template_method</span>)
        <span class="ruby-identifier">template_files</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Template</span>.<span class="ruby-identifier">template_extensions</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">ext</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;#{template_location}.#{ext}&quot;</span> }
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">TemplateNotFound</span>, <span class="ruby-node">&quot;Oops! No template found. Merb was looking for #{template_files.join(', ')}&quot;</span> <span class="ruby-operator">+</span> 
          <span class="ruby-node">&quot;for content type '#{content_type}'. You might have mispelled the template or file name. &quot;</span> <span class="ruby-operator">+</span> 
          <span class="ruby-node">&quot;Registered template extensions: #{Merb::Template.template_extensions.join(', ')}. &quot;</span> <span class="ruby-operator">+</span>
          <span class="ruby-value str">&quot;If you use Haml or some other template plugin, make sure you required Merb plugin dependency &quot;</span> <span class="ruby-operator">+</span> 
          <span class="ruby-value str">&quot;in your init file.&quot;</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-comment cmt"># Call the method in question and throw the content for later consumption by the layout</span>
      <span class="ruby-identifier">throw_content</span>(<span class="ruby-identifier">:for_layout</span>, <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">template_method</span>))

    <span class="ruby-comment cmt"># Do we have a string to render?</span>
    <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">thing</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">String</span>)

      <span class="ruby-comment cmt"># Throw it for later consumption by the layout</span>
      <span class="ruby-identifier">throw_content</span>(<span class="ruby-identifier">:for_layout</span>, <span class="ruby-identifier">thing</span>)
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># If we find a layout, use it. Otherwise, just render the content thrown for layout.</span>
    (<span class="ruby-identifier">layout</span> = <span class="ruby-identifier">_get_layout</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:layout</span>])) <span class="ruby-operator">?</span> <span class="ruby-identifier">send</span>(<span class="ruby-identifier">layout</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">catch_content</span>(<span class="ruby-identifier">:for_layout</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="throw_content" type="Public" category="Instance" id="M000106">
          <parameters>(obj, string = nil, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Called in templates to store up content for later use. Takes a string
and/or a block. First, the string is evaluated, and then the block is
captured using the capture() helper provided by the template languages. The
two are concatenated together.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">obj&lt;Object&gt;:</td><td>The key in the thrown_content hash.

</td></tr>
<tr><td valign="top">string&lt;String&gt;:</td><td>Textual content. Defaults to nil.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>A block to be evaluated and concatenated to string.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>Neither string nor block given.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  throw_content(:foo, &quot;Foo&quot;)
  catch_content(:foo) #=&gt; &quot;Foo&quot;
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 492</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">throw_content</span>(<span class="ruby-identifier">obj</span>, <span class="ruby-identifier">string</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">string</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">block_given?</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-value str">&quot;You must pass a block or a string into throw_content&quot;</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-ivar">@_caught_content</span>[<span class="ruby-identifier">obj</span>] = <span class="ruby-identifier">string</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-operator">&lt;&lt;</span> (<span class="ruby-identifier">block_given?</span> <span class="ruby-value">? </span><span class="ruby-identifier">capture</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>) <span class="ruby-operator">:</span> <span class="ruby-value str">&quot;&quot;</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="thrown_content?" type="Public" category="Instance" id="M000105">
          <parameters>(obj = :for_layout)</parameters>

          <description><![CDATA[
            <p>
Called in templates to test for the existence of previously thrown content.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">obj&lt;Object&gt;:</td><td>The key in the thrown_content hash. Defaults to :for_layout.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 470</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">thrown_content?</span>(<span class="ruby-identifier">obj</span> = <span class="ruby-identifier">:for_layout</span>)
    <span class="ruby-ivar">@_caught_content</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">obj</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::ControllerExceptions"

                         href="Merb::ControllerExceptions"

        />

      </included-module-list>

    </contents>

  </Module>

  <Module name="Merb::RenderMixin::ClassMethods" id="Merb::RenderMixin::ClassMethods">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37render.rb">lib/merb-core/controller/mixins/render.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="default_layout" type="Public" category="Instance" id="M000112">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Enables the default layout logic - resets the layout option.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">~to_s:</td><td>The layout that was previously set.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 61</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default_layout</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">default_render_options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:layout</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="default_render_options" type="Public" category="Instance" id="M000109">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the default render options.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>An options hash

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 24</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default_render_options</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_default_render_options</span> <span class="ruby-operator">||=</span> {}
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="layout" type="Public" category="Instance" id="M000111">
          <parameters>(layout)</parameters>

          <description><![CDATA[
            <p>
Sets the default layout to use or nil/false to disable layout rendering.
This is a shortcut for <a href="#M000110">render_options</a> :layout =&gt;
false.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">layout&lt;~to_s&gt;:</td><td>The layout that should be used for this class.

</td></tr>
</table>
<h4>Notes</h4>
<p>
You can override by passing :layout =&gt; true to render method.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The default render options.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 51</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">layout</span>(<span class="ruby-identifier">layout</span>)
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">default_render_options</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">:layout</span> =<span class="ruby-operator">&gt;</span> (<span class="ruby-identifier">layout</span> <span class="ruby-operator">||</span> <span class="ruby-keyword kw">false</span>))
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="render_options" type="Public" category="Instance" id="M000110">
          <parameters>(opts)</parameters>

          <description><![CDATA[
            <p>
Sets default render options at the class level.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>An options hash

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/render.rb, line 34</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">render_options</span>(<span class="ruby-identifier">opts</span>)
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_default_render_options</span> = <span class="ruby-identifier">opts</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::RakeHelper" id="Merb::RakeHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37tasks37merb_rake_helper.rb">lib/merb-core/tasks/merb_rake_helper.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="install" type="Public" category="Class" id="M000113">
          <parameters>(name, options = {})</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/merb_rake_helper.rb, line 8</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">install</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">options</span> = {})
      <span class="ruby-identifier">defaults</span> = { <span class="ruby-identifier">:cache</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span> }
      <span class="ruby-identifier">defaults</span>[<span class="ruby-identifier">:install_dir</span>] = <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'GEM_DIR'</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'GEM_DIR'</span>]
      <span class="ruby-identifier">opts</span> = <span class="ruby-identifier">defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">options</span>)
      <span class="ruby-identifier">dir</span> = <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">directory?</span>(<span class="ruby-identifier">subdir</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-constant">Dir</span>.<span class="ruby-identifier">pwd</span>, <span class="ruby-identifier">name</span>))
        <span class="ruby-identifier">subdir</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">pwd</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">install_gem_from_source</span>(<span class="ruby-identifier">dir</span>, <span class="ruby-identifier">name</span>, <span class="ruby-identifier">opts</span>)
      <span class="ruby-identifier">ensure_wrapper</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:install_dir</span>] <span class="ruby-operator">||</span> <span class="ruby-constant">Gem</span>.<span class="ruby-identifier">default_dir</span>, <span class="ruby-identifier">name</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="install_package" type="Public" category="Class" id="M000114">
          <parameters>(pkg, options = {})</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/merb_rake_helper.rb, line 21</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">install_package</span>(<span class="ruby-identifier">pkg</span>, <span class="ruby-identifier">options</span> = {})
      <span class="ruby-identifier">defaults</span> = { <span class="ruby-identifier">:cache</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span> }
      <span class="ruby-identifier">defaults</span>[<span class="ruby-identifier">:install_dir</span>] = <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'GEM_DIR'</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'GEM_DIR'</span>]
      <span class="ruby-identifier">opts</span> = <span class="ruby-identifier">defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">options</span>)
      <span class="ruby-comment cmt"># Needs to be executed from the directory that contains all packages</span>
      <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">chdir</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">dirname</span>(<span class="ruby-identifier">pkg_file</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">pkg</span>))) <span class="ruby-keyword kw">do</span> 
        <span class="ruby-identifier">install_gem</span>(<span class="ruby-identifier">pkg_file</span>, <span class="ruby-identifier">opts</span>)
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">name</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">pkg</span>, <span class="ruby-value str">'.gem'</span>)[<span class="ruby-regexp re">/^(.*?)-([\d\.]+)$/</span>, <span class="ruby-value">1</span>]
      <span class="ruby-identifier">ensure_wrapper</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:install_dir</span>] <span class="ruby-operator">||</span> <span class="ruby-constant">Gem</span>.<span class="ruby-identifier">default_dir</span>, <span class="ruby-identifier">name</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="sudo" type="Public" category="Class" id="M000116">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/merb_rake_helper.rb, line 39</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">sudo</span>
      <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'MERB_SUDO'</span>] <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;sudo&quot;</span>
      <span class="ruby-identifier">sudo</span> = <span class="ruby-identifier">windows?</span> <span class="ruby-value">? </span><span class="ruby-value str">&quot;&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'MERB_SUDO'</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="uninstall" type="Public" category="Class" id="M000115">
          <parameters>(name, options = {})</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/merb_rake_helper.rb, line 33</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">uninstall</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">options</span> = {})
      <span class="ruby-identifier">defaults</span> = { <span class="ruby-identifier">:ignore</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>, <span class="ruby-identifier">:executables</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span> }
      <span class="ruby-identifier">defaults</span>[<span class="ruby-identifier">:install_dir</span>] = <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'GEM_DIR'</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'GEM_DIR'</span>]
      <span class="ruby-identifier">uninstall_gem</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">options</span>))
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="windows?" type="Public" category="Class" id="M000117">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/merb_rake_helper.rb, line 44</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">windows?</span>
      (<span class="ruby-constant">PLATFORM</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/win32|cygwin/</span>) <span class="ruby-keyword kw">rescue</span> <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Protected" category="Class">


        <method name="ensure_wrapper" type="Protected" category="Class" id="M000118">
          <parameters>(gemdir, name)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/merb_rake_helper.rb, line 50</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">ensure_wrapper</span>(<span class="ruby-identifier">gemdir</span>, <span class="ruby-identifier">name</span>)
      <span class="ruby-comment cmt"># See if there's a local bin dir - one directory up from ./gems</span>
      <span class="ruby-identifier">bindir</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-identifier">gemdir</span>, <span class="ruby-value str">'..'</span>, <span class="ruby-value str">'bin'</span>))
      <span class="ruby-comment cmt"># Fall back to system wide bindir - usually needs sudo permissions</span>
      <span class="ruby-identifier">bindir</span> = <span class="ruby-constant">Gem</span>.<span class="ruby-identifier">bindir</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">directory?</span>(<span class="ruby-identifier">bindir</span>)
      <span class="ruby-identifier">ensure_bin_wrapper_for</span>(<span class="ruby-identifier">gemdir</span>, <span class="ruby-identifier">bindir</span>, <span class="ruby-identifier">name</span>, <span class="ruby-identifier">:no_minigems</span> =<span class="ruby-operator">&gt;</span> [<span class="ruby-value str">'merb-gen'</span>])
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Rack" id="Merb::Rack">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37abstract.rb">lib/merb-core/rack/adapter/abstract.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37ebb.rb">lib/merb-core/rack/adapter/ebb.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37evented_mongrel.rb">lib/merb-core/rack/adapter/evented_mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37fcgi.rb">lib/merb-core/rack/adapter/fcgi.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37irb.rb">lib/merb-core/rack/adapter/irb.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37mongrel.rb">lib/merb-core/rack/adapter/mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37runner.rb">lib/merb-core/rack/adapter/runner.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37swiftiplied_mongrel.rb">lib/merb-core/rack/adapter/swiftiplied_mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37thin.rb">lib/merb-core/rack/adapter/thin.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37thin_turbo.rb">lib/merb-core/rack/adapter/thin_turbo.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter37webrick.rb">lib/merb-core/rack/adapter/webrick.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37adapter.rb">lib/merb-core/rack/adapter.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37application.rb">lib/merb-core/rack/application.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37handler37mongrel.rb">lib/merb-core/rack/handler/mongrel.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37helpers.rb">lib/merb-core/rack/helpers.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37conditional_get.rb">lib/merb-core/rack/middleware/conditional_get.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37content_length.rb">lib/merb-core/rack/middleware/content_length.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37path_prefix.rb">lib/merb-core/rack/middleware/path_prefix.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37profiler.rb">lib/merb-core/rack/middleware/profiler.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37static.rb">lib/merb-core/rack/middleware/static.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware37tracer.rb">lib/merb-core/rack/middleware/tracer.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37middleware.rb">lib/merb-core/rack/middleware.rb</a></infile>

        <infile><a href="#lib37merb-core37rack37stream_wrapper.rb">lib/merb-core/rack/stream_wrapper.rb</a></infile>

        <infile><a href="#lib37merb-core37rack.rb">lib/merb-core/rack.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Merb::Rack::Helpers" id="Merb::Rack::Helpers">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37helpers.rb">lib/merb-core/rack/helpers.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="redirect" type="Public" category="Class" id="M000119">
          <parameters>(url, options = {})</parameters>

          <description><![CDATA[
            <p>
A helper to build a rack response which implements a redirect. The status
will be set to the passed in status if passed. If you pass in permanent it
will be a 301, permanent redirect, otherwise it defaults to a temporary 302
redirect.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">url&lt;~to_s&gt;:</td><td>The url to redirect to.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>A hash of options for the redirect

</td></tr>
</table>
<pre>
  status: The status code to use for the redirect
  permanent:  True if this is a permanent redirect (301)
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">&lt;Array&gt;:</td><td>A rack response to redirect to the specified url.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/helpers.rb, line 19</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">redirect</span>(<span class="ruby-identifier">url</span>, <span class="ruby-identifier">options</span> = {})
        <span class="ruby-comment cmt"># Build the rack array</span>
        <span class="ruby-identifier">status</span>   = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:status</span>)
        <span class="ruby-identifier">status</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:permanent</span>] <span class="ruby-operator">?</span> <span class="ruby-value">301</span> <span class="ruby-operator">:</span> <span class="ruby-value">302</span>
        
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span>(<span class="ruby-node">&quot;Dispatcher redirecting to: #{url} (#{status})&quot;</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">flush</span>
        
        [<span class="ruby-identifier">status</span>, { <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">LOCATION</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">url</span> },
         <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">StreamWrapper</span>.<span class="ruby-identifier">new</span>(<span class="ruby-node">&quot;&lt;html&gt;&lt;body&gt;You are being &lt;a href=\&quot;#{url}\&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;</span>)]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Rack::Handler" id="Merb::Rack::Handler">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37handler37mongrel.rb">lib/merb-core/rack/handler/mongrel.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Class name="Merb::Rack::Handler::Mongrel" id="Merb::Rack::Handler::Mongrel">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37handler37mongrel.rb">lib/merb-core/rack/handler/mongrel.rb</a></infile>

      </infiles>


     <superclass>::Mongrel::HttpHandler</superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000122">
          <parameters>(app)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">app&lt;Merb::Rack::Application&gt;:</td><td>The app that <a href="#Merb::Rack::Handler::Mongrel">Mongrel</a> should
handle.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/handler/mongrel.rb, line 53</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">app</span>)
          <span class="ruby-ivar">@app</span> = <span class="ruby-identifier">app</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000120">
          <parameters>(app, options={}) {|@server if block_given?| ...}</parameters>

          <description><![CDATA[
            <p>
Runs the server and yields it to a block.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">app&lt;Merb::Rack::Application&gt;:</td><td>The app that <a href="#Merb::Rack::Handler::Mongrel">Mongrel</a> should
handle.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Options to pass to <a href="#Merb::Rack::Handler::Mongrel">Mongrel</a> (see
below).

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">server&lt;Mongrel::HttpServer&gt;:</td><td>The server to run.

</td></tr>
</table>
<h4>Options (options)</h4>
<table>
<tr><td valign="top">:Host&lt;String&gt;:</td><td>The hostname on which the app should run. Defaults to &quot;0.0.0.0&quot;

</td></tr>
<tr><td valign="top">:Port&lt;Fixnum&gt;:</td><td>The port for the app. Defaults to 8080.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/handler/mongrel.rb, line 36</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>(<span class="ruby-identifier">app</span>, <span class="ruby-identifier">options</span>={})
          <span class="ruby-ivar">@server</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Mongrel</span><span class="ruby-operator">::</span><span class="ruby-constant">HttpServer</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">options</span>[<span class="ruby-identifier">:Host</span>] <span class="ruby-operator">||</span> <span class="ruby-value str">'0.0.0.0'</span>,
                                             <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:Port</span>] <span class="ruby-operator">||</span> <span class="ruby-value">8080</span>)
          <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">register</span>(<span class="ruby-value str">'/'</span>, <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Handler</span><span class="ruby-operator">::</span><span class="ruby-constant">Mongrel</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">app</span>))
          <span class="ruby-keyword kw">yield</span> <span class="ruby-ivar">@server</span>  <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
          <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">run</span>.<span class="ruby-identifier">join</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stop" type="Public" category="Class" id="M000121">
          <parameters>(block = true)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/handler/mongrel.rb, line 45</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-identifier">block</span> = <span class="ruby-keyword kw">true</span>)
          <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">stop</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="process" type="Public" category="Instance" id="M000123">
          <parameters>(request, response)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The HTTP request to handle.

</td></tr>
<tr><td valign="top">response&lt;HTTPResponse&gt;:</td><td>The response object to write response to.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/handler/mongrel.rb, line 62</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">process</span>(<span class="ruby-identifier">request</span>, <span class="ruby-identifier">response</span>)
          <span class="ruby-identifier">env</span> = {}.<span class="ruby-identifier">replace</span>(<span class="ruby-identifier">request</span>.<span class="ruby-identifier">params</span>)
          <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_CONTENT_TYPE</span>
          <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_CONTENT_LENGTH</span>
  
          <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SCRIPT_NAME</span>] = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SCRIPT_NAME</span>] <span class="ruby-operator">==</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span>
  
          <span class="ruby-identifier">env</span>.<span class="ruby-identifier">update</span>({<span class="ruby-value str">&quot;rack.version&quot;</span> =<span class="ruby-operator">&gt;</span> [<span class="ruby-value">0</span>,<span class="ruby-value">1</span>],
                       <span class="ruby-value str">&quot;rack.input&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">request</span>.<span class="ruby-identifier">body</span> <span class="ruby-operator">||</span> <span class="ruby-constant">StringIO</span>.<span class="ruby-identifier">new</span>(<span class="ruby-value str">&quot;&quot;</span>),
                       <span class="ruby-value str">&quot;rack.errors&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">STDERR</span>,
  
                       <span class="ruby-value str">&quot;rack.multithread&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>,
                       <span class="ruby-value str">&quot;rack.multiprocess&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>, <span class="ruby-comment cmt"># ???</span>
                       <span class="ruby-value str">&quot;rack.run_once&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>,
  
                       <span class="ruby-value str">&quot;rack.url_scheme&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;http&quot;</span>
                     })
          <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">QUERY_STRING</span>] <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;&quot;</span>
          <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>  <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>] <span class="ruby-operator">==</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span>
  
          <span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span> = <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
  
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-identifier">response</span>.<span class="ruby-identifier">status</span> = <span class="ruby-identifier">status</span>.<span class="ruby-identifier">to_i</span>
            <span class="ruby-identifier">headers</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>, <span class="ruby-identifier">vs</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">vs</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">v</span><span class="ruby-operator">|</span>
                <span class="ruby-identifier">response</span>.<span class="ruby-identifier">header</span>[<span class="ruby-identifier">k</span>] = <span class="ruby-identifier">v</span>
              }
            }
            
            <span class="ruby-identifier">body</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">part</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">response</span>.<span class="ruby-identifier">body</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">part</span>
            }
            <span class="ruby-identifier">response</span>.<span class="ruby-identifier">finished</span>
          <span class="ruby-keyword kw">ensure</span>
            <span class="ruby-identifier">body</span>.<span class="ruby-identifier">close</span>  <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">body</span>.<span class="ruby-identifier">respond_to?</span> <span class="ruby-identifier">:close</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::PathPrefix" id="Merb::Rack::PathPrefix">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware37path_prefix.rb">lib/merb-core/rack/middleware/path_prefix.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Middleware">Merb::Rack::Middleware</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000124">
          <parameters>(app, path_prefix = nil)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/path_prefix.rb, line 6</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">app</span>, <span class="ruby-identifier">path_prefix</span> = <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-keyword kw">super</span>(<span class="ruby-identifier">app</span>)
        <span class="ruby-ivar">@path_prefix</span> = <span class="ruby-node">/^#{Regexp.escape(path_prefix)}/</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000126">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/path_prefix.rb, line 18</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-identifier">strip_path_prefix</span>(<span class="ruby-identifier">env</span>) 
        <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="deferred?" type="Public" category="Instance" id="M000125">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/path_prefix.rb, line 12</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">deferred?</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-identifier">strip_path_prefix</span>(<span class="ruby-identifier">env</span>) 
        <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">deferred?</span>(<span class="ruby-identifier">env</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="strip_path_prefix" type="Public" category="Instance" id="M000127">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/path_prefix.rb, line 24</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">strip_path_prefix</span>(<span class="ruby-identifier">env</span>)
        [<span class="ruby-value str">'PATH_INFO'</span>, <span class="ruby-value str">'REQUEST_URI'</span>].<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">path_key</span><span class="ruby-operator">|</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>[<span class="ruby-identifier">path_key</span>] <span class="ruby-operator">=~</span> <span class="ruby-ivar">@path_prefix</span>
            <span class="ruby-identifier">env</span>[<span class="ruby-identifier">path_key</span>].<span class="ruby-identifier">sub!</span>(<span class="ruby-ivar">@path_prefix</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span>)
            <span class="ruby-identifier">env</span>[<span class="ruby-identifier">path_key</span>] = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>[<span class="ruby-identifier">path_key</span>].<span class="ruby-identifier">empty?</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Tracer" id="Merb::Rack::Tracer">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware37tracer.rb">lib/merb-core/rack/middleware/tracer.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Middleware">Merb::Rack::Middleware</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000128">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/tracer.rb, line 6</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-value str">&quot;Rack environment:\n&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">env</span>.<span class="ruby-identifier">inspect</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;\n\n&quot;</span>)

        <span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span> = <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-node">&quot;Status: #{status.inspect}&quot;</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-node">&quot;Headers: #{headers.inspect}&quot;</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-node">&quot;Body: #{body.inspect}&quot;</span>)

        [<span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::ContentLength" id="Merb::Rack::ContentLength">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware37content_length.rb">lib/merb-core/rack/middleware/content_length.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Middleware">Merb::Rack::Middleware</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000129">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/content_length.rb, line 7</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span> = <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)

        <span class="ruby-comment cmt"># to_s is because Rack spec expects header</span>
        <span class="ruby-comment cmt"># values to be iterable and yield strings</span>
        <span class="ruby-identifier">header</span> = <span class="ruby-value str">'Content-Length'</span>.<span class="ruby-identifier">freeze</span>
        <span class="ruby-identifier">headers</span>[<span class="ruby-identifier">header</span>] = <span class="ruby-identifier">body</span>.<span class="ruby-identifier">size</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">headers</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">header</span>)

        [<span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::FastCGI" id="Merb::Rack::FastCGI">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37fcgi.rb">lib/merb-core/rack/adapter/fcgi.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="start" type="Public" category="Class" id="M000130">
          <parameters>(opts={})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Options for <a href="#Merb::Rack::FastCGI">FastCGI</a> (see below).

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:app&lt;String&gt;&gt;:</td><td>The application name.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/fcgi.rb, line 12</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start</span>(<span class="ruby-identifier">opts</span>={})
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-value str">&quot;Using FastCGI adapter&quot;</span>)
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">change_privilege</span>
        <span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Handler</span><span class="ruby-operator">::</span><span class="ruby-constant">FastCGI</span>.<span class="ruby-identifier">run</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:app</span>], <span class="ruby-identifier">opts</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Thin" id="Merb::Rack::Thin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37thin.rb">lib/merb-core/rack/adapter/thin.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::AbstractAdapter">Merb::Rack::AbstractAdapter</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000131">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/thin.rb, line 11</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">use_mutex</span> = <span class="ruby-keyword kw">false</span>
        
        <span class="ruby-keyword kw">if</span> (<span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:socket</span>] <span class="ruby-operator">||</span> <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:socket_file</span>])
          <span class="ruby-identifier">socket</span> = <span class="ruby-identifier">port</span>.<span class="ruby-identifier">to_s</span>
          <span class="ruby-identifier">socket_file</span> = <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:socket_file</span>] <span class="ruby-operator">||</span> <span class="ruby-node">&quot;#{Merb.log_path}/#{Merb::Config[:name]}.#{socket}.sock&quot;</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;Using Thin adapter with socket file #{socket_file}.&quot;</span>)
          <span class="ruby-ivar">@server</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Thin</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">socket_file</span>, <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:app</span>], <span class="ruby-ivar">@opts</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;Using Thin adapter on host #{@opts[:host]} and port #{port}.&quot;</span>)
          <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:host</span>] = <span class="ruby-node">&quot;#{@opts[:host]}-#{port}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:host</span>].<span class="ruby-identifier">include?</span>(<span class="ruby-value str">'/'</span>)
          <span class="ruby-ivar">@server</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Thin</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:host</span>], <span class="ruby-identifier">port</span>, <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:app</span>], <span class="ruby-ivar">@opts</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_server" type="Public" category="Class" id="M000132">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/thin.rb, line 27</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start_server</span>
        <span class="ruby-operator">::</span><span class="ruby-constant">Thin</span><span class="ruby-operator">::</span><span class="ruby-constant">Logging</span>.<span class="ruby-identifier">silent</span> = <span class="ruby-keyword kw">true</span>
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">start</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stop" type="Public" category="Class" id="M000133">
          <parameters>(status = 0)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/thin.rb, line 33</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@server</span>
          <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">stop</span>
          <span class="ruby-keyword kw">true</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Irb" id="Merb::Rack::Irb">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37irb.rb">lib/merb-core/rack/adapter/irb.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="start" type="Public" category="Class" id="M000134">
          <parameters>(opts={})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<p>
opts&lt;Hash&gt;:
</p>
<pre>
  Options for IRB. Currently this is not used by the IRB adapter.
</pre>
<h4>Notes</h4>
<p>
If the <tt>.irbrc</tt> file exists, it will be loaded into the IRBRC
environment variable.
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 149</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start</span>(<span class="ruby-identifier">opts</span>={})
        <span class="ruby-identifier">m</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Console</span>.<span class="ruby-identifier">new</span>
        <span class="ruby-identifier">m</span>.<span class="ruby-identifier">extend</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Test</span><span class="ruby-operator">::</span><span class="ruby-constant">RequestHelper</span>
        <span class="ruby-constant">Object</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:define_method</span>, <span class="ruby-identifier">:merb</span>) { <span class="ruby-identifier">m</span> }
        <span class="ruby-constant">ARGV</span>.<span class="ruby-identifier">clear</span> <span class="ruby-comment cmt"># Avoid passing args to IRB</span>
        <span class="ruby-identifier">m</span>.<span class="ruby-identifier">open_sandbox!</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">sandboxed?</span>
        <span class="ruby-identifier">require</span> <span class="ruby-value str">'irb'</span>
        <span class="ruby-identifier">require</span> <span class="ruby-value str">'irb/completion'</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span> <span class="ruby-value str">&quot;.irbrc&quot;</span>
          <span class="ruby-constant">ENV</span>[<span class="ruby-value str">'IRBRC'</span>] = <span class="ruby-value str">&quot;.irbrc&quot;</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">IRB</span>.<span class="ruby-identifier">start</span>
        <span class="ruby-identifier">at_exit</span> <span class="ruby-keyword kw">do</span> <span class="ruby-identifier">merb</span>.<span class="ruby-identifier">close_sandbox!</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">sandboxed?</span> <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">exit</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Adapter" id="Merb::Rack::Adapter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter.rb">lib/merb-core/rack/adapter.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="get" type="Public" category="Class" id="M000135">
          <parameters>(id)</parameters>

          <description><![CDATA[
            <p>
Gets a rack adapter by id.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">id&lt;String&gt;:</td><td>The identifier of the <a href="#Merb::Rack">Rack</a> adapter class to
retrieve.

</td></tr>
</table>
<h4>Returns.</h4>
<table>
<tr><td valign="top">Class:</td><td>The adapter class.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter.rb, line 17</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">get</span>(<span class="ruby-identifier">id</span>)
          <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@adapters</span>[<span class="ruby-identifier">id</span>.<span class="ruby-identifier">to_s</span>]
            <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-ivar">@adapters</span>[<span class="ruby-identifier">id</span>.<span class="ruby-identifier">to_s</span>])
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;The adapter #{id} did not exist&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="register" type="Public" category="Class" id="M000136">
          <parameters>(ids, adapter_class)</parameters>

          <description><![CDATA[
            <p>
Registers a new <a href="#Merb::Rack">Rack</a> adapter.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">ids&lt;Array&gt;:</td><td>Identifiers by which this adapter is recognized by.

</td></tr>
<tr><td valign="top">adapter_class&lt;Class&gt;:</td><td>The <a href="#Merb::Rack">Rack</a> adapter class.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter.rb, line 32</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">register</span>(<span class="ruby-identifier">ids</span>, <span class="ruby-identifier">adapter_class</span>)
          <span class="ruby-ivar">@adapters</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">Hash</span>.<span class="ruby-identifier">new</span>
          <span class="ruby-identifier">ids</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">id</span><span class="ruby-operator">|</span> <span class="ruby-ivar">@adapters</span>[<span class="ruby-identifier">id</span>] = <span class="ruby-node">&quot;Merb::Rack::#{adapter_class}&quot;</span> }
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Application" id="Merb::Rack::Application">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37application.rb">lib/merb-core/rack/application.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000137">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
The main rack application call method. This is the entry point from rack
(and the webserver) to your application.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>A rack request of parameters.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">&lt;Array&gt;:</td><td>A rack response of [status&lt;Integer&gt;, headers&lt;Hash&gt;, body&lt;<a
href="#String">String</a>, Stream&gt;]

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/application.rb, line 15</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>) 
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">rack_response</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">handle</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">env</span>))
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Object</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-keyword kw">return</span> [<span class="ruby-value">500</span>, {<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TYPE</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">TEXT_SLASH_HTML</span>}, <span class="ruby-identifier">e</span>.<span class="ruby-identifier">message</span> <span class="ruby-operator">+</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">BREAK_TAG</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">e</span>.<span class="ruby-identifier">backtrace</span>.<span class="ruby-identifier">join</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">BREAK_TAG</span>)]
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DOUBLE_NEWLINE</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">flush</span>

        <span class="ruby-comment cmt"># unless controller.headers[Merb::Const::DATE]</span>
        <span class="ruby-comment cmt">#   require &quot;time&quot;</span>
        <span class="ruby-comment cmt">#   controller.headers[Merb::Const::DATE] = Time.now.rfc2822.to_s</span>
        <span class="ruby-comment cmt"># end</span>
        <span class="ruby-identifier">rack_response</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="deferred?" type="Public" category="Instance" id="M000138">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
Determines whether this request is a &quot;deferred_action&quot;, usually a
long request. <a href="#Merb::Rack">Rack</a> uses this method to determine
whether to use an evented request or a deferred request in evented rack
handlers.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>The rack request

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the request should be deferred.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/application.rb, line 43</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">deferred?</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-identifier">path</span> = <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>] <span class="ruby-operator">?</span> <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>].<span class="ruby-identifier">chomp</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span>) <span class="ruby-operator">:</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">path</span> <span class="ruby-operator">=~</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">deferred_actions</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info!</span> <span class="ruby-node">&quot;Deferring Request: #{path}&quot;</span>
          <span class="ruby-keyword kw">true</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-keyword kw">false</span>
        <span class="ruby-keyword kw">end</span>        
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Runner" id="Merb::Rack::Runner">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37runner.rb">lib/merb-core/rack/adapter/runner.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="start" type="Public" category="Class" id="M000139">
          <parameters>(opts={})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Options for the runner (see below).

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:runner_code&lt;String&gt;:</td><td>The code to run.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If opts[:runner_code] matches a filename, that file will be read and the
contents executed. Otherwise the code will be executed directly.
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/runner.rb, line 17</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start</span>(<span class="ruby-identifier">opts</span>={})
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">change_privilege</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:runner_code</span>]
          <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:runner_code</span>])
            <span class="ruby-identifier">eval</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:runner_code</span>]), <span class="ruby-constant">TOPLEVEL_BINDING</span>, <span class="ruby-keyword kw">__FILE__</span>, <span class="ruby-keyword kw">__LINE__</span>)
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">eval</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:runner_code</span>], <span class="ruby-constant">TOPLEVEL_BINDING</span>, <span class="ruby-keyword kw">__FILE__</span>, <span class="ruby-keyword kw">__LINE__</span>)
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-identifier">exit</span>
        <span class="ruby-keyword kw">end</span>  
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Console" id="Merb::Rack::Console">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37irb.rb">lib/merb-core/rack/adapter/irb.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="close_sandbox!" type="Public" category="Instance" id="M000144">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Ends a sandboxed session (delegates to any Merb::Orms::* modules).
</p>
<p>
An ORM should implement Merb::Orms::MyOrm#close_sandbox! to support this.
Usually this involves rolling back a transaction. :api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 113</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">close_sandbox!</span>
        <span class="ruby-identifier">orm_modules</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">orm</span><span class="ruby-operator">|</span> <span class="ruby-identifier">orm</span>.<span class="ruby-identifier">close_sandbox!</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">orm</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:close_sandbox!</span>) }
        <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;Modifications have been rolled back&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="open_sandbox!" type="Public" category="Instance" id="M000143">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Starts a sandboxed session (delegates to any Merb::Orms::* modules).
</p>
<p>
An ORM should implement Merb::Orms::MyOrm#open_sandbox! to support this.
Usually this involves starting a transaction. :api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 102</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">open_sandbox!</span>
        <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Loading #{Merb.environment} environment in sandbox (Merb #{Merb::VERSION})&quot;</span>
        <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;Any modifications you make will be rolled back on exit&quot;</span>
        <span class="ruby-identifier">orm_modules</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">orm</span><span class="ruby-operator">|</span> <span class="ruby-identifier">orm</span>.<span class="ruby-identifier">open_sandbox!</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">orm</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:open_sandbox!</span>) }
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reload!" type="Public" category="Instance" id="M000141">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Reloads classes using <a
href="#Merb::BootLoader::ReloadClasses">Merb::BootLoader::ReloadClasses</a>.
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 65</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reload!</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span><span class="ruby-operator">::</span><span class="ruby-constant">ReloadClasses</span>.<span class="ruby-identifier">reload</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="show_routes" type="Public" category="Instance" id="M000142">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Prints all routes for the application. :api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 71</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">show_routes</span>
        <span class="ruby-identifier">seen</span> = []
        <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">named_routes</span>.<span class="ruby-identifier">empty?</span>
          <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;==== Named routes&quot;</span>
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">named_routes</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span>,<span class="ruby-identifier">route</span><span class="ruby-operator">|</span>
            <span class="ruby-comment cmt"># something weird happens when you combine sprintf and irb</span>
            <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Helper     : #{name}&quot;</span>
            <span class="ruby-identifier">meth</span> = <span class="ruby-identifier">$1</span>.<span class="ruby-identifier">upcase</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">route</span>.<span class="ruby-identifier">conditions</span>[<span class="ruby-identifier">:method</span>].<span class="ruby-identifier">to_s</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/(get|post|put|delete)/</span>
            <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;HTTP method: #{meth || 'GET'}&quot;</span>
            <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Route      : #{route}&quot;</span>
            <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Params     : #{route.params.inspect}&quot;</span>
            <span class="ruby-identifier">puts</span>
            <span class="ruby-identifier">seen</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">route</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;==== Anonymous routes&quot;</span>
        (<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">routes</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">seen</span>).<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">route</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">meth</span> = <span class="ruby-identifier">$1</span>.<span class="ruby-identifier">upcase</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">route</span>.<span class="ruby-identifier">conditions</span>[<span class="ruby-identifier">:method</span>].<span class="ruby-identifier">to_s</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/(get|post|put|delete)/</span>
          <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;HTTP method: #{meth || 'GET'}&quot;</span>
          <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Route      : #{route}&quot;</span>
          <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Params     : #{route.params.inspect}&quot;</span>
          <span class="ruby-identifier">puts</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="trace_log!" type="Public" category="Instance" id="M000145">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Explictly show logger output during IRB session :api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 120</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">trace_log!</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">auto_flush</span> = <span class="ruby-keyword kw">true</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="url" type="Public" category="Instance" id="M000140">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
There are three possible ways to use this method. First, if you have a
named route, you can specify the route as the first parameter as a symbol
and any parameters in a hash. Second, you can generate the default route by
just passing the params hash, just passing the params hash. Finally, you
can use the anonymous parameters. This allows you to specify the parameters
to a named route in the order they appear in the router.
</p>
<h4>Parameters(Named Route)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation.

</td></tr>
</table>
<h4>Parameters(Default Route)</h4>
<table>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation. This route will use the default route.

</td></tr>
</table>
<h4>Parameters(Anonymous Parameters)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Array&gt;:</td><td>An array of anonymous parameters to generate the route with. These
parameters are assigned to the route parameters in the order that they are
passed.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Named Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, :title =&gt; &quot;new_article&quot;)
</p>
<p>
Default Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  default_routes
</pre>
<p>
end
</p>
<p>
url(:controller =&gt; &quot;articles&quot;, :action =&gt; &quot;new&quot;)
</p>
<p>
Anonymous Parameters
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:year/:month/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, 2008, 10, &quot;test_article&quot;)
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/irb.rb, line 58</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> {}
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Ebb" id="Merb::Rack::Ebb">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37ebb.rb">lib/merb-core/rack/adapter/ebb.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::AbstractAdapter">Merb::Rack::AbstractAdapter</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000146">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
start an <a href="#Merb::Rack::Ebb">Ebb</a> server on given host and port.
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/ebb.rb, line 9</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">use_mutex</span> = <span class="ruby-keyword kw">false</span>
        <span class="ruby-identifier">opts</span> = <span class="ruby-ivar">@opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:port</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">port</span>)
        <span class="ruby-ivar">@th</span> = <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">new</span> { <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">current</span>[<span class="ruby-identifier">:server</span>] = <span class="ruby-operator">::</span><span class="ruby-constant">Ebb</span>.<span class="ruby-identifier">start_server</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:app</span>], <span class="ruby-identifier">opts</span>) }
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_server" type="Public" category="Class" id="M000147">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/ebb.rb, line 16</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start_server</span>
        <span class="ruby-ivar">@th</span>.<span class="ruby-identifier">join</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stop" type="Public" category="Class" id="M000148">
          <parameters>(status = 0)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/ebb.rb, line 21</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>)
        <span class="ruby-operator">::</span><span class="ruby-constant">Ebb</span>.<span class="ruby-identifier">stop_server</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::AbstractAdapter" id="Merb::Rack::AbstractAdapter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37abstract.rb">lib/merb-core/rack/adapter/abstract.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="exit_process" type="Public" category="Class" id="M000155">
          <parameters>(status = 0)</parameters>

          <description><![CDATA[
            <p>
Exit the process with the specified status.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">status&lt;Integer&gt;:</td><td>The exit code of the process.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 244</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">exit_process</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>)
        <span class="ruby-identifier">exit</span>(<span class="ruby-identifier">status</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new_server" type="Public" category="Class" id="M000150">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
This method is designed to be overridden in a rack adapter. It will be
called to create a new instance of the server for the adapter to start. The
adapter should attempt to bind to a port at this point. This is called from
the <a href="#Merb::Rack::AbstractAdapter">AbstractAdapter</a> start
method.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;Integer&gt;:</td><td>The port the server should listen on

</td></tr>
</table>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 25</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotImplemented</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="process_title" type="Public" category="Class" id="M000156">
          <parameters>(whoami, port)</parameters>

          <description><![CDATA[
            <p>
Sets the process title.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">whoami&lt;Symbol&gt;:</td><td>Either :spawner for the master process or :worker for any of the worker

</td></tr>
</table>
<pre>
  processes.
</pre>
<table>
<tr><td valign="top">port&lt;Integer&gt;:</td><td>The base port that the app is running on.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 256</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">process_title</span>(<span class="ruby-identifier">whoami</span>, <span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">name</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:name</span>]
        <span class="ruby-identifier">app</span>  = <span class="ruby-node">&quot;merb#{&quot; : #{name}&quot; if (name &amp;&amp; name != &quot;merb&quot;)}&quot;</span>
        <span class="ruby-identifier">max_port</span>  = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:cluster</span>] <span class="ruby-operator">?</span> (<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:cluster</span>] <span class="ruby-operator">-</span> <span class="ruby-value">1</span>) <span class="ruby-operator">:</span> <span class="ruby-value">0</span>
        <span class="ruby-identifier">numbers</span>   = ((<span class="ruby-identifier">whoami</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">:worker</span>) <span class="ruby-operator">&amp;&amp;</span> (<span class="ruby-identifier">max_port</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">0</span>)) <span class="ruby-operator">?</span> <span class="ruby-node">&quot;#{port}..#{port + max_port}&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">port</span>
        <span class="ruby-identifier">file</span>      = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:socket_file</span>] <span class="ruby-operator">%</span> <span class="ruby-identifier">port</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:socket_file</span>]
        
        <span class="ruby-identifier">listening_on</span> = <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:socket</span>]
          <span class="ruby-node">&quot;socket#{'s' if max_port &gt; 0 &amp;&amp; whoami != :worker} #{numbers} &quot;</span>\
          <span class="ruby-node">&quot;#{file ? file : &quot;#{Merb.log_path}/#{name}.#{port}.sock&quot;}&quot;</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-node">&quot;port#{'s' if max_port &gt; 0 &amp;&amp; whoami != :worker} #{port}&quot;</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-node">&quot;#{app} : #{whoami} (#{listening_on})&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="spawn_worker" type="Public" category="Class" id="M000152">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
Spawns a new worker process at a port.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;Integer&gt;:</td><td>The port to start the worker process on.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 50</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">spawn_worker</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">worker_pid</span> = <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">fork</span>
        <span class="ruby-identifier">start_at_port</span>(<span class="ruby-identifier">port</span>, <span class="ruby-ivar">@opts</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">worker_pid</span>

        <span class="ruby-comment cmt"># If we have a worker_pid, we're in the parent.</span>
        <span class="ruby-identifier">throw</span>(<span class="ruby-identifier">:new_worker</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">worker_pid</span>

        <span class="ruby-ivar">@pids</span>[<span class="ruby-identifier">port</span>] = <span class="ruby-identifier">worker_pid</span>
        <span class="ruby-identifier">$WORKERS</span> = <span class="ruby-ivar">@pids</span>.<span class="ruby-identifier">values</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start" type="Public" category="Class" id="M000153">
          <parameters>(opts={})</parameters>

          <description><![CDATA[
            <p>
The main start method for bootloaders that support forking. This method
launches the adapters which inherit using the <a
href="#M000150">new_server</a> and <a href="#M000149">start_server</a>
methods. This method should not be overridden in adapters which want to
fork.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>A hash of options

</td></tr>
</table>
<pre>
  socket: the socket to bind to
  port: the port to bind to
  cluster: the number
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 73</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start</span>(<span class="ruby-identifier">opts</span>={})
        <span class="ruby-ivar">@opts</span> = <span class="ruby-identifier">opts</span>
        <span class="ruby-identifier">$WORKERS</span> <span class="ruby-operator">||=</span> []
        <span class="ruby-identifier">parent</span> = <span class="ruby-keyword kw">nil</span>

        <span class="ruby-ivar">@pids</span> = {}
        <span class="ruby-identifier">port</span> = (<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:socket</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:port</span>]).<span class="ruby-identifier">to_i</span>
        <span class="ruby-identifier">max_port</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:cluster</span>] <span class="ruby-operator">?</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:cluster</span>] <span class="ruby-operator">-</span> <span class="ruby-value">1</span> <span class="ruby-operator">:</span> <span class="ruby-value">0</span>

        <span class="ruby-comment cmt"># If we only have a single merb, just start it up and dispense with</span>
        <span class="ruby-comment cmt"># the spawner/worker setup.</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">max_port</span> <span class="ruby-operator">==</span> <span class="ruby-value">0</span>
          <span class="ruby-identifier">start_at_port</span>(<span class="ruby-identifier">port</span>)
          <span class="ruby-keyword kw">return</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-identifier">$0</span> = <span class="ruby-identifier">process_title</span>(<span class="ruby-identifier">:spawner</span>, <span class="ruby-identifier">port</span>)

        <span class="ruby-comment cmt"># For each port, spawn a new worker. The parent will continue in</span>
        <span class="ruby-comment cmt"># the loop, while the worker will throw :new_worker and be booted</span>
        <span class="ruby-comment cmt"># out of the loop.</span>
        <span class="ruby-identifier">catch</span>(<span class="ruby-identifier">:new_worker</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-value">0</span>.<span class="ruby-identifier">upto</span>(<span class="ruby-identifier">max_port</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">i</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">parent</span> = <span class="ruby-identifier">spawn_worker</span>(<span class="ruby-identifier">port</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">i</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># If we're in a worker, we're done. Otherwise, we've completed</span>
        <span class="ruby-comment cmt"># setting up workers and now need to watch them.</span>
        <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">parent</span>

        <span class="ruby-comment cmt"># For each worker, set up a thread in the spawner to watch it</span>
        <span class="ruby-value">0</span>.<span class="ruby-identifier">upto</span>(<span class="ruby-identifier">max_port</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">i</span><span class="ruby-operator">|</span>
          <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span>
            <span class="ruby-identifier">catch</span>(<span class="ruby-identifier">:new_worker</span>) <span class="ruby-keyword kw">do</span>
              <span class="ruby-identifier">loop</span> <span class="ruby-keyword kw">do</span>
                <span class="ruby-identifier">pid</span> = <span class="ruby-ivar">@pids</span>[<span class="ruby-identifier">port</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">i</span>]
                <span class="ruby-keyword kw">begin</span>
                  <span class="ruby-comment cmt"># Watch for the pid to exit.</span>
                  <span class="ruby-identifier">_</span>, <span class="ruby-identifier">status</span> = <span class="ruby-constant">Process</span>.<span class="ruby-identifier">wait2</span>(<span class="ruby-identifier">pid</span>)

                  <span class="ruby-comment cmt"># If the pid doesn't exist, we want to silently exit instead of</span>
                  <span class="ruby-comment cmt"># raising here.</span>
                <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">SystemCallError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
                <span class="ruby-keyword kw">ensure</span>
                  <span class="ruby-comment cmt"># If there was no worker with that PID, the status was non-0</span>
                  <span class="ruby-comment cmt"># (we send back a status of 128 when ABRT is called on a </span>
                  <span class="ruby-comment cmt"># worker, and Merb.fatal! exits with a status of 1), or if</span>
                  <span class="ruby-comment cmt"># Merb is in the process of exiting, *then* don't respawn.</span>
                  <span class="ruby-comment cmt"># Note that processes killed with kill -9 will return no</span>
                  <span class="ruby-comment cmt"># exitstatus, and we respawn them.</span>
                  <span class="ruby-keyword kw">if</span> <span class="ruby-operator">!</span><span class="ruby-identifier">status</span> <span class="ruby-operator">||</span> 
                    (<span class="ruby-identifier">status</span>.<span class="ruby-identifier">exitstatus</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">status</span>.<span class="ruby-identifier">exitstatus</span> <span class="ruby-operator">!=</span> <span class="ruby-value">0</span>) <span class="ruby-operator">||</span> 
                    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span> <span class="ruby-keyword kw">then</span>
                    <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">exit</span>
                  <span class="ruby-keyword kw">end</span>
                <span class="ruby-keyword kw">end</span>

                <span class="ruby-comment cmt"># Otherwise, respawn the worker, and watch it again.</span>
                <span class="ruby-identifier">spawn_worker</span>(<span class="ruby-identifier">port</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">i</span>)
              <span class="ruby-keyword kw">end</span>
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># The spawner process will make it here, and when it does, it should just </span>
        <span class="ruby-comment cmt"># sleep so it can pick up ctrl-c if it's in console mode.</span>
        <span class="ruby-identifier">sleep</span>

      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_at_port" type="Public" category="Class" id="M000154">
          <parameters>(port, opts = @opts)</parameters>

          <description><![CDATA[
            <p>
Forks a server on the specified port and start the app.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;Integer&gt;:</td><td>The port to start the server on

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>The hash of options, defaults to the @opts

</td></tr>
</table>
<pre>
  instance variable.
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 152</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start_at_port</span>(<span class="ruby-identifier">port</span>, <span class="ruby-identifier">opts</span> = <span class="ruby-ivar">@opts</span>)
        <span class="ruby-identifier">at_exit</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">remove_pid</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Worker</span>.<span class="ruby-identifier">start</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">testing?</span>

        <span class="ruby-comment cmt"># If Merb is daemonized, trap INT. If it's not daemonized,</span>
        <span class="ruby-comment cmt"># we let the master process' ctrl-c control the cluster</span>
        <span class="ruby-comment cmt"># of workers.</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:daemonize</span>]
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'INT'</span>) <span class="ruby-keyword kw">do</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span> = <span class="ruby-keyword kw">true</span>
            <span class="ruby-identifier">stop</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Exiting port #{port}\n&quot;</span>
            <span class="ruby-identifier">exit_process</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-comment cmt"># If it was not fork_for_class_load, we already set up</span>
          <span class="ruby-comment cmt"># ctrl-c handlers in the master thread.</span>
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:fork_for_class_load</span>]
          <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:console_trap</span>]
            <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">add_irb_trap</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># In daemonized mode or not, support HUPing the process to</span>
        <span class="ruby-comment cmt"># restart it.</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'HUP'</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span> = <span class="ruby-keyword kw">true</span>
          <span class="ruby-identifier">stop</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Exiting port #{port} on #{Process.pid}\n&quot;</span>
          <span class="ruby-identifier">exit_process</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># ABRTing the process will kill it, and it will not be respawned.</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'ABRT'</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span> = <span class="ruby-keyword kw">true</span>
          <span class="ruby-identifier">stopped</span> = <span class="ruby-identifier">stop</span>(<span class="ruby-value">128</span>)
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Exiting port #{port}\n&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">stopped</span>
          <span class="ruby-identifier">exit_process</span>(<span class="ruby-value">128</span>)
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># Each worker gets its own `ps' name.</span>
        <span class="ruby-identifier">$0</span> = <span class="ruby-identifier">process_title</span>(<span class="ruby-identifier">:worker</span>, <span class="ruby-identifier">port</span>)

        <span class="ruby-comment cmt"># Store the PID for this worker</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">store_pid</span>(<span class="ruby-identifier">port</span>)

        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_delimiter</span>] = <span class="ruby-node">&quot;#{process_title(:worker, port)} ~ &quot;</span>

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">reset_logger!</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;Starting #{self.name.split(&quot;::&quot;).last} at port #{port}&quot;</span>)

        <span class="ruby-comment cmt"># If we can't connect to the port, keep trying until we can. Print</span>
        <span class="ruby-comment cmt"># a warning about this once. Try every 0.25s.</span>
        <span class="ruby-identifier">printed_warning</span> = <span class="ruby-keyword kw">false</span>
        <span class="ruby-identifier">loop</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-comment cmt"># Call the adapter's new_server method, which should attempt</span>
            <span class="ruby-comment cmt"># to bind to a port.</span>
            <span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
          <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EADDRINUSE</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
            <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:bind_fail_fatal</span>]
              <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Could not bind to #{port}. It was already in use&quot;</span>, <span class="ruby-identifier">e</span>
            <span class="ruby-keyword kw">end</span>
            
            <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">printed_warning</span>
              <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Port #{port} is in use, &quot;</span> \
                <span class="ruby-value str">&quot;Waiting for it to become available.&quot;</span>
              <span class="ruby-identifier">printed_warning</span> = <span class="ruby-keyword kw">true</span>
            <span class="ruby-keyword kw">end</span>

            <span class="ruby-identifier">sleep</span> <span class="ruby-value">0</span><span class="ruby-value">.25</span>
            <span class="ruby-keyword kw">next</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">break</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Successfully bound to port #{port}&quot;</span>

        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">change_privilege</span>

        <span class="ruby-comment cmt"># Call the adapter's start_server method.</span>
        <span class="ruby-identifier">start_server</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_server" type="Public" category="Class" id="M000149">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
This method is designed to be overridden in a rack adapter. It will be
called to start a server created with the <a href="#M000150">new_server</a>
method. This is called from the <a
href="#Merb::Rack::AbstractAdapter">AbstractAdapter</a> start method.
</p>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 11</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start_server</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotImplemented</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stop" type="Public" category="Class" id="M000151">
          <parameters>(status)</parameters>

          <description><![CDATA[
            <p>
This method is designed to be overridden in a rack adapter. It will be
called to stop the adapter server.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">status&lt;Integer&gt;:</td><td>The exit status the adapter should exit with.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the server was properly stopped.

</td></tr>
</table>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/abstract.rb, line 40</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-identifier">status</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotImplemented</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Middleware" id="Merb::Rack::Middleware">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware.rb">lib/merb-core/rack/middleware.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000157">
          <parameters>(app)</parameters>

          <description><![CDATA[
            <p>
@overridable :api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware.rb, line 7</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">app</span>)
        <span class="ruby-ivar">@app</span> = <span class="ruby-identifier">app</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000159">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
@overridable :api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware.rb, line 19</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="deferred?" type="Public" category="Instance" id="M000158">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
@overridable :api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware.rb, line 13</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">deferred?</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">deferred?</span>(<span class="ruby-identifier">env</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Static" id="Merb::Rack::Static">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware37static.rb">lib/merb-core/rack/middleware/static.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Middleware">Merb::Rack::Middleware</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000160">
          <parameters>(app,directory)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/static.rb, line 6</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">app</span>,<span class="ruby-identifier">directory</span>)
        <span class="ruby-keyword kw">super</span>(<span class="ruby-identifier">app</span>)
        <span class="ruby-ivar">@static_server</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">File</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">directory</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000161">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/static.rb, line 12</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)        
        <span class="ruby-identifier">path</span> = <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>]
                 <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>].<span class="ruby-identifier">chomp</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span>)
               <span class="ruby-keyword kw">else</span>
                 <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span>
               <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">cached_path</span> = (<span class="ruby-identifier">path</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-value">? </span><span class="ruby-value str">'index'</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">path</span>) <span class="ruby-operator">+</span> <span class="ruby-value str">'.html'</span>
        
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">file_exist?</span>(<span class="ruby-identifier">path</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">REQUEST_METHOD</span>] <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/GET|HEAD/</span> <span class="ruby-comment cmt"># Serve the file if it's there and the request method is GET or HEAD</span>
          <span class="ruby-identifier">serve_static</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">file_exist?</span>(<span class="ruby-identifier">cached_path</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">REQUEST_METHOD</span>] <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/GET|HEAD/</span> <span class="ruby-comment cmt"># Serve the page cache if it's there and the request method is GET or HEAD</span>
          <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>] = <span class="ruby-identifier">cached_path</span>
          <span class="ruby-identifier">serve_static</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">path</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/favicon\.ico/</span>
          <span class="ruby-keyword kw">return</span> [<span class="ruby-value">404</span>, { <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TYPE</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">TEXT_SLASH_HTML</span> }, <span class="ruby-value str">&quot;404 Not Found.&quot;</span>]
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="file_exist?" type="Public" category="Instance" id="M000162">
          <parameters>(path)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path to the file relative to the server root.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if file exists under the server root and is readable.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/static.rb, line 39</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">file_exist?</span>(<span class="ruby-identifier">path</span>)
          <span class="ruby-identifier">full_path</span> = <span class="ruby-operator">::</span><span class="ruby-constant">File</span>.<span class="ruby-identifier">join</span>(<span class="ruby-ivar">@static_server</span>.<span class="ruby-identifier">root</span>, <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">unescape</span>(<span class="ruby-identifier">path</span>))
          <span class="ruby-operator">::</span><span class="ruby-constant">File</span>.<span class="ruby-identifier">file?</span>(<span class="ruby-identifier">full_path</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">::</span><span class="ruby-constant">File</span>.<span class="ruby-identifier">readable?</span>(<span class="ruby-identifier">full_path</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="serve_static" type="Public" category="Instance" id="M000163">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>Environment variables to pass on to the server.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/static.rb, line 48</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">serve_static</span>(<span class="ruby-identifier">env</span>)
          <span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>] = <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">unescape</span>(<span class="ruby-identifier">env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>])
          <span class="ruby-ivar">@static_server</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::StreamWrapper" id="Merb::Rack::StreamWrapper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37stream_wrapper.rb">lib/merb-core/rack/stream_wrapper.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000164">
          <parameters>(body)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/stream_wrapper.rb, line 6</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">body</span>)
         <span class="ruby-ivar">@body</span> = <span class="ruby-identifier">body</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="==" type="Public" category="Instance" id="M000168">
          <parameters>(other)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/stream_wrapper.rb, line 34</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-operator">==</span>(<span class="ruby-identifier">other</span>)
        <span class="ruby-ivar">@body</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">other</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="each" type="Public" category="Instance" id="M000165">
          <parameters>(&amp;callback)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/stream_wrapper.rb, line 11</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">each</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">callback</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Proc</span> <span class="ruby-operator">===</span> <span class="ruby-ivar">@body</span>
          <span class="ruby-ivar">@writer</span> = <span class="ruby-identifier">lambda</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">x</span><span class="ruby-operator">|</span> <span class="ruby-identifier">callback</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">x</span>) }
          <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">call</span>(<span class="ruby-keyword kw">self</span>)
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">String</span>)
          <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">each_line</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">callback</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">each</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">callback</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="method_missing" type="Public" category="Instance" id="M000169">
          <parameters>(sym, *args, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/stream_wrapper.rb, line 39</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">method_missing</span>(<span class="ruby-identifier">sym</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
        <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">sym</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_s" type="Public" category="Instance" id="M000167">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/stream_wrapper.rb, line 29</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_s</span>
        <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">to_s</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="write" type="Public" category="Instance" id="M000166">
          <parameters>(str)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/stream_wrapper.rb, line 23</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">write</span>(<span class="ruby-identifier">str</span>)
        <span class="ruby-ivar">@writer</span>.<span class="ruby-identifier">call</span> <span class="ruby-identifier">str</span>.<span class="ruby-identifier">to_s</span>
        <span class="ruby-identifier">str</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::WEBrick" id="Merb::Rack::WEBrick">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37webrick.rb">lib/merb-core/rack/adapter/webrick.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::AbstractAdapter">Merb::Rack::AbstractAdapter</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="server">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000170">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/webrick.rb, line 15</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">options</span> = {
          <span class="ruby-identifier">:Port</span>        =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">port</span>,
          <span class="ruby-identifier">:BindAddress</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:host</span>],
          <span class="ruby-identifier">:Logger</span>      =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>,
          <span class="ruby-identifier">:AccessLog</span>   =<span class="ruby-operator">&gt;</span> [
            [<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>, <span class="ruby-operator">::</span><span class="ruby-constant">WEBrick</span><span class="ruby-operator">::</span><span class="ruby-constant">AccessLog</span><span class="ruby-operator">::</span><span class="ruby-constant">COMMON_LOG_FORMAT</span>],
            [<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>, <span class="ruby-operator">::</span><span class="ruby-constant">WEBrick</span><span class="ruby-operator">::</span><span class="ruby-constant">AccessLog</span><span class="ruby-operator">::</span><span class="ruby-constant">REFERER_LOG_FORMAT</span>]
          ]
        }

        <span class="ruby-identifier">sockets</span> = <span class="ruby-operator">::</span><span class="ruby-constant">WEBrick</span><span class="ruby-operator">::</span><span class="ruby-constant">Utils</span>.<span class="ruby-identifier">create_listeners</span> <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">port</span>
        <span class="ruby-ivar">@server</span> = <span class="ruby-operator">::</span><span class="ruby-constant">WEBrick</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTPServer</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:DoNotListen</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>))
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">listeners</span>.<span class="ruby-identifier">replace</span> <span class="ruby-identifier">sockets</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_server" type="Public" category="Class" id="M000171">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/webrick.rb, line 32</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start_server</span>
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">mount</span>(<span class="ruby-value str">&quot;/&quot;</span>, <span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Handler</span><span class="ruby-operator">::</span><span class="ruby-constant">WEBrick</span>, <span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:app</span>])
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">start</span>
        <span class="ruby-identifier">exit</span>(<span class="ruby-ivar">@status</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stop" type="Public" category="Class" id="M000172">
          <parameters>(status = 0)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/webrick.rb, line 39</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>)
        <span class="ruby-ivar">@status</span> = <span class="ruby-identifier">status</span>
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">shutdown</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::SwiftipliedMongrel" id="Merb::Rack::SwiftipliedMongrel">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37swiftiplied_mongrel.rb">lib/merb-core/rack/adapter/swiftiplied_mongrel.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Mongrel">Merb::Rack::Mongrel</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000173">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/swiftiplied_mongrel.rb, line 8</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">use_mutex</span> = <span class="ruby-keyword kw">false</span>
        <span class="ruby-keyword kw">super</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Mongrel" id="Merb::Rack::Mongrel">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37mongrel.rb">lib/merb-core/rack/adapter/mongrel.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::AbstractAdapter">Merb::Rack::AbstractAdapter</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000175">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/mongrel.rb, line 31</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-ivar">@server</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Mongrel</span><span class="ruby-operator">::</span><span class="ruby-constant">HttpServer</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:host</span>], <span class="ruby-identifier">port</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_server" type="Public" category="Class" id="M000176">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/mongrel.rb, line 36</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">start_server</span>
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">register</span>(<span class="ruby-value str">'/'</span>, <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Handler</span><span class="ruby-operator">::</span><span class="ruby-constant">Mongrel</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@opts</span>[<span class="ruby-identifier">:app</span>]))
        <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">run</span>.<span class="ruby-identifier">join</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stop" type="Public" category="Class" id="M000174">
          <parameters>(status = 0)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/mongrel.rb, line 18</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@server</span>
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-ivar">@server</span>.<span class="ruby-identifier">stop</span>(<span class="ruby-keyword kw">true</span>)
          <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Mongrel</span><span class="ruby-operator">::</span><span class="ruby-constant">TimeoutError</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-value str">&quot;Your process took too long to shut &quot;</span> \
              <span class="ruby-value str">&quot;down, so mongrel killed it.&quot;</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">true</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::Profiler" id="Merb::Rack::Profiler">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware37profiler.rb">lib/merb-core/rack/middleware/profiler.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Middleware">Merb::Rack::Middleware</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000177">
          <parameters>(app, min=1, iter=1)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/profiler.rb, line 6</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">app</span>, <span class="ruby-identifier">min</span>=<span class="ruby-value">1</span>, <span class="ruby-identifier">iter</span>=<span class="ruby-value">1</span>)
        <span class="ruby-keyword kw">super</span>(<span class="ruby-identifier">app</span>)
        <span class="ruby-ivar">@min</span>, <span class="ruby-ivar">@iter</span> = <span class="ruby-identifier">min</span>, <span class="ruby-identifier">iter</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000178">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/profiler.rb, line 12</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-identifier">__profile__</span>(<span class="ruby-value str">&quot;profile_output&quot;</span>, <span class="ruby-ivar">@min</span>, <span class="ruby-ivar">@iter</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::ConditionalGet" id="Merb::Rack::ConditionalGet">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37middleware37conditional_get.rb">lib/merb-core/rack/middleware/conditional_get.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Middleware">Merb::Rack::Middleware</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="call" type="Public" category="Instance" id="M000179">
          <parameters>(env)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/middleware/conditional_get.rb, line 7</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)
        <span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span> = <span class="ruby-ivar">@app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">env</span>)

        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">document_not_modified?</span>(<span class="ruby-identifier">env</span>, <span class="ruby-identifier">headers</span>)
          <span class="ruby-identifier">status</span> = <span class="ruby-value">304</span>
          <span class="ruby-identifier">body</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span>
          <span class="ruby-comment cmt"># set Date header using RFC1123 date format as specified by HTTP</span>
          <span class="ruby-comment cmt"># RFC2616 section 3.3.1.</span>
        <span class="ruby-keyword kw">end</span>
        
        [<span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-identifier">body</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::ThinTurbo" id="Merb::Rack::ThinTurbo">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37thin_turbo.rb">lib/merb-core/rack/adapter/thin_turbo.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Thin">Merb::Rack::Thin</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000180">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/thin_turbo.rb, line 11</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-ivar">@opts</span>.<span class="ruby-identifier">merge!</span>(<span class="ruby-identifier">:backend</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-operator">::</span><span class="ruby-constant">Thin</span><span class="ruby-operator">::</span><span class="ruby-constant">Backends</span><span class="ruby-operator">::</span><span class="ruby-constant">Turbo</span>)
        <span class="ruby-keyword kw">super</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Rack::EventedMongrel" id="Merb::Rack::EventedMongrel">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37rack37adapter37evented_mongrel.rb">lib/merb-core/rack/adapter/evented_mongrel.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Rack::Mongrel">Merb::Rack::Mongrel</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new_server" type="Public" category="Class" id="M000181">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/rack/adapter/evented_mongrel.rb, line 8</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new_server</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">use_mutex</span> = <span class="ruby-keyword kw">false</span>
        <span class="ruby-keyword kw">super</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::ResponderMixin" id="Merb::ResponderMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37responder.rb">lib/merb-core/controller/mixins/responder.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
The <a href="#Merb::ResponderMixin">ResponderMixin</a> adds methods that
help you manage what formats your controllers have available, determine
what format(s) the client requested and is capable of handling, and perform
content negotiation to pick the proper content format to deliver.
</p>
<p>
If you hear someone say &quot;Use provides&quot; they&#8217;re talking
about the <a href="#Merb::Responder">Responder</a>. If you hear someone ask
&quot;What happened to respond_to?&quot; it was replaced by provides and
the other <a href="#Merb::Responder">Responder</a> methods.
</p>
<h2>A simple example</h2>
<p>
The best way to understand how all of these pieces fit together is with an
example. Here&#8217;s a simple web-service ready resource that provides a
list of all the widgets we know about. The widget list is available in 3
formats: :html (the default), plus :xml and :text.
</p>
<pre>
    class Widgets &lt; Application
      provides :html   # This is the default, but you can
                       # be explicit if you like.
      provides :xml, :text

      def index
        @widgets = Widget.fetch
        render @widgets
      end
    end
</pre>
<p>
Let&#8217;s look at some example requests for this list of widgets.
We&#8217;ll assume they&#8217;re all GET requests, but that&#8217;s only to
make the examples easier; this works for the full set of RESTful methods.
</p>
<ol>
<li>The simplest case, /widgets.html Since the request includes a specific
format (.html) we know what format to return. Since :html is in our list of
provided formats, that&#8217;s what we&#8217;ll return. <tt>render</tt>
will look for an index.html.erb (or another template format like
index.html.mab; see the documentation on <a
href="#Merb::Template">Template</a> engines)

</li>
<li>Almost as simple, /widgets.xml This is very similar. They want :xml, we
have :xml, so that&#8217;s what they get. If <tt>render</tt> doesn&#8217;t
find an index.xml.builder or similar template, it will call <tt>to_xml</tt>
on @widgets. This may or may not do something useful, but you can see how
it works.

</li>
<li>A browser request for /widgets This time the URL doesn&#8217;t say what
format is being requested, so we&#8217;ll look to the HTTP Accept: header.
If it&#8217;s &#8216;<b>/</b>&#8217; (anything), we&#8217;ll use the first
format on our list, :html by default.

<p>
If it parses to a list of accepted formats, we&#8217;ll look through them,
in order, until we find one we have available. If we find one, we&#8217;ll
use that. Otherwise, we can&#8217;t fulfill the request: they asked for a
format we don&#8217;t have. So we raise 406: Not Acceptable.
</p>
</li>
</ol>
<h2>A more complex example</h2>
<p>
Sometimes you don&#8217;t have the same code to handle each available
format. Sometimes you need to load different data to serve /widgets.xml
versus /widgets.txt. In that case, you can use <tt><a
href="#M000188">content_type</a></tt> to determine what format will be
delivered.
</p>
<pre>
    class Widgets &lt; Application
      def action1
        if content_type == :text
          Widget.load_text_formatted(params[:id])
        else
          render
        end
      end

      def action2
        case content_type
        when :html
          handle_html()
        when :xml
          handle_xml()
        when :text
          handle_text()
        else
          render
        end
      end
    end
</pre>
<p>
You can do any standard Ruby flow control using <tt><a
href="#M000188">content_type</a></tt>. If you don&#8217;t call it yourself,
it will be called (triggering content negotiation) by <tt>render</tt>.
</p>
<p>
Once <tt><a href="#M000188">content_type</a></tt> has been called, the
output format is frozen, and none of the provides methods can be used.
</p>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="TYPES">

          <value>Dictionary.new</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="MIMES">

          <value>{}</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="included" type="Public" category="Class" id="M000182">
          <parameters>(base)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">base&lt;Module&gt;:</td><td>The module that <a href="#Merb::ResponderMixin">ResponderMixin</a> was
mixed into

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 109</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">included</span>(<span class="ruby-identifier">base</span>)
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">extend</span>(<span class="ruby-constant">ClassMethods</span>)
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">class_eval</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">class_inheritable_accessor</span> <span class="ruby-identifier">:class_provided_formats</span>
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class_provided_formats</span> = []
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">reset_provides</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="_perform_content_negotiation" type="Public" category="Instance" id="M000187">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Do the content negotiation:
</p>
<ol>
<li>if params[:format] is there, and provided, use it

</li>
<li><a href="#Merb::Parse">Parse</a> the Accept header

</li>
<li>If it&#8217;s <b>/</b>, use the first provided format

</li>
<li>Look for one that is provided, in order of request

</li>
<li>Raise 406 if none found

</li>
</ol>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 268</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_perform_content_negotiation</span>
      <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">fmt</span> = <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:format</span>]) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">fmt</span>.<span class="ruby-identifier">empty?</span>
        <span class="ruby-identifier">accepts</span> = [<span class="ruby-identifier">fmt</span>.<span class="ruby-identifier">to_sym</span>]
      <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">request</span>.<span class="ruby-identifier">accept</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">%r{^(text/html|\*/\*)}</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">_provided_formats</span>.<span class="ruby-identifier">first</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:html</span>
        <span class="ruby-comment cmt"># Handle the common case of text/html and :html provided after checking :format</span>
        <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">:html</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">accepts</span> = <span class="ruby-constant">Responder</span>.<span class="ruby-identifier">parse</span>(<span class="ruby-identifier">request</span>.<span class="ruby-identifier">accept</span>).<span class="ruby-identifier">map</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">t</span><span class="ruby-operator">|</span> <span class="ruby-identifier">t</span>.<span class="ruby-identifier">to_sym</span>}.<span class="ruby-identifier">compact</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-comment cmt"># no need to make a bunch of method calls to _provided_formats</span>
      <span class="ruby-identifier">provided_formats</span> = <span class="ruby-identifier">_provided_formats</span>
      
      <span class="ruby-identifier">specifics</span> = <span class="ruby-identifier">accepts</span> <span class="ruby-operator">&amp;</span> <span class="ruby-identifier">provided_formats</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">specifics</span>.<span class="ruby-identifier">first</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">specifics</span>.<span class="ruby-identifier">length</span> <span class="ruby-operator">==</span> <span class="ruby-value">0</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">provided_formats</span>.<span class="ruby-identifier">first</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">accepts</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">:all</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">provided_formats</span>.<span class="ruby-identifier">empty?</span>
      
      <span class="ruby-identifier">message</span>  = <span class="ruby-value str">&quot;A format (%s) that isn't provided (%s) has been requested. &quot;</span>
      <span class="ruby-identifier">message</span> <span class="ruby-operator">+=</span> <span class="ruby-value str">&quot;Make sure the action provides the format, and be &quot;</span>
      <span class="ruby-identifier">message</span> <span class="ruby-operator">+=</span> <span class="ruby-value str">&quot;careful of before filters which won't recognize &quot;</span>
      <span class="ruby-identifier">message</span> <span class="ruby-operator">+=</span> <span class="ruby-value str">&quot;formats provided within actions.&quot;</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">NotAcceptable</span>,
        (<span class="ruby-identifier">message</span> <span class="ruby-operator">%</span> [<span class="ruby-identifier">accepts</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">', '</span>), <span class="ruby-identifier">provided_formats</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">', '</span>)])
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_provided_formats" type="Public" category="Instance" id="M000183">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>The current list of formats provided for this instance of the controller.
It starts with what has been set in the controller (or :html by default)
but can be modified on a per-action basis.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 199</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_provided_formats</span>
      <span class="ruby-ivar">@_provided_formats</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">class_provided_formats</span>.<span class="ruby-identifier">dup</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="content_type" type="Public" category="Instance" id="M000188">
          <parameters>(fmt = nil)</parameters>

          <description><![CDATA[
            <p>
Returns the output format for this request, based on the provided formats,
<tt>params[:format]</tt> and the client&#8217;s HTTP Accept header.
</p>
<p>
The first time this is called, it triggers content negotiation and caches
the value. Once you call <tt><a href="#M000188">content_type</a></tt> you
can not set or change the list of provided formats.
</p>
<p>
Called automatically by <tt>render</tt>, so you should only call it if you
need the value, not to trigger content negotiation.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">fmt&lt;String&gt;:</td><td>An optional format to use instead of performing content negotiation. This
can be used to pass in the values of opts[:format] from the render function
to short-circuit content-negotiation when it&#8217;s not necessary. This
optional parameter should not be considered part of the public API.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Symbol:</td><td>The content-type that will be used for this controller.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 316</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">content_type</span>(<span class="ruby-identifier">fmt</span> = <span class="ruby-keyword kw">nil</span>)
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">content_type</span> = (<span class="ruby-identifier">fmt</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">_perform_content_negotiation</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-ivar">@_content_type</span>
      <span class="ruby-ivar">@_content_type</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="content_type=" type="Public" category="Instance" id="M000189">
          <parameters>(type)</parameters>

          <description><![CDATA[
            <p>
Sets the content type of the current response to a value based on a passed
in key. The Content-Type header will be set to the first registered header
for the mime-type.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">type&lt;Symbol&gt;:</td><td>The content type.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>type is not in the list of registered mime-types.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Symbol:</td><td>The content-type that was passed in.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 335</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">content_type=</span>(<span class="ruby-identifier">type</span>)
      <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">available_mime_types</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">type</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">NotAcceptable</span>.<span class="ruby-identifier">new</span>(<span class="ruby-node">&quot;Unknown content_type for response: #{type}&quot;</span>) 
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-ivar">@_content_type</span> = <span class="ruby-identifier">type</span>

      <span class="ruby-identifier">mime</span> = <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">available_mime_types</span>[<span class="ruby-identifier">type</span>]
      
      <span class="ruby-identifier">headers</span>[<span class="ruby-value str">&quot;Content-Type&quot;</span>] = <span class="ruby-identifier">mime</span>[<span class="ruby-identifier">:content_type</span>]
      
      <span class="ruby-comment cmt"># merge any format specific response headers</span>
      <span class="ruby-identifier">mime</span>[<span class="ruby-identifier">:response_headers</span>].<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>,<span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-identifier">headers</span>[<span class="ruby-identifier">k</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">v</span> }
      
      <span class="ruby-comment cmt"># if given, use a block to finetune any runtime headers</span>
      <span class="ruby-identifier">mime</span>[<span class="ruby-identifier">:response_block</span>].<span class="ruby-identifier">call</span>(<span class="ruby-keyword kw">self</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">mime</span>[<span class="ruby-identifier">:response_block</span>]

      <span class="ruby-ivar">@_content_type</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="does_not_provide" type="Public" category="Instance" id="M000186">
          <parameters>(*formats)</parameters>

          <description><![CDATA[
            <p>
Removes formats from the list of provided formats for this particular
request. Usually used to remove formats from a single action. See also the
controller-level <a href="#M000186">does_not_provide</a> that affects all
actions in a controller.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*formats&lt;Symbol&gt;:</td><td>Registered mime-type

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>List of formats that remain after removing the ones not to provide.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 256</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">does_not_provide</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
      <span class="ruby-ivar">@_provided_formats</span> <span class="ruby-operator">-=</span> <span class="ruby-identifier">formats</span>.<span class="ruby-identifier">flatten</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="only_provides" type="Public" category="Instance" id="M000185">
          <parameters>(*formats)</parameters>

          <description><![CDATA[
            <p>
Sets list of provided formats for this particular request. Usually used to
limit formats to a single action. See also the controller-level <a
href="#M000185">only_provides</a> that affects all actions in a controller.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*formats&lt;Symbol&gt;:</td><td>A list of formats to use as the per-action list of provided formats.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>List of formats passed in.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 238</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">only_provides</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
      <span class="ruby-ivar">@_provided_formats</span> = []
      <span class="ruby-identifier">provides</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="provides" type="Public" category="Instance" id="M000184">
          <parameters>(*formats)</parameters>

          <description><![CDATA[
            <p>
Adds formats to the list of provided formats for this particular request.
Usually used to add formats to a single action. See also the
controller-level provides that affects all actions in a controller.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*formats&lt;Symbol&gt;:</td><td>A list of formats to add to the per-action list of provided formats.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">Merb::ResponderMixin::ContentTypeAlreadySet:</td><td>Content negotiation already occurred, and the <a
href="#M000188">content_type</a> is set.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>List of formats passed in.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 219</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">provides</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@_content_type</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">ContentTypeAlreadySet</span>, <span class="ruby-value str">&quot;Cannot modify provided_formats because content_type has already been set&quot;</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-ivar">@_provided_formats</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_provided_formats</span> <span class="ruby-operator">|</span> <span class="ruby-identifier">formats</span> <span class="ruby-comment cmt"># merges with class_provided_formats if not already</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::ResponderMixin::ClassMethods" id="Merb::ResponderMixin::ClassMethods">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37responder.rb">lib/merb-core/controller/mixins/responder.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="clear_provides" type="Public" category="Instance" id="M000193">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Clear the list of provides.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array:</td><td>An empty Array.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 177</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">clear_provides</span>
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class_provided_formats</span>.<span class="ruby-identifier">clear</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="does_not_provide" type="Public" category="Instance" id="M000192">
          <parameters>(*formats)</parameters>

          <description><![CDATA[
            <p>
This class should not provide any of this list of formats, despite any.
other definitions previously or in superclasses.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*formats&lt;Symbol&gt;:</td><td>Registered mime-types.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>List of formats that remain after removing the ones not to provide.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 167</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">does_not_provide</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class_provided_formats</span> <span class="ruby-operator">-=</span> <span class="ruby-identifier">formats</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="only_provides" type="Public" category="Instance" id="M000191">
          <parameters>(*formats)</parameters>

          <description><![CDATA[
            <p>
This class should only provide the formats listed here, despite any other
definitions previously or in superclasses.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*formats&lt;Symbol&gt;:</td><td>Registered mime-types.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>List of formats passed in.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 151</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">only_provides</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
        <span class="ruby-identifier">clear_provides</span>
        <span class="ruby-identifier">provides</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="provides" type="Public" category="Instance" id="M000190">
          <parameters>(*formats)</parameters>

          <description><![CDATA[
            <p>
Adds symbols representing formats to the controller&#8217;s default list of
provided_formats. These will apply to every action in the controller,
unless modified in the action. If the last argument is a <a
href="#Hash">Hash</a> or an Array, these are regarded as arguments to pass
to the to_&lt;mime_type&gt; method as needed.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*formats&lt;Symbol&gt;:</td><td>A list of mime-types that the controller should provide.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>List of formats passed in.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  provides :html, :xml
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 137</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">provides</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">formats</span>)
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class_provided_formats</span> <span class="ruby-operator">|=</span> <span class="ruby-identifier">formats</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reset_provides" type="Public" category="Instance" id="M000194">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Reset the list of provides to include only :html.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>[:html].

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 187</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reset_provides</span>
        <span class="ruby-identifier">only_provides</span>(<span class="ruby-identifier">:html</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::ResponderMixin::ContentTypeAlreadySet" id="Merb::ResponderMixin::ContentTypeAlreadySet">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37responder.rb">lib/merb-core/controller/mixins/responder.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Module name="Merb::AuthenticationMixin" id="Merb::AuthenticationMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37authentication.rb">lib/merb-core/controller/mixins/authentication.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="basic_authentication" type="Public" category="Instance" id="M000195">
          <parameters>(realm = &quot;Application&quot;, &amp;authenticator)</parameters>

          <description><![CDATA[
            <p>
Attempts to authenticate the user via HTTP Basic authentication. Takes a
block with the username and password, if the block yields false the
authentication is not accepted and :halt is thrown.
</p>
<p>
If no block is passed, <tt><a
href="#M000195">basic_authentication</a></tt>, the <tt>request</tt> and
<tt>authenticate</tt> methods can be chained. These can be used to
independently request authentication or confirm it, if more control is
desired.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">realm&lt;~to_s&gt;:</td><td>The realm to authenticate against. Defaults to &#8216;Application&#8217;.

</td></tr>
<tr><td valign="top">&amp;authenticator:</td><td>A block to check if the authentication is valid.

</td></tr>
</table>
<h4>Returns</h4>
<p>
<a
href="#Merb::AuthenticationMixin::BasicAuthentication">Merb::AuthenticationMixin::BasicAuthentication</a>
</p>
<h4>Examples</h4>
<pre>
    class Application &lt; Merb::Controller

      before :authenticate

      protected

      def authenticate
        basic_authentication(&quot;My App&quot;) do |username, password|
          password == &quot;secret&quot;
        end
      end

    end

    class Application &lt; Merb::Controller

      before :authenticate

      def authenticate
        user = basic_authentication.authenticate do |username, password|
          User.authenticate(username, password)
        end

        if user
          @current_user = user
        else
          basic_authentication.request
        end
      end

    end
</pre>
<p>
If you need to request basic authentication inside an action you need to
use the request! method.
</p>
<h4>Example</h4>
<pre>
   class Sessions &lt; Application

     def new
       case content_type
       when :html
         render

       else
        user = basic_authentication.authenticate do |username, password|
          User.authenticate(username, password)
        end

        if user
          display(user)
        else
          basic_authentication.request
        end
       end
     end

   end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 79</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">basic_authentication</span>(<span class="ruby-identifier">realm</span> = <span class="ruby-value str">&quot;Application&quot;</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>)
    <span class="ruby-ivar">@_basic_authentication</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">BasicAuthentication</span>.<span class="ruby-identifier">new</span>(<span class="ruby-keyword kw">self</span>, <span class="ruby-identifier">realm</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::AuthenticationMixin::BasicAuthentication" id="Merb::AuthenticationMixin::BasicAuthentication">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37authentication.rb">lib/merb-core/controller/mixins/authentication.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000196">
          <parameters>(controller, realm = &quot;Application&quot;, &amp;authenticator)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 88</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">controller</span>, <span class="ruby-identifier">realm</span> = <span class="ruby-value str">&quot;Application&quot;</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>)
      <span class="ruby-ivar">@controller</span> = <span class="ruby-identifier">controller</span>
      <span class="ruby-ivar">@realm</span> = <span class="ruby-identifier">realm</span>
      <span class="ruby-ivar">@auth</span> = <span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Auth</span><span class="ruby-operator">::</span><span class="ruby-constant">Basic</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">env</span>)
      <span class="ruby-identifier">authenticate_or_request</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">authenticator</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="authenticate" type="Public" category="Instance" id="M000197">
          <parameters>(&amp;authenticator)</parameters>

          <description><![CDATA[
            <p>
Determines whether or not the user is authenticated using the criteria in
the provided authenticator block.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;authenticator:</td><td>A block that decides whether the provided username and password

</td></tr>
</table>
<pre>
  are valid.
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">Object:</td><td>False if basic auth is not provided, otherwise the return value of the
authenticator block.

</td></tr>
</table>
<p>
@overridable :api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 107</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">authenticate</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@auth</span>.<span class="ruby-identifier">provided?</span> <span class="ruby-keyword kw">and</span> <span class="ruby-ivar">@auth</span>.<span class="ruby-identifier">basic?</span>
        <span class="ruby-identifier">authenticator</span>.<span class="ruby-identifier">call</span>(<span class="ruby-operator">*</span><span class="ruby-ivar">@auth</span>.<span class="ruby-identifier">credentials</span>)
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-keyword kw">false</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="password" type="Public" category="Instance" id="M000202">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The password provided in the request.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 158</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">password</span>
      <span class="ruby-identifier">provided?</span> <span class="ruby-value">? </span><span class="ruby-ivar">@auth</span>.<span class="ruby-identifier">credentials</span>.<span class="ruby-identifier">last</span> <span class="ruby-operator">:</span> <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="provided?" type="Public" category="Instance" id="M000200">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>Whether there has been any basic authentication credentials provided

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 142</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">provided?</span>
      <span class="ruby-ivar">@auth</span>.<span class="ruby-identifier">provided?</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="request" type="Public" category="Instance" id="M000198">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
<a href="#Merb::Request">Request</a> basic authentication and halt the
filter chain. This is for use in a before filter.
</p>
<h4>Throws</h4>
<p>
:halt with an &quot;HTTP Basic: Access denied.&quot; message with no
layout, and sets the status to Unauthorized.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 121</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">request</span>
      <span class="ruby-identifier">request!</span>
      <span class="ruby-identifier">throw</span> <span class="ruby-identifier">:halt</span>, <span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">render</span>(<span class="ruby-value str">&quot;HTTP Basic: Access denied.\n&quot;</span>, <span class="ruby-identifier">:status</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Unauthorized</span>.<span class="ruby-identifier">status</span>, <span class="ruby-identifier">:layout</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="request!" type="Public" category="Instance" id="M000199">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Sets headers to request basic auth.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Returns the empty string to provide a response body.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 132</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">request!</span>
      <span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">status</span> = <span class="ruby-constant">Unauthorized</span>.<span class="ruby-identifier">status</span>
      <span class="ruby-ivar">@controller</span>.<span class="ruby-identifier">headers</span>[<span class="ruby-value str">'WWW-Authenticate'</span>] = <span class="ruby-value str">'Basic realm=&quot;%s&quot;'</span> <span class="ruby-operator">%</span> <span class="ruby-ivar">@realm</span>
      <span class="ruby-value str">&quot;&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="username" type="Public" category="Instance" id="M000201">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The username provided in the request.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 150</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">username</span>
      <span class="ruby-identifier">provided?</span> <span class="ruby-value">? </span><span class="ruby-ivar">@auth</span>.<span class="ruby-identifier">credentials</span>.<span class="ruby-identifier">first</span> <span class="ruby-operator">:</span> <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Protected" category="Instance">


        <method name="authenticate_or_request" type="Protected" category="Instance" id="M000203">
          <parameters>(&amp;authenticator)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/authentication.rb, line 165</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">authenticate_or_request</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>)
      <span class="ruby-identifier">authenticate</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">authenticator</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">request</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::ControllerExceptions"

                         href="Merb::ControllerExceptions"

        />

      </included-module-list>

    </contents>

  </Class>

  <Module name="Merb::Const" id="Merb::Const">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37constants.rb">lib/merb-core/constants.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>




      <constant-list>

        <constant name="DEFAULT_SEND_FILE_OPTIONS">

          <value>{       :type         =&gt; 'application/octet-stream'.freeze,       :disposition  =&gt; 'attachment'.freeze     }.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="RACK_INPUT">

          <value>'rack.input'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="BINARY">

          <value>'binary'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SET_COOKIE">

          <value>&quot; %s=%s; path=/; expires=%s&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="COOKIE_EXPIRATION_FORMAT">

          <value>&quot;%a, %d-%b-%Y %H:%M:%S GMT&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="COOKIE_SPLIT">

          <value>/[;,] */n.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="COOKIE_REGEXP">

          <value>/\s*(.+)=(.*)\s*/.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="COOKIE_EXPIRED_TIME">

          <value>Time.at(0).freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HOUR">

          <value>60 * 60</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="DAY">

          <value>HOUR * 24</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="WEEK">

          <value>DAY * 7</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="MULTIPART_REGEXP">

          <value>/\Amultipart\/form-data.*boundary=\&quot;?([^\&quot;;,]+)/n.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_COOKIE">

          <value>'HTTP_COOKIE'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="QUERY_STRING">

          <value>'QUERY_STRING'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="JSON_MIME_TYPE_REGEXP">

          <value>%r{^application/json|^text/x-json}.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="XML_MIME_TYPE_REGEXP">

          <value>%r{^application/xml|^text/xml}.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="FORM_URL_ENCODED_REGEXP">

          <value>%r{^application/x-www-form-urlencoded}.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="LOCAL_IP_REGEXP">

          <value>/^unknown$|^(127|10|172\.16|192\.168)\./i.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="XML_HTTP_REQUEST_REGEXP">

          <value>/XMLHttpRequest/i.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="UPCASE_CONTENT_TYPE">

          <value>'CONTENT_TYPE'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CONTENT_TYPE">

          <value>&quot;Content-Type&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="DATE">

          <value>'Date'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="UPCASE_HTTPS">

          <value>'HTTPS'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTPS">

          <value>'https'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP">

          <value>'http'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="ETAG">

          <value>'ETag'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="LAST_MODIFIED">

          <value>&quot;Last-Modified&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="GET">

          <value>&quot;GET&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="POST">

          <value>&quot;POST&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HEAD">

          <value>&quot;HEAD&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CONTENT_LENGTH">

          <value>&quot;CONTENT_LENGTH&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CONTENT_DISPOSITION">

          <value>'Content-Disposition'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CONTENT_TRANSFER_ENCODING">

          <value>&quot;Content-Transfer-Encoding&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_CLIENT_IP">

          <value>&quot;HTTP_CLIENT_IP&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_X_REQUESTED_WITH">

          <value>&quot;HTTP_X_REQUESTED_WITH&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_X_FORWARDED_FOR">

          <value>&quot;HTTP_X_FORWARDED_FOR&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_X_FORWARDED_PROTO">

          <value>&quot;HTTP_X_FORWARDED_PROTO&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_X_FORWARDED_HOST">

          <value>&quot;HTTP_X_FORWARDED_HOST&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_IF_MODIFIED_SINCE">

          <value>&quot;HTTP_IF_MODIFIED_SINCE&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_IF_NONE_MATCH">

          <value>&quot;HTTP_IF_NONE_MATCH&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_CONTENT_TYPE">

          <value>&quot;HTTP_CONTENT_TYPE&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_CONTENT_LENGTH">

          <value>&quot;HTTP_CONTENT_LENGTH&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_REFERER">

          <value>&quot;HTTP_REFERER&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_USER_AGENT">

          <value>&quot;HTTP_USER_AGENT&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_HOST">

          <value>&quot;HTTP_HOST&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_CONNECTION">

          <value>&quot;HTTP_CONNECTION&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_KEEP_ALIVE">

          <value>&quot;HTTP_KEEP_ALIVE&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_ACCEPT">

          <value>&quot;HTTP_ACCEPT&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_ACCEPT_ENCODING">

          <value>&quot;HTTP_ACCEPT_ENCODING&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_ACCEPT_LANGUAGE">

          <value>&quot;HTTP_ACCEPT_LANGUAGE&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_ACCEPT_CHARSET">

          <value>&quot;HTTP_ACCEPT_CHARSET&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_CACHE_CONTROL">

          <value>&quot;HTTP_CACHE_CONTROL&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="UPLOAD_ID">

          <value>&quot;upload_id&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="PATH_INFO">

          <value>&quot;PATH_INFO&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="HTTP_VERSION">

          <value>&quot;HTTP_VERSION&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="GATEWAY_INTERFACE">

          <value>&quot;GATEWAY_INTERFACE&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SCRIPT_NAME">

          <value>&quot;SCRIPT_NAME&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SERVER_NAME">

          <value>&quot;SERVER_NAME&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SERVER_SOFTWARE">

          <value>&quot;SERVER_SOFTWARE&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SERVER_PROTOCOL">

          <value>&quot;SERVER_PROTOCOL&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SERVER_PORT">

          <value>&quot;SERVER_PORT&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="REQUEST_URI">

          <value>&quot;REQUEST_URI&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="REQUEST_PATH">

          <value>&quot;REQUEST_PATH&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="REQUEST_METHOD">

          <value>&quot;REQUEST_METHOD&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="REMOTE_ADDR">

          <value>&quot;REMOTE_ADDR&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="BREAK_TAG">

          <value>&quot;&lt;br/&gt;&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="EMPTY_STRING">

          <value>&quot;&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SPACE">

          <value>&quot; &quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="NEWLINE">

          <value>&quot;\n&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SLASH">

          <value>&quot;/&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="DOT">

          <value>&quot;.&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="QUESTION_MARK">

          <value>&quot;?&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="DOUBLE_NEWLINE">

          <value>&quot;\n\n&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="LOCATION">

          <value>&quot;Location&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="TEXT_SLASH_HTML">

          <value>&quot;text/html&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="X_ACCEL_REDIRECT">

          <value>'X-Accel-Redirect'.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="WIN_PLATFORM_REGEXP">

          <value>/(:?mswin|mingw|cygwin)/.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="JAVA_PLATFORM_REGEXP">

          <value>/java/.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>






    </contents>

  </Module>

  <Module name="Merb::Session" id="Merb::Session">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
The <a href="#Merb::Session">Merb::Session</a> module gets mixed into <a
href="#Merb::SessionContainer">Merb::SessionContainer</a> to allow
app-level functionality (usually found in ./merb/session/session.rb) for
session.
</p>
<p>
You can use this module to implement additional methods to simplify
building wizard-like application components, authentication frameworks,
etc.
</p>
<p>
<a href="#Merb::Session">Session</a> configuration options:
</p>
<p>
:session_id_key The key by which a session value/id is
</p>
<pre>
                          retrieved; defaults to _session_id
</pre>
<p>
:session_expiry When to expire the session cookie;
</p>
<pre>
                          by defaults session expires when browser quits.
</pre>
<p>
:session_secret_key A secret string which is used to sign/validate
</p>
<pre>
                          session data; min. 16 chars
</pre>
<p>
:default_cookie_domain The default domain to write cookies for.
</p>

    ]]></description>

    <contents>









    </contents>

  </Module>

  <Module name="Merb::ControllerExceptions" id="Merb::ControllerExceptions">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <pre>
    def admin_access_required
      render
    end
  end
</pre>
<p>
In app/views/exceptions/admin_access_required.rhtml
</p>
<pre>
  &lt;h1&gt;You're not an administrator!&lt;/h1&gt;
  &lt;p&gt;You tried to access &lt;%= @tried_to_access %&gt; but that URL is
  restricted to administrators.&lt;/p&gt;
</pre>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="STATUS_CODES">

          <value>{}</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>






    </contents>

  </Module>

  <Class name="Merb::ControllerExceptions::HTTPVersionNotSupported" id="Merb::ControllerExceptions::HTTPVersionNotSupported">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ServerError">Merb::ControllerExceptions::ServerError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Conflict" id="Merb::ControllerExceptions::Conflict">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::RequestTimeout" id="Merb::ControllerExceptions::RequestTimeout">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::MethodNotAllowed" id="Merb::ControllerExceptions::MethodNotAllowed">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ClientError" id="Merb::ControllerExceptions::ClientError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Base">Merb::ControllerExceptions::Base</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Created" id="Merb::ControllerExceptions::Created">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::BadGateway" id="Merb::ControllerExceptions::BadGateway">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ServerError">Merb::ControllerExceptions::ServerError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::UnsupportedMediaType" id="Merb::ControllerExceptions::UnsupportedMediaType">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::PartialContent" id="Merb::ControllerExceptions::PartialContent">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::NoContent" id="Merb::ControllerExceptions::NoContent">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::SwitchingProtocols" id="Merb::ControllerExceptions::SwitchingProtocols">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Informational">Merb::ControllerExceptions::Informational</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::RequestEntityTooLarge" id="Merb::ControllerExceptions::RequestEntityTooLarge">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::LayoutNotFound" id="Merb::ControllerExceptions::LayoutNotFound">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::NotFound">Merb::ControllerExceptions::NotFound</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ResetContent" id="Merb::ControllerExceptions::ResetContent">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::NonAuthoritativeInformation" id="Merb::ControllerExceptions::NonAuthoritativeInformation">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::NotImplemented" id="Merb::ControllerExceptions::NotImplemented">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ServerError">Merb::ControllerExceptions::ServerError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::RequestURITooLarge" id="Merb::ControllerExceptions::RequestURITooLarge">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Successful" id="Merb::ControllerExceptions::Successful">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Base">Merb::ControllerExceptions::Base</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ServiceUnavailable" id="Merb::ControllerExceptions::ServiceUnavailable">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ServerError">Merb::ControllerExceptions::ServerError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ServerError" id="Merb::ControllerExceptions::ServerError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Base">Merb::ControllerExceptions::Base</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ActionNotFound" id="Merb::ControllerExceptions::ActionNotFound">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::NotFound">Merb::ControllerExceptions::NotFound</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::PaymentRequired" id="Merb::ControllerExceptions::PaymentRequired">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::MultiPartParseError" id="Merb::ControllerExceptions::MultiPartParseError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::BadRequest">Merb::ControllerExceptions::BadRequest</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::MovedTemporarily" id="Merb::ControllerExceptions::MovedTemporarily">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Redirection" id="Merb::ControllerExceptions::Redirection">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Base">Merb::ControllerExceptions::Base</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Informational" id="Merb::ControllerExceptions::Informational">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Base">Merb::ControllerExceptions::Base</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::TemporaryRedirect" id="Merb::ControllerExceptions::TemporaryRedirect">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::MultipleChoices" id="Merb::ControllerExceptions::MultipleChoices">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::OK" id="Merb::ControllerExceptions::OK">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Base" id="Merb::ControllerExceptions::Base">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="inherited" type="Public" category="Class" id="M000210">
          <parameters>(subclass)</parameters>

          <description><![CDATA[
            <p>
Registers any subclasses with status codes for easy lookup by set_status in
<a href="#Merb::Controller">Merb::Controller</a>.
</p>
<p>
Inheritance ensures this method gets inherited by any subclasses, so it
goes all the way down the chain of inheritance.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">subclass&lt;Merb::ControllerExceptions::Base&gt;:</td><td>The <a href="#Exception">Exception</a> class that is inheriting from <a
href="#Merb::ControllerExceptions::Base">Merb::ControllerExceptions::Base</a>

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 219</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">inherited</span>(<span class="ruby-identifier">subclass</span>)
          <span class="ruby-comment cmt"># don't set the constant yet - any class methods will be called after self.inherited</span>
          <span class="ruby-comment cmt"># unless self.status = ... is set explicitly, the status code will be inherited</span>
          <span class="ruby-identifier">register_status_code</span>(<span class="ruby-identifier">subclass</span>, <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">status</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">status?</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status" type="Public" category="Class" id="M000206">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Gets the actual status-code for an <a href="#Exception">Exception</a>
class.
</p>
<p>
As usual, this can come from a constant upwards in the inheritance chain.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>The status code of this exception.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 174</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status</span>
          <span class="ruby-identifier">const_get</span>(<span class="ruby-identifier">:STATUS</span>) <span class="ruby-keyword kw">rescue</span> <span class="ruby-value">0</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status=" type="Public" category="Class" id="M000208">
          <parameters>(num)</parameters>

          <description><![CDATA[
            <p>
Sets the actual status-code for an <a href="#Exception">Exception</a>
class.
</p>
<p>
If possible, set the STATUS constant, and update any previously registered
(inherited) status-code.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">num&lt;~<a href="#M000205">to_i</a>&gt;:</td><td>The status code

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">(Integer, nil):</td><td>The status set on this exception, or nil if a status was already set.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 191</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status=</span>(<span class="ruby-identifier">num</span>)
          <span class="ruby-keyword kw">unless</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">status?</span>
            <span class="ruby-identifier">register_status_code</span>(<span class="ruby-keyword kw">self</span>, <span class="ruby-identifier">num</span>)
            <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">const_set</span>(<span class="ruby-identifier">:STATUS</span>, <span class="ruby-identifier">num</span>.<span class="ruby-identifier">to_i</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status?" type="Public" category="Class" id="M000209">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
See if a status-code has been defined (on self explicitly).
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>Whether a status code has been set

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 204</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status?</span>
          <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">const_defined?</span>(<span class="ruby-identifier">:STATUS</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="status" type="Public" category="Instance" id="M000204">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Integer:</td><td>The status-code of the error.

</td></tr>
</table>
<p>
@overridable :api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/exceptions.rb, line 160</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status</span>; <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">status</span>; <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_i" type="Public" category="Instance" id="M000205">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000204">status</a>
</p>
          ]]></description>


        </method>

        <method name="to_i" type="Public" category="Instance" id="M000207">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000204">status</a>
</p>
          ]]></description>


        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::GatewayTimeout" id="Merb::ControllerExceptions::GatewayTimeout">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ServerError">Merb::ControllerExceptions::ServerError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ExpectationFailed" id="Merb::ControllerExceptions::ExpectationFailed">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Forbidden" id="Merb::ControllerExceptions::Forbidden">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::UseProxy" id="Merb::ControllerExceptions::UseProxy">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::SeeOther" id="Merb::ControllerExceptions::SeeOther">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Accepted" id="Merb::ControllerExceptions::Accepted">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Successful">Merb::ControllerExceptions::Successful</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Continue" id="Merb::ControllerExceptions::Continue">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Informational">Merb::ControllerExceptions::Informational</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::InternalServerError" id="Merb::ControllerExceptions::InternalServerError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ServerError">Merb::ControllerExceptions::ServerError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::RequestRangeNotSatisfiable" id="Merb::ControllerExceptions::RequestRangeNotSatisfiable">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::NotFound" id="Merb::ControllerExceptions::NotFound">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::MovedPermanently" id="Merb::ControllerExceptions::MovedPermanently">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::LengthRequired" id="Merb::ControllerExceptions::LengthRequired">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Gone" id="Merb::ControllerExceptions::Gone">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::ProxyAuthenticationRequired" id="Merb::ControllerExceptions::ProxyAuthenticationRequired">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::TemplateNotFound" id="Merb::ControllerExceptions::TemplateNotFound">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::NotFound">Merb::ControllerExceptions::NotFound</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::Unauthorized" id="Merb::ControllerExceptions::Unauthorized">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::PreconditionFailed" id="Merb::ControllerExceptions::PreconditionFailed">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::NotAcceptable" id="Merb::ControllerExceptions::NotAcceptable">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::BadRequest" id="Merb::ControllerExceptions::BadRequest">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::ClientError">Merb::ControllerExceptions::ClientError</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::ControllerExceptions::NotModified" id="Merb::ControllerExceptions::NotModified">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37exceptions.rb">lib/merb-core/controller/exceptions.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::ControllerExceptions::Redirection">Merb::ControllerExceptions::Redirection</a></superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Module name="Merb::InlineTemplates" id="Merb::InlineTemplates">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37autoload.rb">lib/merb-core/autoload.rb</a></infile>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Merb::ControllerMixin" id="Merb::ControllerMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37controller.rb">lib/merb-core/controller/mixins/controller.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
Module that is mixed in to all implemented controllers.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="delete_cookie" type="Public" category="Instance" id="M000224">
          <parameters>(name)</parameters>

          <description><![CDATA[
            <p>
Marks a cookie as deleted and gives it an expires stamp in the past. This
method is used primarily internally in <a href="#Merb">Merb</a>.
</p>
<p>
Use the <tt>cookies</tt> hash to manipulate cookies instead.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;~to_s&gt;:</td><td>A name for the cookie to delete.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 322</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">delete_cookie</span>(<span class="ruby-identifier">name</span>)
      <span class="ruby-identifier">set_cookie</span>(<span class="ruby-identifier">name</span>, <span class="ruby-keyword kw">nil</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">COOKIE_EXPIRED_TIME</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="escape_html" type="Public" category="Instance" id="M000227">
          <parameters>(obj)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000225">escape_xml</a>
</p>
          ]]></description>


        </method>

        <method name="escape_xml" type="Public" category="Instance" id="M000225">
          <parameters>(obj)</parameters>

          <description><![CDATA[
            <p>
Escapes the string representation of <tt>obj</tt> and escapes it for use in
XML.
</p>
<h4>Parameter</h4>
<table>
<tr><td valign="top">obj&lt;~to_s&gt;:</td><td>The object to escape for use in XML.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The escaped object.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 335</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">escape_xml</span>(<span class="ruby-identifier">obj</span>)
      <span class="ruby-constant">Erubis</span><span class="ruby-operator">::</span><span class="ruby-constant">XmlHelper</span>.<span class="ruby-identifier">escape_xml</span>(<span class="ruby-identifier">obj</span>.<span class="ruby-identifier">to_s</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="h" type="Public" category="Instance" id="M000226">
          <parameters>(obj)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000225">escape_xml</a>
</p>
          ]]></description>


        </method>

        <method name="message" type="Public" category="Instance" id="M000217">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Retrieves the redirect message either locally or from the request.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 148</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">message</span>
      <span class="ruby-ivar">@_message</span> = <span class="ruby-keyword kw">defined?</span>(<span class="ruby-ivar">@_message</span>) <span class="ruby-operator">?</span> <span class="ruby-ivar">@_message</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">request</span>.<span class="ruby-identifier">message</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="message=" type="Public" category="Instance" id="M000218">
          <parameters>(message)</parameters>

          <description><![CDATA[
            <p>
Sets the redirect message for the current request, like flash.now in Rails.
</p>
<p>
@api public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 155</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">message=</span>(<span class="ruby-identifier">message</span>)
      <span class="ruby-ivar">@_message</span> = <span class="ruby-identifier">message</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="nginx_send_file" type="Public" category="Instance" id="M000222">
          <parameters>(path, content_type = Merb::Const::EMPTY_STRING)</parameters>

          <description><![CDATA[
            <p>
Uses the nginx specific <tt>X-Accel-Redirect</tt> header to send a file
directly from nginx.
</p>
<h4>Notes</h4>
<p>
Unless Content-Disposition is set before calling this method, it is set to
attachment with streamed file name.
</p>
<p>
For more information, see the nginx wiki: <a
href="http://wiki.codemongers.com/NginxXSendfile">wiki.codemongers.com/NginxXSendfile</a>
</p>
<p>
and the following sample gist: <a
href="http://gist.github.com/11225">gist.github.com/11225</a>
</p>
<p>
there&#8217;s also example application up on GitHub:
</p>
<p>
<a
href="http://github.com/michaelklishin/nginx-x-accel-redirect-example-application/tree/master">github.com/michaelklishin/nginx-x-accel-redirect-example-application/tree/master</a>
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>Path to file to send to the client.

</td></tr>
<tr><td valign="top">content_type&lt;String&gt;:</td><td>content type header value. By default is set to empty string to let Nginx
detect it.

</td></tr>
</table>
<h4>Return</h4>
<table>
<tr><td valign="top">String:</td><td>precisely a single space.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 288</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">nginx_send_file</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">content_type</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">EMPTY_STRING</span>)
      <span class="ruby-comment cmt"># Let Nginx detect content type unless it is explicitly set</span>
      <span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TYPE</span>]        = <span class="ruby-identifier">content_type</span>
      <span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_DISPOSITION</span>] <span class="ruby-operator">||=</span> <span class="ruby-node">&quot;attachment; filename=#{File.basename(path)}&quot;</span>
      <span class="ruby-comment cmt"># X-Accel-Redirect</span>
      <span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">X_ACCEL_REDIRECT</span>]    = <span class="ruby-identifier">path</span>
      
      <span class="ruby-keyword kw">return</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SPACE</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="redirect" type="Public" category="Instance" id="M000216">
          <parameters>(url, opts = {})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">url&lt;String&gt;:</td><td>URL to redirect to. It can be either a relative or fully-qualified URL.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>An options hash (see below)

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:message&lt;Hash&gt;:</td><td>Messages to pass in url query string as value for &quot;_message&quot;

</td></tr>
<tr><td valign="top">:permanent&lt;Boolean&gt;:</td><td>When true, return status 301 Moved Permanently

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Explanation of redirect.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  redirect(&quot;/posts/34&quot;)
  redirect(&quot;/posts/34&quot;, :message =&gt; { :notice =&gt; 'Post updated successfully!' })
  redirect(&quot;http://www.merbivore.com/&quot;)
  redirect(&quot;http://www.merbivore.com/&quot;, :permanent =&gt; true)
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 132</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">redirect</span>(<span class="ruby-identifier">url</span>, <span class="ruby-identifier">opts</span> = {})
      <span class="ruby-identifier">default_redirect_options</span> = { <span class="ruby-identifier">:message</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">:permanent</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span> }
      <span class="ruby-identifier">opts</span> = <span class="ruby-identifier">default_redirect_options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">opts</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:message</span>]
        <span class="ruby-identifier">notice</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">escape</span>([<span class="ruby-constant">Marshal</span>.<span class="ruby-identifier">dump</span>(<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:message</span>])].<span class="ruby-identifier">pack</span>(<span class="ruby-value str">&quot;m&quot;</span>))
        <span class="ruby-identifier">url</span> = <span class="ruby-identifier">url</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/\?/</span> <span class="ruby-operator">?</span> <span class="ruby-node">&quot;#{url}&amp;_message=#{notice}&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-node">&quot;#{url}?_message=#{notice}&quot;</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">status</span> = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:permanent</span>] <span class="ruby-operator">?</span> <span class="ruby-value">301</span> <span class="ruby-operator">:</span> <span class="ruby-value">302</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span>(<span class="ruby-node">&quot;Redirecting to: #{url} (#{self.status})&quot;</span>)
      <span class="ruby-identifier">headers</span>[<span class="ruby-value str">'Location'</span>] = <span class="ruby-identifier">url</span>
      <span class="ruby-node">&quot;&lt;html&gt;&lt;body&gt;You are being &lt;a href=\&quot;#{url}\&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="render_chunked" type="Public" category="Instance" id="M000212">
          <parameters>(&amp;blk)</parameters>

          <description><![CDATA[
            <p>
Renders the block given as a parameter using chunked encoding.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;blk:</td><td>A block that, when called, will use send_chunks to send chunks of data down
to the server. The chunking will terminate once the block returns.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  def stream
    prefix = '&lt;p&gt;'
    suffix = &quot;&lt;/p&gt;\r\n&quot;
    render_chunked do
      IO.popen(&quot;cat /tmp/test.log&quot;) do |io|
        done = false
        until done
          sleep 0.3
          line = io.gets.chomp

          if line == 'EOF'
            done = true
          else
            send_chunk(prefix + line + suffix)
          end
        end
      end
    end
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 50</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">render_chunked</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-identifier">must_support_streaming!</span>
      <span class="ruby-identifier">headers</span>[<span class="ruby-value str">'Transfer-Encoding'</span>] = <span class="ruby-value str">'chunked'</span>
      <span class="ruby-constant">Proc</span>.<span class="ruby-identifier">new</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">response</span><span class="ruby-operator">|</span>
        <span class="ruby-ivar">@response</span> = <span class="ruby-identifier">response</span>
        <span class="ruby-identifier">response</span>.<span class="ruby-identifier">send_status_no_connection_close</span>(<span class="ruby-value str">''</span>)
        <span class="ruby-identifier">response</span>.<span class="ruby-identifier">send_header</span>
        <span class="ruby-identifier">blk</span>.<span class="ruby-identifier">call</span>
        <span class="ruby-identifier">response</span>.<span class="ruby-identifier">write</span>(<span class="ruby-value str">&quot;0\r\n\r\n&quot;</span>)
      }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="render_deferred" type="Public" category="Instance" id="M000214">
          <parameters>(&amp;blk)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;blk:</td><td>A proc that should get called outside the mutex, and which will return the
value to render.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Proc:</td><td>A block that the server can call later, allowing <a href="#Merb">Merb</a>
to release the thread lock and render another request.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 86</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">render_deferred</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-constant">Proc</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">response</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">response</span>.<span class="ruby-identifier">write</span>(<span class="ruby-identifier">blk</span>.<span class="ruby-identifier">call</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="render_then_call" type="Public" category="Instance" id="M000215">
          <parameters>(str, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Renders the passed in string, then calls the block outside the mutex and
after the string has been returned to the client.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">str&lt;String&gt;:</td><td>A <tt>String</tt> to return to the client.

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>A block that should get called once the string has been returned.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Proc:</td><td>A block that <a href="#Mongrel">Mongrel</a> can call after returning the
string to the user.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 104</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">render_then_call</span>(<span class="ruby-identifier">str</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-constant">Proc</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">response</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">response</span>.<span class="ruby-identifier">write</span>(<span class="ruby-identifier">str</span>)
        <span class="ruby-identifier">blk</span>.<span class="ruby-identifier">call</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run_later" type="Public" category="Instance" id="M000211">
          <parameters>(&amp;blk)</parameters>

          <description><![CDATA[
            <p>
Enqueues a block to run in a background thread outside of the request
response dispatch.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;blk:</td><td>proc to run later

</td></tr>
</table>
<h4>Example</h4>
<p>
<a href="#M000211">run_later</a> do
</p>
<pre>
  SomeBackgroundTask.run
</pre>
<p>
end
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 17</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run_later</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">blk</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="send_chunk" type="Public" category="Instance" id="M000213">
          <parameters>(data)</parameters>

          <description><![CDATA[
            <p>
Writes a chunk from <tt><a href="#M000212">render_chunked</a></tt> to the
response that is sent back to the client. This should only be called within
a <tt><a href="#M000212">render_chunked</a></tt> block.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">data&lt;String&gt;:</td><td>a chunk of data to return.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 69</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">send_chunk</span>(<span class="ruby-identifier">data</span>)
      <span class="ruby-identifier">only_runs_on_mongrel!</span>
      <span class="ruby-ivar">@response</span>.<span class="ruby-identifier">write</span>(<span class="ruby-value str">'%x'</span> <span class="ruby-operator">%</span> <span class="ruby-identifier">data</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;\r\n&quot;</span>)
      <span class="ruby-ivar">@response</span>.<span class="ruby-identifier">write</span>(<span class="ruby-identifier">data</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;\r\n&quot;</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="send_data" type="Public" category="Instance" id="M000220">
          <parameters>(data, opts={})</parameters>

          <description><![CDATA[
            <p>
Sends binary data over HTTP to the user as a file download. May set content
type, apparent file name, and specify whether to show data inline or
download as an attachment.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">data&lt;String&gt;:</td><td>Path to file to send to the client.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Options for sending the data (see below).

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:disposition&lt;String&gt;:</td><td>The disposition of the file send. Defaults to &quot;attachment&quot;.

</td></tr>
<tr><td valign="top">:filename&lt;String&gt;:</td><td>The name to use for the file. Defaults to the filename of file.

</td></tr>
<tr><td valign="top">:type&lt;String&gt;:</td><td>The content type.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 210</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">send_data</span>(<span class="ruby-identifier">data</span>, <span class="ruby-identifier">opts</span>={})
      <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">update</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DEFAULT_SEND_FILE_OPTIONS</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">opts</span>))
      <span class="ruby-identifier">disposition</span> = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:disposition</span>].<span class="ruby-identifier">dup</span> <span class="ruby-operator">||</span> <span class="ruby-constant">DEFAULT_SEND_FILE_OPTIONS</span>[<span class="ruby-identifier">:disposition</span>]
      <span class="ruby-identifier">disposition</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">%(; filename=&quot;#{opts[:filename]}&quot;)</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:filename</span>]
      <span class="ruby-identifier">headers</span>.<span class="ruby-identifier">update</span>(
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TYPE</span>              =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:type</span>].<span class="ruby-identifier">strip</span>,  <span class="ruby-comment cmt"># fixes a problem with extra '\r' with some browsers</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_DISPOSITION</span>       =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">disposition</span>,
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TRANSFER_ENCODING</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">BINARY</span>
      )
      <span class="ruby-identifier">data</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="send_file" type="Public" category="Instance" id="M000219">
          <parameters>(file, opts={})</parameters>

          <description><![CDATA[
            <p>
Sends a file over HTTP. When given a path to a file, it will set the right
headers so that the static file is served directly.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">file&lt;String&gt;:</td><td>Path to file to send to the client.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Options for sending the file (see below).

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:disposition&lt;String&gt;:</td><td>The disposition of the file send. Defaults to &quot;attachment&quot;.

</td></tr>
<tr><td valign="top">:filename&lt;String&gt;:</td><td>The name to use for the file. Defaults to the filename of file.

</td></tr>
<tr><td valign="top">:type&lt;String&gt;:</td><td>The content type.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">IO:</td><td>An I/O stream for the file.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 177</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">send_file</span>(<span class="ruby-identifier">file</span>, <span class="ruby-identifier">opts</span>={})
      <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">update</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DEFAULT_SEND_FILE_OPTIONS</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">opts</span>))
      <span class="ruby-identifier">disposition</span> = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:disposition</span>].<span class="ruby-identifier">dup</span> <span class="ruby-operator">||</span> <span class="ruby-constant">DEFAULT_SEND_FILE_OPTIONS</span>[<span class="ruby-identifier">:disposition</span>]
      <span class="ruby-identifier">disposition</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">%(; filename=&quot;#{opts[:filename] ? opts[:filename] : File.basename(file)}&quot;)</span>
      <span class="ruby-identifier">headers</span>.<span class="ruby-identifier">update</span>(
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TYPE</span>              =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:type</span>].<span class="ruby-identifier">strip</span>,  <span class="ruby-comment cmt"># fixes a problem with extra '\r' with some browsers</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_DISPOSITION</span>       =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">disposition</span>,
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TRANSFER_ENCODING</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">BINARY</span>
      )
      <span class="ruby-constant">Proc</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">response</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">file</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">file</span>, <span class="ruby-value str">'rb'</span>)
        <span class="ruby-keyword kw">while</span> <span class="ruby-identifier">chunk</span> = <span class="ruby-identifier">file</span>.<span class="ruby-identifier">read</span>(<span class="ruby-value">16384</span>)
          <span class="ruby-identifier">response</span>.<span class="ruby-identifier">write</span> <span class="ruby-identifier">chunk</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">file</span>.<span class="ruby-identifier">close</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="set_cookie" type="Public" category="Instance" id="M000223">
          <parameters>(name, value, expires)</parameters>

          <description><![CDATA[
            <p>
Sets a cookie to be included in the response.
</p>
<p>
If you need to set a cookie, then use the <tt>cookies</tt> hash.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;~to_s&gt;:</td><td>A name for the cookie.

</td></tr>
<tr><td valign="top">value&lt;~to_s&gt;:</td><td>A value for the cookie.

</td></tr>
<tr><td valign="top">expires&lt;~gmtime:~strftime, Hash&gt;:</td><td>An expiration time for the cookie, or a hash of cookie options.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 308</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">set_cookie</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">value</span>, <span class="ruby-identifier">expires</span>)
      <span class="ruby-identifier">options</span> = <span class="ruby-identifier">expires</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">expires</span> <span class="ruby-operator">:</span> {<span class="ruby-identifier">:expires</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">expires</span>}
      <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">set_cookie</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">value</span>, <span class="ruby-identifier">options</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="stream_file" type="Public" category="Instance" id="M000221">
          <parameters>(opts={}, &amp;stream)</parameters>

          <description><![CDATA[
            <p>
Streams a file over HTTP.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Options for the file streaming (see below).

</td></tr>
<tr><td valign="top">&amp;stream:</td><td>A block that, when called, will return an object that responds to
<tt>get_lines</tt> for streaming.

</td></tr>
</table>
<h4>Options</h4>
<table>
<tr><td valign="top">:disposition&lt;String&gt;:</td><td>The disposition of the file send. Defaults to &quot;attachment&quot;.

</td></tr>
<tr><td valign="top">:type&lt;String&gt;:</td><td>The content type.

</td></tr>
<tr><td valign="top">:content_length&lt;Numeric&gt;:</td><td>The length of the content to send.

</td></tr>
<tr><td valign="top">:filename&lt;String&gt;:</td><td>The name to use for the streamed file.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  stream_file({ :filename =&gt; file_name, :type =&gt; content_type,
    :content_length =&gt; content_length }) do |response|
    AWS::S3::S3Object.stream(user.folder_name + &quot;-&quot; + user_file.unique_id, bucket_name) do |chunk|
      response.write chunk
    end
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/controller.rb, line 246</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">stream_file</span>(<span class="ruby-identifier">opts</span>={}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">stream</span>)
      <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">update</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DEFAULT_SEND_FILE_OPTIONS</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">opts</span>))
      <span class="ruby-identifier">disposition</span> = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:disposition</span>].<span class="ruby-identifier">dup</span> <span class="ruby-operator">||</span> <span class="ruby-constant">DEFAULT_SEND_FILE_OPTIONS</span>[<span class="ruby-identifier">:disposition</span>]
      <span class="ruby-identifier">disposition</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">%(; filename=&quot;#{opts[:filename]}&quot;)</span>
      <span class="ruby-identifier">headers</span>.<span class="ruby-identifier">update</span>(
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TYPE</span>              =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:type</span>].<span class="ruby-identifier">strip</span>,  <span class="ruby-comment cmt"># fixes a problem with extra '\r' with some browsers</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_DISPOSITION</span>       =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">disposition</span>,
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_TRANSFER_ENCODING</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">BINARY</span>,
        <span class="ruby-comment cmt"># Rack specification requires header values to respond to :each</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_LENGTH</span>            =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:content_length</span>].<span class="ruby-identifier">to_s</span>
      )
      <span class="ruby-constant">Proc</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">response</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">stream</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">response</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::ConditionalGetMixin" id="Merb::ConditionalGetMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37conditional_get.rb">lib/merb-core/controller/mixins/conditional_get.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
Provides conditional get support in <a href="#Merb">Merb</a> core.
Conditional get support is intentionally simple and does not do fancy stuff
like making ETag value from Ruby objects for you.
</p>
<p>
The most interesting method for end user is <tt>request_fresh?</tt> that is
used after setting of last modification time or ETag:
</p>
<h4>Example</h4>
<p>
def show
</p>
<pre>
  self.etag = Digest::SHA1.hexdigest(calculate_cache_key(params))

  if request_fresh?
    self.status = 304
    return ''
  else
    @product = Product.get(params[:id])
    display @product
  end
</pre>
<p>
end
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="etag" type="Public" category="Instance" id="M000229">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">&lt;String&gt;:</td><td>Value of ETag response header or nil if it&#8217;s not set.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 43</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">etag</span>
    <span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">ETAG</span>]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="etag=" type="Public" category="Instance" id="M000228">
          <parameters>(tag)</parameters>

          <description><![CDATA[
            <p>
Sets ETag response header by calling to_s on the argument.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">tag&lt;~to_s&gt;:</td><td>value of ETag header enclosed in double quotes as required by the RFC

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 34</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">etag=</span>(<span class="ruby-identifier">tag</span>)
    <span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">ETAG</span>] = <span class="ruby-node">%(&quot;#{tag}&quot;)</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="etag_matches?" type="Public" category="Instance" id="M000230">
          <parameters>(tag = self.etag)</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<p>
&lt;Boolean&gt;:: true if ETag response header equals If-None-Match request
header, false otherwise
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 53</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">etag_matches?</span>(<span class="ruby-identifier">tag</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">etag</span>)
    <span class="ruby-identifier">tag</span> <span class="ruby-operator">==</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">if_none_match</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="last_modified" type="Public" category="Instance" id="M000232">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">&lt;String&gt;:</td><td>Value of Last-Modified response header or nil if it&#8217;s not set.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 74</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">last_modified</span>
    <span class="ruby-constant">Time</span>.<span class="ruby-identifier">rfc2822</span>(<span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">LAST_MODIFIED</span>])
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="last_modified=" type="Public" category="Instance" id="M000231">
          <parameters>(time)</parameters>

          <description><![CDATA[
            <p>
Sets Last-Modified response header.
</p>
<h4>Parameters</h4>
<p>
tag&lt;Time&gt;:: resource modification timestamp converted into format
required by the RFC
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 65</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">last_modified=</span>(<span class="ruby-identifier">time</span>)
    <span class="ruby-identifier">headers</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">LAST_MODIFIED</span>] = <span class="ruby-identifier">time</span>.<span class="ruby-identifier">httpdate</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="not_modified?" type="Public" category="Instance" id="M000233">
          <parameters>(time = self.last_modified)</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<p>
&lt;Boolean&gt;:: true if Last-Modified response header is &lt; than
If-Modified-Since request header value, false otherwise.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 84</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">not_modified?</span>(<span class="ruby-identifier">time</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">last_modified</span>)
    <span class="ruby-identifier">request</span>.<span class="ruby-identifier">if_modified_since</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">time</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">time</span> <span class="ruby-operator">&lt;=</span> <span class="ruby-identifier">request</span>.<span class="ruby-identifier">if_modified_since</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="request_fresh?" type="Public" category="Instance" id="M000234">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<p>
&lt;Boolean&gt;:: true if either ETag matches or entity is not modified, so
request is fresh; false otherwise
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/conditional_get.rb, line 94</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">request_fresh?</span>
    <span class="ruby-identifier">etag_matches?</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">etag</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">not_modified?</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">last_modified</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Test" id="Merb::Test">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37controller_helper.rb">lib/merb-core/test/helpers/controller_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37cookie_jar.rb">lib/merb-core/test/helpers/cookie_jar.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37mock_request_helper.rb">lib/merb-core/test/helpers/mock_request_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37request_helper.rb">lib/merb-core/test/helpers/request_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37route_helper.rb">lib/merb-core/test/helpers/route_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

        <infile><a href="#lib37merb-core37test.rb">lib/merb-core/test.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="add_helpers" type="Public" category="Class" id="M000235">
          <parameters>(&amp;block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 31</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">add_helpers</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">test_framework</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:rspec</span>
        <span class="ruby-constant">ExampleGroup</span>.<span class="ruby-identifier">class_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotImplementedError</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Test::ViewHelper" id="Merb::Test::ViewHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers.rb">lib/merb-core/test/matchers.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









      <included-module-list>

        <included-module name="::Webrat::Matchers"

        />

        <included-module name="::Webrat::HaveTagMatcher"

        />

      </included-module-list>

    </contents>

  </Module>

  <Module name="Merb::Test::MakeRequest" id="Merb::Test::MakeRequest">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37request_helper.rb">lib/merb-core/test/helpers/request_helper.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="request" type="Public" category="Instance" id="M000236">
          <parameters>(uri, env = {})</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/request_helper.rb, line 7</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">request</span>(<span class="ruby-identifier">uri</span>, <span class="ruby-identifier">env</span> = {})
        <span class="ruby-identifier">uri</span> = <span class="ruby-identifier">url</span>(<span class="ruby-identifier">uri</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Symbol</span>)
        <span class="ruby-identifier">uri</span> = <span class="ruby-constant">URI</span>(<span class="ruby-identifier">uri</span>)
        <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">scheme</span> <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;http&quot;</span>
        <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">host</span>   <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;example.org&quot;</span>

        <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">env</span>[<span class="ruby-identifier">:method</span>] <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;POST&quot;</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">env</span>[<span class="ruby-value str">&quot;REQUEST_METHOD&quot;</span>] <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;POST&quot;</span>)
          <span class="ruby-identifier">params</span> = <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:body_params</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:body_params</span>)
          <span class="ruby-identifier">params</span> = <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:params</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:params</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">env</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:input</span>)

          <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">env</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:input</span>)
            <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:input</span>] = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">params_to_query_string</span>(<span class="ruby-identifier">params</span>)
            <span class="ruby-identifier">env</span>[<span class="ruby-value str">&quot;CONTENT_TYPE&quot;</span>] = <span class="ruby-value str">&quot;application/x-www-form-urlencoded&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:params</span>]
          <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">query</span> = [
            <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">query</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">params_to_query_string</span>(<span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:params</span>))
          ].<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;&amp;&quot;</span>)
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">ignore_cookies</span> = <span class="ruby-identifier">env</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">:jar</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:jar</span>].<span class="ruby-identifier">nil?</span>

        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">ignore_cookies</span>
          <span class="ruby-comment cmt"># Setup a default cookie jar container</span>
          <span class="ruby-ivar">@__cookie_jar__</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Test</span><span class="ruby-operator">::</span><span class="ruby-constant">CookieJar</span>.<span class="ruby-identifier">new</span>
          <span class="ruby-comment cmt"># Grab the cookie group name</span>
          <span class="ruby-identifier">jar</span> = <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:jar</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">:default</span>
          <span class="ruby-comment cmt"># Set the cookie header with the cookies</span>
          <span class="ruby-identifier">env</span>[<span class="ruby-value str">&quot;HTTP_COOKIE&quot;</span>] = <span class="ruby-ivar">@__cookie_jar__</span>.<span class="ruby-identifier">for</span>(<span class="ruby-identifier">jar</span>, <span class="ruby-identifier">uri</span>)
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">app</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Application</span>.<span class="ruby-identifier">new</span>
        <span class="ruby-identifier">rack</span> = <span class="ruby-identifier">app</span>.<span class="ruby-identifier">call</span>(<span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">MockRequest</span>.<span class="ruby-identifier">env_for</span>(<span class="ruby-identifier">uri</span>.<span class="ruby-identifier">to_s</span>, <span class="ruby-identifier">env</span>))

        <span class="ruby-identifier">rack</span> = <span class="ruby-constant">Struct</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">:status</span>, <span class="ruby-identifier">:headers</span>, <span class="ruby-identifier">:body</span>, <span class="ruby-identifier">:url</span>, <span class="ruby-identifier">:original_env</span>).
          <span class="ruby-identifier">new</span>(<span class="ruby-identifier">rack</span>[<span class="ruby-value">0</span>], <span class="ruby-identifier">rack</span>[<span class="ruby-value">1</span>], <span class="ruby-identifier">rack</span>[<span class="ruby-value">2</span>], <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">to_s</span>, <span class="ruby-identifier">env</span>)
          
        <span class="ruby-ivar">@__cookie_jar__</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">jar</span>, <span class="ruby-identifier">uri</span>, <span class="ruby-identifier">rack</span>.<span class="ruby-identifier">headers</span>[<span class="ruby-value str">&quot;Set-Cookie&quot;</span>]) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">ignore_cookies</span>

        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span>.<span class="ruby-identifier">size</span>.<span class="ruby-identifier">times</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span>.<span class="ruby-identifier">pop</span>.<span class="ruby-identifier">call</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-identifier">rack</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Test::ControllerHelper" id="Merb::Test::ControllerHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37controller_helper.rb">lib/merb-core/test/helpers/controller_helper.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









      <included-module-list>

        <included-module name="RequestHelper"

                         href="Merb::Test::RequestHelper"

        />

        <included-module name="MultipartRequestHelper"

                         href="Merb::Test::MultipartRequestHelper"

        />

      </included-module-list>

    </contents>

  </Module>

  <Module name="Merb::Test::Matchers" id="Merb::Test::Matchers">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Merb::Test::Helpers" id="Merb::Test::Helpers">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers.rb">lib/merb-core/test/helpers.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
This is a place holder to allow plugins etc a place to include testing
helpers
</p>

    ]]></description>

    <contents>









    </contents>

  </Module>

  <Module name="Merb::Test::RouteHelper" id="Merb::Test::RouteHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37route_helper.rb">lib/merb-core/test/helpers/route_helper.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="request_to" type="Public" category="Instance" id="M000239">
          <parameters>(path, method = :get, env = {})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;~to_string&gt;:</td><td>The URL of the request.

</td></tr>
<tr><td valign="top">method&lt;~to_sym&gt;:</td><td>HTTP request method.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>Additional parameters for the request.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>A hash containing the controller and action along with any parameters

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/route_helper.rb, line 85</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">request_to</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">method</span> = <span class="ruby-identifier">:get</span>, <span class="ruby-identifier">env</span> = {})
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">method</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">upcase</span>
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_uri</span>] = <span class="ruby-identifier">path</span>
        
        <span class="ruby-identifier">check_request_for_route</span>(<span class="ruby-identifier">build_request</span>({}, <span class="ruby-identifier">env</span>))
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="resource" type="Public" category="Instance" id="M000238">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Mimics the resource method available to controllers
</p>
<h4>Paramaters</h4>
<table>
<tr><td valign="top">resources&lt;Object&gt;:</td><td>The resources to generate URLs from

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>Any extra parameters that are required.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/route_helper.rb, line 73</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-ivar">@request_params</span> <span class="ruby-operator">||</span> {}
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="url" type="Public" category="Instance" id="M000237">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
There are three possible ways to use this method. First, if you have a
named route, you can specify the route as the first parameter as a symbol
and any paramters in a hash. Second, you can generate the default route by
just passing the params hash, just passing the params hash. Finally, you
can use the anonymous parameters. This allows you to specify the parameters
to a named route in the order they appear in the router.
</p>
<h4>Parameters(Named Route)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation.

</td></tr>
</table>
<h4>Parameters(Default Route)</h4>
<table>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation. This route will use the default route.

</td></tr>
</table>
<h4>Parameters(Anonymous Parameters)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Array&gt;:</td><td>An array of anonymous parameters to generate the route with. These
parameters are assigned to the route parameters in the order that they are
passed.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Named Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, :title =&gt; &quot;new_article&quot;)
</p>
<p>
Default Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  default_routes
</pre>
<p>
end
</p>
<p>
url(:controller =&gt; &quot;articles&quot;, :action =&gt; &quot;new&quot;)
</p>
<p>
Anonymous Paramters
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:year/:month/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, 2008, 10, &quot;test_article&quot;)
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/route_helper.rb, line 60</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">url</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> (<span class="ruby-ivar">@request_params</span> <span class="ruby-operator">||</span> {})
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">url</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="RequestHelper"

                         href="Merb::Test::RequestHelper"

        />

      </included-module-list>

    </contents>

  </Module>

  <Module name="Merb::Test::Rspec" id="Merb::Test::Rspec">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers.rb">lib/merb-core/test/matchers.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Module name="Merb::Test::Rspec::ControllerMatchers" id="Merb::Test::Rspec::ControllerMatchers">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37controller_matchers.rb">lib/merb-core/test/matchers/controller_matchers.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="be_error" type="Public" category="Instance" id="M000240">
          <parameters>(expected)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 55</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">be_error</span>(<span class="ruby-identifier">expected</span>)
    <span class="ruby-constant">BeError</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">expected</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="provide" type="Public" category="Instance" id="M000241">
          <parameters>( expected )</parameters>

          <description><![CDATA[
            <p>
Passes if the controller actually provides the target format
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">expected&lt;Symbol&gt;:</td><td>A format to check

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  ControllerClass.should provide( :html )
  controller_instance.should provide( :xml )
</pre>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 105</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">provide</span>( <span class="ruby-identifier">expected</span> )
    <span class="ruby-constant">Provide</span>.<span class="ruby-identifier">new</span>( <span class="ruby-identifier">expected</span> )
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::Test::Rspec::ControllerMatchers::Provide" id="Merb::Test::Rspec::ControllerMatchers::Provide">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37controller_matchers.rb">lib/merb-core/test/matchers/controller_matchers.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000242">
          <parameters>(expected)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">expected&lt;Symbol&gt;:</td><td>A format to check

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 63</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">expected</span>)
      <span class="ruby-ivar">@expected</span> = <span class="ruby-identifier">expected</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="failure_message" type="Public" category="Instance" id="M000244">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 80</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
      <span class="ruby-node">&quot;expected #{@target.name} to provide #{@expected}, but it doesn't&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000243">
          <parameters>(target)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">target&lt;Symbol&gt;:</td><td>A ControllerClass or controller_instance

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the formats provided by the target controller/class include the
expected

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 73</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">target</span>)
      <span class="ruby-ivar">@target</span> = <span class="ruby-identifier">target</span>
      <span class="ruby-identifier">provided_formats</span>.<span class="ruby-identifier">include?</span>( <span class="ruby-ivar">@expected</span> )
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Instance" id="M000245">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message to be displayed in negative matches.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 86</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
      <span class="ruby-node">&quot;expected #{@target.name} not to provide #{@expected}, but it does&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="provided_formats" type="Public" category="Instance" id="M000246">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Array[Symbol]:</td><td>The formats the expected provides

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 92</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">provided_formats</span>
      <span class="ruby-ivar">@target</span>.<span class="ruby-identifier">class_provided_formats</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::Rspec::ControllerMatchers::BeError" id="Merb::Test::Rspec::ControllerMatchers::BeError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37controller_matchers.rb">lib/merb-core/test/matchers/controller_matchers.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000247">
          <parameters>(expected)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 35</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">expected</span>)
      <span class="ruby-ivar">@expected</span> = <span class="ruby-identifier">expected</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="failure_message" type="Public" category="Instance" id="M000249">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 45</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
      <span class="ruby-node">&quot;expected #{@target} to be a #{@expected} error, but it was &quot;</span> <span class="ruby-operator">&lt;&lt;</span> 
        <span class="ruby-ivar">@target</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">exceptions</span>.<span class="ruby-identifier">first</span>.<span class="ruby-identifier">inspect</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000248">
          <parameters>(target)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 39</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">target</span>)
      <span class="ruby-ivar">@target</span> = <span class="ruby-identifier">target</span>
      <span class="ruby-ivar">@target</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">exceptions</span> <span class="ruby-operator">&amp;&amp;</span>
        <span class="ruby-ivar">@target</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">exceptions</span>.<span class="ruby-identifier">first</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-ivar">@expected</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Instance" id="M000250">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 50</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
      <span class="ruby-node">&quot;expected #{@target} not to be a #{@expected} error, but it was&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::Rspec::ControllerMatchers::BeRedirect" id="Merb::Test::Rspec::ControllerMatchers::BeRedirect">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37controller_matchers.rb">lib/merb-core/test/matchers/controller_matchers.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="failure_message" type="Public" category="Instance" id="M000252">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 17</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
      <span class="ruby-node">&quot;expected#{inspect_target} to redirect&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="inspect_target" type="Public" category="Instance" id="M000254">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The controller and action name.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 29</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">inspect_target</span>
      <span class="ruby-node">&quot; #{@target.controller_name}##{@target.action_name}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@target</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:controller_name</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-ivar">@target</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:action_name</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000251">
          <parameters>(target)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">target&lt;Fixnum, ~status&gt;:</td><td>Either the status code or a controller with a status code.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the status code is in the range 300..305 or 307.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 10</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">target</span>)
      <span class="ruby-ivar">@target</span> = <span class="ruby-identifier">target</span>
      [<span class="ruby-value">307</span>, <span class="ruby-operator">*</span>(<span class="ruby-value">300</span><span class="ruby-operator">..</span><span class="ruby-value">305</span>)].<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">target</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:status</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">target</span>.<span class="ruby-identifier">status</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">target</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Instance" id="M000253">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message to be displayed in negative matches.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/controller_matchers.rb, line 23</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
      <span class="ruby-node">&quot;expected#{inspect_target} not to redirect&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::Test::Rspec::RouteMatchers" id="Merb::Test::Rspec::RouteMatchers">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37route_matchers.rb">lib/merb-core/test/matchers/route_matchers.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="route_to" type="Public" category="Instance" id="M000255">
          <parameters>(klass_or_name, action)</parameters>

          <description><![CDATA[
            <p>
Passes when the actual route parameters match the expected controller class
and controller action. Exposes a <tt>with</tt> method for specifying
parameters.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">klass_or_name&lt;Class, String&gt;:</td><td>The controller class or class name to match routes for.

</td></tr>
<tr><td valign="top">action&lt;~to_s&gt;:</td><td>The name of the action to match routes for.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  # Passes if a GET request to &quot;/&quot; is routed to the Widgets controller's
  # index action.
  request_to(&quot;/&quot;, :get).should route_to(Widgets, :index)

  # Use the 'with' method for parameter checks
  request_to(&quot;/123&quot;).should route_to(widgets, :show).with(:id =&gt; &quot;123&quot;)
</pre>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 134</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">route_to</span>(<span class="ruby-identifier">klass_or_name</span>, <span class="ruby-identifier">action</span>)
    <span class="ruby-constant">RouteToMatcher</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">klass_or_name</span>, <span class="ruby-identifier">action</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::Test::Rspec::RouteMatchers::RouteToMatcher" id="Merb::Test::Rspec::RouteMatchers::RouteToMatcher">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37route_matchers.rb">lib/merb-core/test/matchers/route_matchers.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000256">
          <parameters>(klass_or_name, action)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">klass_or_name&lt;Class, String&gt;:</td><td>The controller class or class name to match routes for.

</td></tr>
<tr><td valign="top">action&lt;~to_s&gt;:</td><td>The name of the action to match routes for.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 9</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">klass_or_name</span>, <span class="ruby-identifier">action</span>)
      <span class="ruby-ivar">@expected_controller</span> = <span class="ruby-constant">Class</span> <span class="ruby-operator">===</span> <span class="ruby-identifier">klass_or_name</span> <span class="ruby-value">? </span><span class="ruby-identifier">klass_or_name</span>.<span class="ruby-identifier">name</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">klass_or_name</span>
      <span class="ruby-ivar">@expected_action</span> = <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="actual_parameters_message" type="Public" category="Instance" id="M000263">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 72</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">actual_parameters_message</span>
      <span class="ruby-node">&quot; with #{(@parameter_matcher.actual || {}).inspect}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@parameter_matcher</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="expected_parameters_message" type="Public" category="Instance" id="M000262">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 68</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">expected_parameters_message</span>
      <span class="ruby-node">&quot; with #{@parameter_matcher.expected.inspect}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@parameter_matcher</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="failure_message" type="Public" category="Instance" id="M000260">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 58</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
      <span class="ruby-node">&quot;expected the request to route to #{@expected_controller.to_const_string}##{@expected_action}#{expected_parameters_message}, but was #{@target_controller.to_const_string}##{@target_action}#{actual_parameters_message}&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="match_parameters" type="Public" category="Instance" id="M000258">
          <parameters>(target)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">target&lt;Hash&gt;:</td><td>The route parameters to match.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the parameter matcher created with <a href="#M000259">with</a>
matches or if no parameter matcher exists.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 35</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">match_parameters</span>(<span class="ruby-identifier">target</span>)
      <span class="ruby-ivar">@parameter_matcher</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-value">? </span><span class="ruby-keyword kw">true</span> <span class="ruby-operator">:</span> <span class="ruby-ivar">@parameter_matcher</span>.<span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">target</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000257">
          <parameters>(target)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">target&lt;Hash&gt;:</td><td>The route parameters to match.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the controller action and parameters match.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 19</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">target</span>)
      <span class="ruby-ivar">@target_env</span> = <span class="ruby-identifier">target</span>.<span class="ruby-identifier">dup</span>
      <span class="ruby-ivar">@target_controller</span>, <span class="ruby-ivar">@target_action</span> = <span class="ruby-ivar">@target_env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:controller</span>).<span class="ruby-identifier">to_s</span>, <span class="ruby-ivar">@target_env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:action</span>).<span class="ruby-identifier">to_s</span>

      <span class="ruby-ivar">@target_controller</span> = <span class="ruby-node">&quot;#{target.delete(:namespace)}::#{@target_controller}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">target</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">:namespace</span>)

      <span class="ruby-ivar">@expected_controller</span>.<span class="ruby-identifier">snake_case</span> <span class="ruby-operator">==</span> <span class="ruby-ivar">@target_controller</span>.<span class="ruby-identifier">snake_case</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-ivar">@expected_action</span> <span class="ruby-operator">==</span> <span class="ruby-ivar">@target_action</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">match_parameters</span>(<span class="ruby-ivar">@target_env</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Instance" id="M000261">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message to be displayed in negative matches.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 64</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
      <span class="ruby-node">&quot;expected the request not to route to #{@expected_controller.camel_case}##{@expected_action}#{expected_parameters_message}, but it did&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="with" type="Public" category="Instance" id="M000259">
          <parameters>(parameters)</parameters>

          <description><![CDATA[
            <p>
Creates a new paramter matcher.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">parameters&lt;<a href="#Hash">Hash</a>, ~to_param&gt;:</td><td>The parameters to match.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">RouteToMatcher:</td><td>This matcher.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If parameters is an object, then a new expected hash will be constructed
with the key :id set to parameters.to_param.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 50</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">with</span>(<span class="ruby-identifier">parameters</span>)
      <span class="ruby-ivar">@parameter_matcher</span> = <span class="ruby-constant">ParameterMatcher</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">parameters</span>)

      <span class="ruby-keyword kw">self</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::Rspec::RouteMatchers::ParameterMatcher" id="Merb::Test::Rspec::RouteMatchers::ParameterMatcher">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37matchers37route_matchers.rb">lib/merb-core/test/matchers/route_matchers.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="actual">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="expected">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000264">
          <parameters>(hash_or_object)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">hash_or_object&lt;<a href="#Hash">Hash</a>, ~to_param&gt;:</td><td>The parameters to match.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If hash_or_object is an object, then a new expected hash will be
constructed with the key :id set to hash_or_object.to_param.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 86</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">hash_or_object</span>)
      <span class="ruby-ivar">@expected</span> = {}
      <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">hash_or_object</span>
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Hash</span> <span class="ruby-keyword kw">then</span> <span class="ruby-ivar">@expected</span> = <span class="ruby-identifier">hash_or_object</span>
      <span class="ruby-keyword kw">else</span> <span class="ruby-ivar">@expected</span>[<span class="ruby-identifier">:id</span>] = <span class="ruby-identifier">hash_or_object</span>.<span class="ruby-identifier">to_param</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="failure_message" type="Public" category="Instance" id="M000266">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 108</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failure_message</span>
      <span class="ruby-node">&quot;expected the route to contain parameters #{@expected.inspect}, but instead contained #{@actual.inspect}&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000265">
          <parameters>(parameter_hash)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">parameter_hash&lt;Hash&gt;:</td><td>The route parameters to match.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the route parameters match the expected ones.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 99</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">parameter_hash</span>)
      <span class="ruby-ivar">@actual</span> = <span class="ruby-identifier">parameter_hash</span>.<span class="ruby-identifier">dup</span>.<span class="ruby-identifier">except</span>(<span class="ruby-identifier">:controller</span>, <span class="ruby-identifier">:action</span>)

      <span class="ruby-keyword kw">return</span> <span class="ruby-ivar">@actual</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@expected</span>.<span class="ruby-identifier">empty?</span>
      <span class="ruby-ivar">@expected</span>.<span class="ruby-identifier">all?</span> {<span class="ruby-operator">|</span>(<span class="ruby-identifier">k</span>, <span class="ruby-identifier">v</span>)<span class="ruby-operator">|</span> <span class="ruby-ivar">@actual</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">k</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-ivar">@actual</span>[<span class="ruby-identifier">k</span>] <span class="ruby-operator">==</span> <span class="ruby-identifier">v</span>}
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="negative_failure_message" type="Public" category="Instance" id="M000267">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The failure message to be displayed in negative matches.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/matchers/route_matchers.rb, line 114</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">negative_failure_message</span>
      <span class="ruby-node">&quot;expected the route not to contain parameters #{@expected.inspect}, but it did&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::Test::RequestHelper" id="Merb::Test::RequestHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37mock_request_helper.rb">lib/merb-core/test/helpers/mock_request_helper.rb</a></infile>

        <infile><a href="#lib37merb-core37test37helpers37request_helper.rb">lib/merb-core/test/helpers/request_helper.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="build_request" type="Public" category="Instance" id="M000273">
          <parameters>(params = {}, env = {})</parameters>

          <description><![CDATA[
            <p>
Prepares and returns a request suitable for dispatching with
dispatch_request. If you don&#8217;t need to modify the request object
before dispatching (e.g. to add cookies), you probably want to use <a
href="#M000269">dispatch_to</a> instead.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt><a href="#M000268">fake_request</a></tt>),
including :req or :post_body for setting the request body itself.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  req = build_request(:id =&gt; 1)
  req.cookies['app_cookie'] = &quot;testing&quot;
  dispatch_request(req, MyController, :edit)
</pre>
<h4>Notes</h4>
<p>
Does not use routes.
</p>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 212</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">build_request</span>(<span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {})
        <span class="ruby-identifier">params</span>             = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">params_to_query_string</span>(<span class="ruby-identifier">params</span>)

        <span class="ruby-identifier">query_string</span> = <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:query_string</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">env</span>[<span class="ruby-value str">'QUERY_STRING'</span>]
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:query_string</span>] = <span class="ruby-identifier">query_string</span> <span class="ruby-value">? </span><span class="ruby-node">&quot;#{query_string}&amp;#{params}&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">params</span>
        
        <span class="ruby-identifier">post_body</span> = <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:post_body</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">env</span>[<span class="ruby-value str">'POST_BODY'</span>]
        <span class="ruby-identifier">fake_request</span>(<span class="ruby-identifier">env</span>, { <span class="ruby-identifier">:post_body</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">post_body</span>, <span class="ruby-identifier">:req</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:req</span>] })
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="check_request_for_route" type="Public" category="Instance" id="M000280">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Checks to see that a request is routable.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;<a href="#Merb::Test::RequestHelper::FakeRequest">Merb::Test::RequestHelper::FakeRequest</a>, Merb::Request&gt;:</td><td>The request object to inspect.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">Merb::ControllerExceptions::BadRequest:</td><td>No matching route was found.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The parameters built based on the matching route.

</td></tr>
</table>
<p>
:api: plugin @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 390</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">check_request_for_route</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-identifier">match</span> =  <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">match</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">match</span>[<span class="ruby-value">0</span>].<span class="ruby-identifier">nil?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">match</span>[<span class="ruby-value">1</span>].<span class="ruby-identifier">empty?</span>
          <span class="ruby-identifier">raise</span> <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">BadRequest</span>, <span class="ruby-node">&quot;No routes match the request. Request uri: #{request.uri}&quot;</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">match</span>[<span class="ruby-value">1</span>]
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="delete" type="Public" category="Instance" id="M000277">
          <parameters>(path, params = {}, env = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
An HTTP DELETE request that operates through the router
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <a href="#M000268">fake_request</a>).

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 296</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">delete</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] = <span class="ruby-value str">&quot;DELETE&quot;</span>
        <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="describe_input" type="Public" category="Instance" id="M000282">
          <parameters>(input)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/request_helper.rb, line 63</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">describe_input</span>(<span class="ruby-identifier">input</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">input</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:controller_name</span>)
          <span class="ruby-node">&quot;#{input.controller_name}##{input.action_name}&quot;</span>
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">input</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:original_env</span>)
          <span class="ruby-identifier">describe_request</span>(<span class="ruby-identifier">input</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">input</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="describe_request" type="Public" category="Instance" id="M000281">
          <parameters>(rack)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/request_helper.rb, line 59</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">describe_request</span>(<span class="ruby-identifier">rack</span>)
        <span class="ruby-node">&quot;a #{rack.original_env[:method] || rack.original_env[&quot;REQUEST_METHOD&quot;] || &quot;GET&quot;} to '#{rack.url}'&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="dispatch_request" type="Public" category="Instance" id="M000279">
          <parameters>(request, controller_klass, action) {|controller if block_given?| ...}</parameters>

          <description><![CDATA[
            <p>
The workhorse for the dispatch*to helpers.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;<a href="#Merb::Test::RequestHelper::FakeRequest">Merb::Test::RequestHelper::FakeRequest</a>, Merb::Request&gt;:</td><td>A request object that has been setup for testing.

</td></tr>
<tr><td valign="top">controller_klass&lt;Merb::Controller&gt;:</td><td>The class object off the controller to dispatch the action to.

</td></tr>
<tr><td valign="top">action&lt;Symbol&gt;:</td><td>The action to dispatch the request to.

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<h4>Returns</h4>
<p>
An instance of <tt>controller_klass</tt> based on the parameters.
</p>
<h4>Notes</h4>
<p>
Does not use routes.
</p>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 364</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dispatch_request</span>(<span class="ruby-identifier">request</span>, <span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
        <span class="ruby-identifier">controller</span> = <span class="ruby-identifier">controller_klass</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-keyword kw">yield</span> <span class="ruby-identifier">controller</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
        <span class="ruby-identifier">controller</span>.<span class="ruby-identifier">_dispatch</span>(<span class="ruby-identifier">action</span>)

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span> <span class="ruby-identifier">controller</span>.<span class="ruby-identifier">_benchmarks</span>.<span class="ruby-identifier">inspect</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">flush</span>

        <span class="ruby-identifier">controller</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="dispatch_to" type="Public" category="Instance" id="M000269">
          <parameters>(controller_klass, action, params = {}, env = {}, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Dispatches an action to the given class. This bypasses the router and is
suitable for unit testing of controllers.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">controller_klass&lt;Controller&gt;:</td><td>The controller class object that the action should be dispatched to.

</td></tr>
<tr><td valign="top">action&lt;Symbol&gt;:</td><td>The action name, as a symbol.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt><a href="#M000268">fake_request</a></tt>),
including :req or :post_body for setting the request body itself.

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  dispatch_to(MyController, :create, :name =&gt; 'Homer' ) do |controller|
    controller.stub!(:current_user).and_return(@user)
  end
</pre>
<h4>Notes</h4>
<p>
Does not use routes.
</p>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 116</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dispatch_to</span>(<span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
        <span class="ruby-identifier">params</span> = <span class="ruby-identifier">merge_controller_and_action</span>(<span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span>)
        <span class="ruby-identifier">dispatch_request</span>(<span class="ruby-identifier">build_request</span>(<span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>), <span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="dispatch_with_basic_authentication_to" type="Public" category="Instance" id="M000271">
          <parameters>(controller_klass, action, username, password, params = {}, env = {}, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Dispatches an action to the given class and using HTTP Basic Authentication
This bypasses the router and is suitable for unit testing of controllers.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">controller_klass&lt;Controller&gt;:</td><td>The controller class object that the action should be dispatched to.

</td></tr>
<tr><td valign="top">action&lt;Symbol&gt;:</td><td>The action name, as a symbol.

</td></tr>
<tr><td valign="top">username&lt;String&gt;:</td><td>The username.

</td></tr>
<tr><td valign="top">password&lt;String&gt;:</td><td>The password.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt><a href="#M000268">fake_request</a></tt>),
including :req or :post_body for setting the request body itself.

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  dispatch_with_basic_authentication_to(MyController, :create, 'Fred', 'secret', :name =&gt; 'Homer' ) do |controller|
    controller.stub!(:current_user).and_return(@user)
  end
</pre>
<h4>Notes</h4>
<p>
Does not use routes.
</p>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 174</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dispatch_with_basic_authentication_to</span>(<span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">username</span>, <span class="ruby-identifier">password</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
        <span class="ruby-identifier">env</span>[<span class="ruby-value str">&quot;X_HTTP_AUTHORIZATION&quot;</span>] = <span class="ruby-node">&quot;Basic #{Base64.encode64(&quot;#{username}:#{password}&quot;)}&quot;</span>
        
        <span class="ruby-identifier">params</span> = <span class="ruby-identifier">merge_controller_and_action</span>(<span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span>)        
        <span class="ruby-identifier">dispatch_request</span>(<span class="ruby-identifier">build_request</span>(<span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>), <span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="fake_request" type="Public" category="Instance" id="M000268">
          <parameters>(env = {}, opt = {})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>A hash of environment keys to be merged into the default list.

</td></tr>
<tr><td valign="top">opt&lt;Hash&gt;:</td><td>A hash of options (see below).

</td></tr>
</table>
<h4>Options (opt)</h4>
<table>
<tr><td valign="top">:post_body&lt;String&gt;:</td><td>The post body for the request.

</td></tr>
<tr><td valign="top">:req&lt;String&gt;:</td><td>The request string. This will only be used if :post_body is left out.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">FakeRequest:</td><td>A <a href="#Merb::Request">Request</a> object that is built based on the
parameters.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If you pass a post body, the content-type will be set to URL-encoded.
</p>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 79</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">fake_request</span>(<span class="ruby-identifier">env</span> = {}, <span class="ruby-identifier">opt</span> = {})
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">opt</span>[<span class="ruby-identifier">:post_body</span>]
          <span class="ruby-identifier">req</span> = <span class="ruby-identifier">opt</span>[<span class="ruby-identifier">:post_body</span>]
          <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:content_type</span>] <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;application/x-www-form-urlencoded&quot;</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">req</span> = <span class="ruby-identifier">opt</span>[<span class="ruby-identifier">:req</span>]
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">FakeRequest</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">env</span>, <span class="ruby-constant">StringIO</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">req</span> <span class="ruby-operator">||</span> <span class="ruby-value str">''</span>))
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="get" type="Public" category="Instance" id="M000274">
          <parameters>(path, params = {}, env = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
An HTTP GET request that operates through the router.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt><a href="#M000268">fake_request</a></tt>).

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 237</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">get</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] = <span class="ruby-value str">&quot;GET&quot;</span>
        <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="merge_controller_and_action" type="Public" category="Instance" id="M000272">
          <parameters>(controller_klass, action, params)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 182</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">merge_controller_and_action</span>(<span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span>)
        <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:controller</span>] = <span class="ruby-identifier">controller_klass</span>.<span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_const_path</span>
        <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:action</span>]     = <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>
        
        <span class="ruby-identifier">params</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="mock_request" type="Public" category="Instance" id="M000278">
          <parameters>(path, params = {}, env= {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
A generic request that checks the router for the controller and action.
This request goes through the <a href="#Merb::Router">Merb::Router</a> and
finishes at the controller.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt><a href="#M000268">fake_request</a></tt>).

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  request(path, { :name =&gt; 'Homer' }, { :request_method =&gt; &quot;PUT&quot; }) do |controller|
    controller.stub!(:current_user).and_return(@user)
  end
</pre>
<h4>Notes</h4>
<p>
Uses Routes.
</p>
<p>
:api: plugin @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 325</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span>= {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;GET&quot;</span>
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_uri</span>], <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:query_string</span>] = <span class="ruby-identifier">path</span>.<span class="ruby-identifier">split</span>(<span class="ruby-value str">'?'</span>)
        
        <span class="ruby-identifier">multipart</span> = <span class="ruby-identifier">env</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:test_with_multipart</span>)

        <span class="ruby-identifier">request</span> = <span class="ruby-identifier">build_request</span>(<span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>)

        <span class="ruby-identifier">opts</span> = <span class="ruby-identifier">check_request_for_route</span>(<span class="ruby-identifier">request</span>) <span class="ruby-comment cmt"># Check that the request will be routed correctly</span>
        <span class="ruby-identifier">controller_name</span> = (<span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:namespace</span>] <span class="ruby-operator">?</span> <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:namespace</span>) <span class="ruby-operator">+</span> <span class="ruby-value str">'/'</span> <span class="ruby-operator">:</span> <span class="ruby-value str">''</span>) <span class="ruby-operator">+</span> <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:controller</span>)
        <span class="ruby-identifier">klass</span> = <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">controller_name</span>.<span class="ruby-identifier">snake_case</span>.<span class="ruby-identifier">to_const_string</span>)
        
        <span class="ruby-identifier">action</span> = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:action</span>).<span class="ruby-identifier">to_s</span>
        <span class="ruby-identifier">params</span>.<span class="ruby-identifier">merge!</span>(<span class="ruby-identifier">opts</span>)

        <span class="ruby-identifier">multipart</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-value">? </span><span class="ruby-identifier">dispatch_to</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">dispatch_multipart_to</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="post" type="Public" category="Instance" id="M000275">
          <parameters>(path, params = {}, env = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
An HTTP POST request that operates through the router.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <a href="#M000268">fake_request</a>).

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 257</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">post</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] = <span class="ruby-value str">&quot;POST&quot;</span>
        <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="put" type="Public" category="Instance" id="M000276">
          <parameters>(path, params = {}, env = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
An HTTP PUT request that operates through the router.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <a href="#M000268">fake_request</a>).

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The controller is yielded to the block provided for actions <b>prior</b> to
the action being dispatched.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 276</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">put</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] = <span class="ruby-value str">&quot;PUT&quot;</span>
        <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="requesting" type="Public" category="Instance" id="M000284">
          <parameters>(*args)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/request_helper.rb, line 77</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">requesting</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)   <span class="ruby-identifier">request</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>) <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="response_for" type="Public" category="Instance" id="M000285">
          <parameters>(*args)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/request_helper.rb, line 78</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">response_for</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>) <span class="ruby-identifier">request</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>) <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status_code" type="Public" category="Instance" id="M000283">
          <parameters>(input)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/request_helper.rb, line 73</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status_code</span>(<span class="ruby-identifier">input</span>)
        <span class="ruby-identifier">input</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:status</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">input</span>.<span class="ruby-identifier">status</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">input</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="with_cookies" type="Public" category="Instance" id="M000270">
          <parameters>(*controller_classes, &amp;blk)</parameters>

          <description><![CDATA[
            <p>
Keep track of cookie values in <a
href="#Merb::Test::RequestHelper::CookieJar">CookieJar</a> within the
context of the block; you need to set this up for secific controllers.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*controller_classes:</td><td><a href="#Merb::Controller">Controller</a> classes to operate on in the
context of the block.

</td></tr>
<tr><td valign="top">&amp;blk:</td><td>The context to operate on; optionally accepts the cookie jar as an
argument.

</td></tr>
</table>
<p>
:api: public @deprecated
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 130</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">with_cookies</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">controller_classes</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
        <span class="ruby-identifier">cookie_jar</span> = <span class="ruby-constant">CookieJar</span>.<span class="ruby-identifier">new</span>
        <span class="ruby-identifier">before_cb</span> = <span class="ruby-identifier">lambda</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">cookie_jar</span>) }
        <span class="ruby-identifier">after_cb</span>  = <span class="ruby-identifier">lambda</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span> <span class="ruby-identifier">cookie_jar</span>.<span class="ruby-identifier">update_from_request</span>(<span class="ruby-identifier">c</span>.<span class="ruby-identifier">request</span>) }
        <span class="ruby-identifier">controller_classes</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">klass</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_before_dispatch_callbacks</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">before_cb</span>
          <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_after_dispatch_callbacks</span>  <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">after_cb</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">blk</span>.<span class="ruby-identifier">arity</span> <span class="ruby-operator">==</span> <span class="ruby-value">1</span> <span class="ruby-operator">?</span> <span class="ruby-identifier">blk</span>.<span class="ruby-identifier">call</span>(<span class="ruby-identifier">cookie_jar</span>) <span class="ruby-operator">:</span> <span class="ruby-identifier">blk</span>.<span class="ruby-identifier">call</span>
        <span class="ruby-identifier">controller_classes</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">klass</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_before_dispatch_callbacks</span>.<span class="ruby-identifier">delete</span> <span class="ruby-identifier">before_cb</span>
          <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_after_dispatch_callbacks</span>.<span class="ruby-identifier">delete</span> <span class="ruby-identifier">after_cb</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="MakeRequest"

                         href="Merb::Test::MakeRequest"

        />

      </included-module-list>

    </contents>

  </Module>

  <Class name="Merb::Test::RequestHelper::CookieJar" id="Merb::Test::RequestHelper::CookieJar">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37mock_request_helper.rb">lib/merb-core/test/helpers/mock_request_helper.rb</a></infile>

      </infiles>


     <superclass>Mash</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a href="#Merb::Test::RequestHelper::CookieJar">CookieJar</a> keeps track
of cookies in a simple Mash.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="update_from_request" type="Public" category="Instance" id="M000286">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;<a href="#Merb::Request">Merb::Request</a>, Merb::FakeRequest&gt;:</td><td>The controller request.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 50</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">update_from_request</span>(<span class="ruby-identifier">request</span>)
          <span class="ruby-identifier">request</span>.<span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span><span class="ruby-operator">|</span>
            <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">value</span>.<span class="ruby-identifier">blank?</span>
              <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">key</span>)
            <span class="ruby-keyword kw">else</span>
              <span class="ruby-keyword kw">self</span>[<span class="ruby-identifier">key</span>] = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">unescape</span>(<span class="ruby-identifier">value</span>)
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::RequestHelper::FakeRequest" id="Merb::Test::RequestHelper::FakeRequest">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37mock_request_helper.rb">lib/merb-core/test/helpers/mock_request_helper.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Request">Merb::Request</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a href="#Merb::Test::RequestHelper::FakeRequest">FakeRequest</a> sets up a
default enviroment which can be overridden either by passing and env into
initialize or using request[&#8216;HTTP_VAR&#8217;] = &#8216;foo&#8217;
</p>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="DEFAULT_ENV">

          <value>Mash.new({           'SERVER_NAME' =&gt; 'localhost',           'PATH_INFO' =&gt; '/',           'HTTP_ACCEPT_ENCODING' =&gt; 'gzip,deflate',           'HTTP_USER_AGENT' =&gt; 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.0.1) Gecko/20060214 Camino/1.0',           'SCRIPT_NAME' =&gt; '/',           'SERVER_PROTOCOL' =&gt; 'HTTP/1.1',           'HTTP_CACHE_CONTROL' =&gt; 'max-age=0',           'HTTP_ACCEPT_LANGUAGE' =&gt; 'en,ja;q=0.9,fr;q=0.9,de;q=0.8,es;q=0.7,it;q=0.7,nl;q=0.6,sv;q=0.5,nb;q=0.5,da;q=0.4,fi;q=0.3,pt;q=0.3,zh-Hans;q=0.2,zh-Hant;q=0.1,ko;q=0.1',           'HTTP_HOST' =&gt; 'localhost',           'REMOTE_ADDR' =&gt; '127.0.0.1',           'SERVER_SOFTWARE' =&gt; 'Mongrel 1.1',           'HTTP_KEEP_ALIVE' =&gt; '300',           'HTTP_REFERER' =&gt; 'http://localhost/',           'HTTP_ACCEPT_CHARSET' =&gt; 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',           'HTTP_VERSION' =&gt; 'HTTP/1.1',           'REQUEST_URI' =&gt; '/',           'SERVER_PORT' =&gt; '80',           'GATEWAY_INTERFACE' =&gt; 'CGI/1.2',           'HTTP_ACCEPT' =&gt; 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',           'HTTP_CONNECTION' =&gt; 'keep-alive',           'REQUEST_METHOD' =&gt; 'GET'         }) unless defined?(DEFAULT_ENV)</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000287">
          <parameters>(env = {}, req = StringIO.new)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>Environment options that override the defaults.

</td></tr>
<tr><td valign="top">req&lt;StringIO&gt;:</td><td>The request to set as input for <a href="#Merb::Rack">Rack</a>.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/mock_request_helper.rb, line 13</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">env</span> = {}, <span class="ruby-identifier">req</span> = <span class="ruby-constant">StringIO</span>.<span class="ruby-identifier">new</span>)
          <span class="ruby-identifier">env</span>.<span class="ruby-identifier">environmentize_keys!</span>
          <span class="ruby-identifier">env</span>[<span class="ruby-value str">'rack.input'</span>] = <span class="ruby-identifier">req</span>
          <span class="ruby-keyword kw">super</span>(<span class="ruby-constant">DEFAULT_ENV</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">env</span>))
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::Test::MultipartRequestHelper" id="Merb::Test::MultipartRequestHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37multipart_request_helper.rb">lib/merb-core/test/helpers/multipart_request_helper.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="dispatch_multipart_to" type="Public" category="Instance" id="M000288">
          <parameters>(controller_klass, action, params = {}, env = {}, &amp;blk)</parameters>

          <description><![CDATA[
            <pre>
 Similar to dispatch_to but allows for sending files inside params.

 ==== Paramters
 controller_klass&lt;Controller&gt;::
   The controller class object that the action should be dispatched to.
 action&lt;Symbol&gt;:: The action name, as a symbol.
 params&lt;Hash&gt;::
   An optional hash that will end up as params in the controller instance.
 env&lt;Hash&gt;::
   An optional hash that is passed to the fake request. Any request options
   should go here (see +fake_request+).
 &amp;blk:: The block is executed in the context of the controller.

 ==== Example
   dispatch_multipart_to(MyController, :create, :my_file =&gt; @a_file ) do |controller|
     controller.stub!(:current_user).and_return(@user)
   end

 ==== Notes
 Set your option to contain a file object to simulate file uploads.

 Does not use routes.
</pre>
<hr size="1"></hr><pre>
 @api public
</pre>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 111</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">dispatch_multipart_to</span>(<span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
    <span class="ruby-identifier">request</span> = <span class="ruby-identifier">multipart_fake_request</span>(<span class="ruby-identifier">env</span>, <span class="ruby-identifier">params</span>)
    <span class="ruby-identifier">dispatch_request</span>(<span class="ruby-identifier">request</span>, <span class="ruby-identifier">controller_klass</span>, <span class="ruby-identifier">action</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">blk</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="multipart_fake_request" type="Public" category="Instance" id="M000291">
          <parameters>(env = {}, params = {})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt>fake_request</tt>).

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">FakeRequest:</td><td>A multipart <a href="#Merb::Request">Request</a> object that is built based
on the parameters.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 166</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">multipart_fake_request</span>(<span class="ruby-identifier">env</span> = {}, <span class="ruby-identifier">params</span> = {})
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">params</span>.<span class="ruby-identifier">empty?</span>
      <span class="ruby-identifier">fake_request</span>(<span class="ruby-identifier">env</span>)
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">m</span> = <span class="ruby-constant">Post</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">params</span>)
      <span class="ruby-identifier">body</span>, <span class="ruby-identifier">head</span> = <span class="ruby-identifier">m</span>.<span class="ruby-identifier">to_multipart</span>
      <span class="ruby-identifier">fake_request</span>(<span class="ruby-identifier">env</span>.<span class="ruby-identifier">merge</span>( <span class="ruby-identifier">:content_type</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">head</span>, 
                              <span class="ruby-identifier">:content_length</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">body</span>.<span class="ruby-identifier">length</span>), <span class="ruby-identifier">:post_body</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">body</span>)
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="multipart_post" type="Public" category="Instance" id="M000289">
          <parameters>(path, params = {}, env = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
An HTTP POST request that operates through the router and uses multipart
parameters.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt>fake_request</tt>).

</td></tr>
<tr><td valign="top">block&lt;Proc&gt;:</td><td>The block is executed in the context of the controller.

</td></tr>
</table>
<h4>Notes</h4>
<p>
To include an uploaded file, put a file object as a value in params.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 130</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">multipart_post</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] = <span class="ruby-value str">&quot;POST&quot;</span>
    <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:test_with_multipart</span>] = <span class="ruby-keyword kw">true</span>
    <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="multipart_put" type="Public" category="Instance" id="M000290">
          <parameters>(path, params = {}, env = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
An HTTP PUT request that operates through the router and uses multipart
parameters.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path that should go to the router as the request uri.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>An optional hash that will end up as params in the controller instance.

</td></tr>
<tr><td valign="top">env&lt;Hash&gt;:</td><td>An optional hash that is passed to the fake request. Any request options
should go here (see <tt>fake_request</tt>).

</td></tr>
<tr><td valign="top">block&lt;Proc&gt;:</td><td>The block is executed in the context of the controller.

</td></tr>
</table>
<h4>Notes</h4>
<p>
To include an uplaoded file, put a file object as a value in params.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 150</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">multipart_put</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span> = {}, <span class="ruby-identifier">env</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:request_method</span>] = <span class="ruby-value str">&quot;PUT&quot;</span>
    <span class="ruby-identifier">env</span>[<span class="ruby-identifier">:test_with_multipart</span>] = <span class="ruby-keyword kw">true</span>
    <span class="ruby-identifier">mock_request</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">params</span>, <span class="ruby-identifier">env</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::Test::MultipartRequestHelper::Param" id="Merb::Test::MultipartRequestHelper::Param">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37multipart_request_helper.rb">lib/merb-core/test/helpers/multipart_request_helper.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="key">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="value">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000292">
          <parameters>(key, value)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;~to_s&gt;:</td><td>The parameter key.

</td></tr>
<tr><td valign="top">value&lt;~to_s&gt;:</td><td>The parameter value.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 12</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span>)
      <span class="ruby-ivar">@key</span>   = <span class="ruby-identifier">key</span>
      <span class="ruby-ivar">@value</span> = <span class="ruby-identifier">value</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="to_multipart" type="Public" category="Instance" id="M000293">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The parameter in a form suitable for a multipart request.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 19</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_multipart</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-node">%(Content-Disposition: form-data; name=&quot;#{key}&quot;\r\n\r\n#{value}\r\n)</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::MultipartRequestHelper::Post" id="Merb::Test::MultipartRequestHelper::Post">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37multipart_request_helper.rb">lib/merb-core/test/helpers/multipart_request_helper.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>




      <constant-list>

        <constant name="BOUNDARY">

          <value>'----------0xKhTmLbOuNdArY'</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CONTENT_TYPE">

          <value>&quot;multipart/form-data, boundary=&quot; + BOUNDARY</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000294">
          <parameters>(params = {})</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>Optional params for the controller.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 51</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">params</span> = {})
      <span class="ruby-ivar">@multipart_params</span> = []
      <span class="ruby-identifier">push_params</span>(<span class="ruby-identifier">params</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="push_params" type="Public" category="Instance" id="M000295">
          <parameters>(params, prefix = nil)</parameters>

          <description><![CDATA[
            <p>
Saves the params in an array of multipart params as <a
href="#Merb::Test::MultipartRequestHelper::Param">Param</a> and <a
href="#Merb::Test::MultipartRequestHelper::FileParam">FileParam</a>
objects.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>The params to add to the multipart params.

</td></tr>
<tr><td valign="top">prefix&lt;~to_s&gt;:</td><td>An optional prefix for the request string keys.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 62</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">push_params</span>(<span class="ruby-identifier">params</span>, <span class="ruby-identifier">prefix</span> = <span class="ruby-keyword kw">nil</span>)
      <span class="ruby-identifier">params</span>.<span class="ruby-identifier">sort_by</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">k</span><span class="ruby-operator">|</span> <span class="ruby-identifier">k</span>.<span class="ruby-identifier">to_s</span>}.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">param_key</span> = <span class="ruby-identifier">prefix</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-value">? </span><span class="ruby-identifier">key</span> <span class="ruby-operator">:</span> <span class="ruby-node">&quot;#{prefix}[#{key}]&quot;</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">value</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:read</span>)
          <span class="ruby-ivar">@multipart_params</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">FileParam</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">param_key</span>, <span class="ruby-identifier">value</span>.<span class="ruby-identifier">path</span>, <span class="ruby-identifier">value</span>.<span class="ruby-identifier">read</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">value</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">value</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Mash</span>)
            <span class="ruby-identifier">value</span>.<span class="ruby-identifier">keys</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">k</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">push_params</span>(<span class="ruby-identifier">value</span>, <span class="ruby-identifier">param_key</span>)
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-ivar">@multipart_params</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">Param</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">param_key</span>, <span class="ruby-identifier">value</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_multipart" type="Public" category="Instance" id="M000296">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Array[<a href="#String">String</a>, String]:</td><td>The query and the content type.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 81</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_multipart</span>
      <span class="ruby-identifier">query</span> = <span class="ruby-ivar">@multipart_params</span>.<span class="ruby-identifier">collect</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">param</span><span class="ruby-operator">|</span> <span class="ruby-value str">&quot;--&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-constant">BOUNDARY</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;\r\n&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">param</span>.<span class="ruby-identifier">to_multipart</span> }.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;&quot;</span>) <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;--&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-constant">BOUNDARY</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;--&quot;</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">query</span>, <span class="ruby-constant">CONTENT_TYPE</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::MultipartRequestHelper::FileParam" id="Merb::Test::MultipartRequestHelper::FileParam">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37multipart_request_helper.rb">lib/merb-core/test/helpers/multipart_request_helper.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="content">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="filename">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="key">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000297">
          <parameters>(key, filename, content)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;~to_s&gt;:</td><td>The parameter key.

</td></tr>
<tr><td valign="top">filename&lt;~to_s&gt;:</td><td>Name of the file for this parameter.

</td></tr>
<tr><td valign="top">content&lt;~to_s&gt;:</td><td>Content of the file for this parameter.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 31</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">filename</span>, <span class="ruby-identifier">content</span>)
      <span class="ruby-ivar">@key</span>      = <span class="ruby-identifier">key</span>
      <span class="ruby-ivar">@filename</span> = <span class="ruby-identifier">filename</span>
      <span class="ruby-ivar">@content</span>  = <span class="ruby-identifier">content</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="to_multipart" type="Public" category="Instance" id="M000298">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The file parameter in a form suitable for a multipart request.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/multipart_request_helper.rb, line 40</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_multipart</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-node">%(Content-Disposition: form-data; name=&quot;#{key}&quot;; filename=&quot;#{filename}&quot;\r\n)</span> <span class="ruby-operator">+</span> <span class="ruby-node">&quot;Content-Type: #{MIME::Types.type_for(@filename)}\r\n\r\n&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">content</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;\r\n&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::CookieJar" id="Merb::Test::CookieJar">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37cookie_jar.rb">lib/merb-core/test/helpers/cookie_jar.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000299">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 75</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>
        <span class="ruby-ivar">@jars</span> = {}
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="for" type="Public" category="Instance" id="M000301">
          <parameters>(jar, uri)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 102</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">for</span>(<span class="ruby-identifier">jar</span>, <span class="ruby-identifier">uri</span>)
        <span class="ruby-identifier">cookies</span> = {}
        
        <span class="ruby-ivar">@jars</span>[<span class="ruby-identifier">jar</span>] <span class="ruby-operator">||=</span> []
        <span class="ruby-comment cmt"># The cookies are sorted by most specific first. So, we loop through</span>
        <span class="ruby-comment cmt"># all the cookies in order and add it to a hash by cookie name if</span>
        <span class="ruby-comment cmt"># the cookie can be sent to the current URI. It's added to the hash</span>
        <span class="ruby-comment cmt"># so that when we are done, the cookies will be unique by name and</span>
        <span class="ruby-comment cmt"># we'll have grabbed the most specific to the URI.</span>
        <span class="ruby-ivar">@jars</span>[<span class="ruby-identifier">jar</span>].<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">cookie</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">cookies</span>[<span class="ruby-identifier">cookie</span>.<span class="ruby-identifier">name</span>] = <span class="ruby-identifier">cookie</span>.<span class="ruby-identifier">raw</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">cookie</span>.<span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">uri</span>)
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">values</span>.<span class="ruby-identifier">join</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="update" type="Public" category="Instance" id="M000300">
          <parameters>(jar, uri, raw_cookies)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 80</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">update</span>(<span class="ruby-identifier">jar</span>, <span class="ruby-identifier">uri</span>, <span class="ruby-identifier">raw_cookies</span>)
        <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">raw_cookies</span>
        <span class="ruby-comment cmt"># Initialize all the the received cookies</span>
        <span class="ruby-identifier">cookies</span> = []
        <span class="ruby-identifier">raw_cookies</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">raw</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">c</span> = <span class="ruby-constant">Cookie</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">raw</span>, <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">host</span>)
          <span class="ruby-identifier">cookies</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">c</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">valid?</span>(<span class="ruby-identifier">uri</span>)
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-ivar">@jars</span>[<span class="ruby-identifier">jar</span>] <span class="ruby-operator">||=</span> []
        
        <span class="ruby-comment cmt"># Remove all the cookies that will be updated</span>
        <span class="ruby-ivar">@jars</span>[<span class="ruby-identifier">jar</span>].<span class="ruby-identifier">delete_if</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">existing</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">find</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span> [<span class="ruby-identifier">c</span>.<span class="ruby-identifier">name</span>, <span class="ruby-identifier">c</span>.<span class="ruby-identifier">domain</span>, <span class="ruby-identifier">c</span>.<span class="ruby-identifier">path</span>] <span class="ruby-operator">==</span> [<span class="ruby-identifier">existing</span>.<span class="ruby-identifier">name</span>, <span class="ruby-identifier">existing</span>.<span class="ruby-identifier">domain</span>, <span class="ruby-identifier">existing</span>.<span class="ruby-identifier">path</span>] }
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-ivar">@jars</span>[<span class="ruby-identifier">jar</span>].<span class="ruby-identifier">concat</span> <span class="ruby-identifier">cookies</span>
        
        <span class="ruby-ivar">@jars</span>[<span class="ruby-identifier">jar</span>].<span class="ruby-identifier">sort!</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Test::ExampleGroup" id="Merb::Test::ExampleGroup">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37rspec.rb">lib/merb-core/test/test_ext/rspec.rb</a></infile>

      </infiles>


     <superclass>Spec::Example::ExampleGroup</superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="describe" type="Public" category="Class" id="M000302">
          <parameters>(*args, &amp;example_group_block)</parameters>

          <description><![CDATA[
            <p>
This is a copy of the method in rspec, so we can have describe
&quot;&#8230;&quot;, :when =&gt; &quot;logged in&quot;, and the like
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 51</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">describe</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">example_group_block</span>)          
          <span class="ruby-identifier">params</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span> <span class="ruby-operator">:</span> {}
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">example_group_block</span>
            <span class="ruby-identifier">ret</span> = <span class="ruby-keyword kw">super</span>(<span class="ruby-identifier">params</span>[<span class="ruby-identifier">:given</span>]) <span class="ruby-keyword kw">do</span>
              <span class="ruby-identifier">it_should_behave_like</span> <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:given</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:given</span>]
              <span class="ruby-keyword kw">super</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">example_group_block</span>)
            <span class="ruby-keyword kw">end</span>
            <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:given</span>] = <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:when</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:given</span>]
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="given" type="Public" category="Class" id="M000303">
          <parameters>(*args, &amp;example_group_block)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/rspec.rb, line 63</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">given</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">example_group_block</span>)
          <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> {} <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Hash</span> <span class="ruby-operator">===</span> <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>
          <span class="ruby-identifier">params</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">last</span>
          
          <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:shared</span>] = <span class="ruby-keyword kw">true</span>
          
          <span class="ruby-identifier">describe</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">example_group_block</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="::Merb::Test::Matchers"

                         href="Merb::Test::Matchers"

        />

        <included-module name="::Merb::Test::RouteHelper"

                         href="Merb::Test::RouteHelper"

        />

        <included-module name="::Merb::Test::ControllerHelper"

                         href="Merb::Test::ControllerHelper"

        />

        <included-module name="::Webrat::Methods"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Merb::Test::Cookie" id="Merb::Test::Cookie">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37helpers37cookie_jar.rb">lib/merb-core/test/helpers/cookie_jar.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="name">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="value">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000304">
          <parameters>(raw, default_host)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 11</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">raw</span>, <span class="ruby-identifier">default_host</span>)
        <span class="ruby-comment cmt"># separate the name / value pair from the cookie options</span>
        <span class="ruby-ivar">@name_value_raw</span>, <span class="ruby-identifier">options</span> = <span class="ruby-identifier">raw</span>.<span class="ruby-identifier">split</span>(<span class="ruby-regexp re">/[;,] */n</span>, <span class="ruby-value">2</span>)
        
        <span class="ruby-ivar">@name</span>, <span class="ruby-ivar">@value</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">query</span>(<span class="ruby-ivar">@name_value_raw</span>, <span class="ruby-value str">';'</span>).<span class="ruby-identifier">to_a</span>.<span class="ruby-identifier">first</span>
        <span class="ruby-ivar">@options</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">query</span>(<span class="ruby-identifier">options</span>, <span class="ruby-value str">';'</span>)
        
        <span class="ruby-ivar">@options</span>.<span class="ruby-identifier">delete_if</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>, <span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-operator">!</span><span class="ruby-identifier">v</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">v</span>.<span class="ruby-identifier">empty?</span> }
        
        <span class="ruby-ivar">@options</span>[<span class="ruby-value str">&quot;domain&quot;</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">default_host</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="&lt;=&gt;" type="Public" category="Instance" id="M000313">
          <parameters>(other)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 65</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-operator">&lt;=&gt;</span>(<span class="ruby-identifier">other</span>)
        <span class="ruby-comment cmt"># Orders the cookies from least specific to most</span>
        [<span class="ruby-identifier">name</span>, <span class="ruby-identifier">path</span>, <span class="ruby-identifier">domain</span>.<span class="ruby-identifier">reverse</span>] <span class="ruby-operator">&lt;=&gt;</span> [<span class="ruby-identifier">other</span>.<span class="ruby-identifier">name</span>, <span class="ruby-identifier">other</span>.<span class="ruby-identifier">path</span>, <span class="ruby-identifier">other</span>.<span class="ruby-identifier">domain</span>.<span class="ruby-identifier">reverse</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="domain" type="Public" category="Instance" id="M000307">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 34</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">domain</span>
        <span class="ruby-ivar">@options</span>[<span class="ruby-value str">&quot;domain&quot;</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="empty?" type="Public" category="Instance" id="M000306">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 29</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">empty?</span>
        <span class="ruby-ivar">@value</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-operator">||</span> <span class="ruby-ivar">@value</span>.<span class="ruby-identifier">empty?</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="expired?" type="Public" category="Instance" id="M000310">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 49</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">expired?</span>
        <span class="ruby-identifier">expires</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">expires</span> <span class="ruby-operator">&lt;</span> <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="expires" type="Public" category="Instance" id="M000309">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 44</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">expires</span>
        <span class="ruby-constant">Time</span>.<span class="ruby-identifier">parse</span>(<span class="ruby-ivar">@options</span>[<span class="ruby-value str">&quot;expires&quot;</span>]) <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@options</span>[<span class="ruby-value str">&quot;expires&quot;</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000312">
          <parameters>(uri)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 60</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matches?</span>(<span class="ruby-identifier">uri</span>)
        <span class="ruby-operator">!</span> <span class="ruby-identifier">expired?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">valid?</span>(<span class="ruby-identifier">uri</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="path" type="Public" category="Instance" id="M000308">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 39</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">path</span>
        <span class="ruby-ivar">@options</span>[<span class="ruby-value str">&quot;path&quot;</span>] <span class="ruby-operator">||</span> <span class="ruby-value str">&quot;/&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="raw" type="Public" category="Instance" id="M000305">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 24</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">raw</span>
        <span class="ruby-ivar">@name_value_raw</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="valid?" type="Public" category="Instance" id="M000311">
          <parameters>(uri)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/helpers/cookie_jar.rb, line 54</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">valid?</span>(<span class="ruby-identifier">uri</span>)
        <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">host</span> <span class="ruby-operator">=~</span> <span class="ruby-constant">Regexp</span>.<span class="ruby-identifier">new</span>(<span class="ruby-node">&quot;#{Regexp.escape(domain)}$&quot;</span>) <span class="ruby-operator">&amp;&amp;</span>
        <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">path</span> <span class="ruby-operator">=~</span> <span class="ruby-constant">Regexp</span>.<span class="ruby-identifier">new</span>(<span class="ruby-node">&quot;^#{Regexp.escape(path)}&quot;</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::CookiesMixin" id="Merb::CookiesMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37cookies.rb">lib/merb-core/dispatch/cookies.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="included" type="Public" category="Class" id="M000314">
          <parameters>(base)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 93</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">included</span>(<span class="ruby-identifier">base</span>)
      <span class="ruby-comment cmt"># Allow per-controller default cookie domains (see callback below)</span>
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">class_inheritable_accessor</span> <span class="ruby-identifier">:_default_cookie_domain</span>
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">_default_cookie_domain</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:default_cookie_domain</span>]
      
      <span class="ruby-comment cmt"># Add a callback to enable Set-Cookie headers</span>
      <span class="ruby-identifier">base</span>.<span class="ruby-identifier">_after_dispatch_callbacks</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">lambda</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">headers</span> = <span class="ruby-identifier">c</span>.<span class="ruby-identifier">request</span>.<span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">extract_headers</span>(<span class="ruby-value str">&quot;domain&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">_default_cookie_domain</span>)
        <span class="ruby-identifier">c</span>.<span class="ruby-identifier">headers</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">headers</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="cookies" type="Public" category="Instance" id="M000315">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Merb::Cookies:</td><td>A new <a href="#Merb::Cookies">Merb::Cookies</a> instance representing the
cookies that came in from the request object

</td></tr>
</table>
<h4>Notes</h4>
<p>
Headers are passed into the cookie object so that you can do:
</p>
<pre>
  cookies[:foo] = &quot;bar&quot;
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 115</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">cookies</span>
      <span class="ruby-identifier">request</span>.<span class="ruby-identifier">cookies</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::CookiesMixin::RequestMixin" id="Merb::CookiesMixin::RequestMixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37cookies.rb">lib/merb-core/dispatch/cookies.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="cookies" type="Public" category="Instance" id="M000316">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The cookies for this request.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If a method default_cookies is defined it will be called. This can be used
for session fixation purposes for example. The method returns a <a
href="#Hash">Hash</a> of key =&gt; value pairs.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 130</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">cookies</span>
        <span class="ruby-ivar">@cookies</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">values</span>  = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">query</span>(<span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_COOKIE</span>], <span class="ruby-value str">';,'</span>)
          <span class="ruby-identifier">cookies</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Cookies</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">values</span>)
          <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">default_cookies</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:default_cookies</span>)
          <span class="ruby-identifier">cookies</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Parse" id="Merb::Parse">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37request_parsers.rb">lib/merb-core/dispatch/request_parsers.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>




      <constant-list>

        <constant name="NAME_REGEX">

          <value>/Content-Disposition:.* name=&quot;?([^\&quot;;]*)&quot;?/ni.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CONTENT_TYPE_REGEX">

          <value>/Content-Type: (.*)\r\n/ni.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="FILENAME_REGEX">

          <value>/Content-Disposition:.* filename=&quot;?([^\&quot;;]*)&quot;?/ni.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="CRLF">

          <value>&quot;\r\n&quot;.freeze</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="EOL">

          <value>CRLF</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="escape" type="Public" category="Class" id="M000320">
          <parameters>(s)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">s&lt;String&gt;:</td><td><a href="#String">String</a> to URL escape.

</td></tr>
</table>
<h4>returns</h4>
<table>
<tr><td valign="top">String:</td><td>The escaped string.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request_parsers.rb, line 178</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">escape</span>(<span class="ruby-identifier">s</span>)
      <span class="ruby-identifier">s</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">/([^ a-zA-Z0-9_.-]+)/n</span>) {
        <span class="ruby-value str">'%'</span><span class="ruby-operator">+</span><span class="ruby-identifier">$1</span>.<span class="ruby-identifier">unpack</span>(<span class="ruby-value str">'H2'</span><span class="ruby-operator">*</span><span class="ruby-identifier">$1</span>.<span class="ruby-identifier">size</span>).<span class="ruby-identifier">join</span>(<span class="ruby-value str">'%'</span>).<span class="ruby-identifier">upcase</span>
      }.<span class="ruby-identifier">tr</span>(<span class="ruby-value str">' '</span>, <span class="ruby-value str">'+'</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="multipart" type="Public" category="Class" id="M000318">
          <parameters>(request, boundary, content_length)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;IO&gt;:</td><td>The raw request.

</td></tr>
<tr><td valign="top">boundary&lt;String&gt;:</td><td>The boundary string.

</td></tr>
<tr><td valign="top">content_length&lt;Fixnum&gt;:</td><td>The length of the content.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ControllerExceptions::MultiPartParseError:</td><td>Failed to parse request.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The parsed request.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request_parsers.rb, line 49</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">multipart</span>(<span class="ruby-identifier">request</span>, <span class="ruby-identifier">boundary</span>, <span class="ruby-identifier">content_length</span>)
      <span class="ruby-identifier">boundary</span> = <span class="ruby-node">&quot;--#{boundary}&quot;</span>
      <span class="ruby-identifier">paramhsh</span> = {}
      <span class="ruby-identifier">buf</span>      = <span class="ruby-value str">&quot;&quot;</span>
      <span class="ruby-identifier">input</span>    = <span class="ruby-identifier">request</span>
      <span class="ruby-identifier">input</span>.<span class="ruby-identifier">binmode</span> <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">defined?</span> <span class="ruby-identifier">input</span>.<span class="ruby-identifier">binmode</span>
      <span class="ruby-identifier">boundary_size</span> = <span class="ruby-identifier">boundary</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">+</span> <span class="ruby-constant">EOL</span>.<span class="ruby-identifier">size</span>
      <span class="ruby-identifier">bufsize</span>       = <span class="ruby-value">16384</span>
      <span class="ruby-identifier">content_length</span> <span class="ruby-operator">-=</span> <span class="ruby-identifier">boundary_size</span>
      <span class="ruby-comment cmt"># status is boundary delimiter line</span>
      <span class="ruby-identifier">status</span> = <span class="ruby-identifier">input</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">boundary_size</span>)
      <span class="ruby-keyword kw">return</span> {} <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">status</span> <span class="ruby-operator">==</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">status</span>.<span class="ruby-identifier">empty?</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">MultiPartParseError</span>, <span class="ruby-node">&quot;bad content body:\n'#{status}' should == '#{boundary + EOL}'&quot;</span>  <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">status</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">boundary</span> <span class="ruby-operator">+</span> <span class="ruby-constant">EOL</span>
      <span class="ruby-comment cmt"># second argument to Regexp.quote is for KCODE</span>
      <span class="ruby-identifier">rx</span> = <span class="ruby-node">/(?:#{EOL})?#{Regexp.quote(boundary,'n')}(#{EOL}|--)/</span>
      <span class="ruby-identifier">loop</span> {
        <span class="ruby-identifier">head</span>      = <span class="ruby-keyword kw">nil</span>
        <span class="ruby-identifier">body</span>      = <span class="ruby-value str">''</span>
        <span class="ruby-identifier">filename</span>  = <span class="ruby-identifier">content_type</span> = <span class="ruby-identifier">name</span> = <span class="ruby-keyword kw">nil</span>
        <span class="ruby-identifier">read_size</span> = <span class="ruby-value">0</span>
        <span class="ruby-keyword kw">until</span> <span class="ruby-identifier">head</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">buf</span> <span class="ruby-operator">=~</span> <span class="ruby-identifier">rx</span>
          <span class="ruby-identifier">i</span> = <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">index</span>(<span class="ruby-value str">&quot;\r\n\r\n&quot;</span>)
          <span class="ruby-keyword kw">if</span>( <span class="ruby-identifier">i</span> <span class="ruby-operator">==</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">read_size</span> <span class="ruby-operator">==</span> <span class="ruby-value">0</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">content_length</span> <span class="ruby-operator">==</span> <span class="ruby-value">0</span> )
            <span class="ruby-identifier">content_length</span> = <span class="ruby-value">-1</span>
            <span class="ruby-keyword kw">break</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-operator">!</span><span class="ruby-identifier">head</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">i</span>
            <span class="ruby-identifier">head</span> = <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">slice!</span>(<span class="ruby-value">0</span>, <span class="ruby-identifier">i</span><span class="ruby-operator">+</span><span class="ruby-value">2</span>) <span class="ruby-comment cmt"># First \r\n</span>
            <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">slice!</span>(<span class="ruby-value">0</span>, <span class="ruby-value">2</span>)          <span class="ruby-comment cmt"># Second \r\n</span>

            <span class="ruby-comment cmt"># String#[] with 2nd arg here is returning</span>
            <span class="ruby-comment cmt"># a group from match data</span>
            <span class="ruby-identifier">filename</span>     = <span class="ruby-identifier">head</span>[<span class="ruby-constant">FILENAME_REGEX</span>, <span class="ruby-value">1</span>]
            <span class="ruby-identifier">content_type</span> = <span class="ruby-identifier">head</span>[<span class="ruby-constant">CONTENT_TYPE_REGEX</span>, <span class="ruby-value">1</span>]
            <span class="ruby-identifier">name</span>         = <span class="ruby-identifier">head</span>[<span class="ruby-constant">NAME_REGEX</span>, <span class="ruby-value">1</span>]

            <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">filename</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">filename</span>.<span class="ruby-identifier">empty?</span>
              <span class="ruby-identifier">body</span> = <span class="ruby-constant">Tempfile</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">:Merb</span>)
              <span class="ruby-identifier">body</span>.<span class="ruby-identifier">binmode</span> <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">defined?</span> <span class="ruby-identifier">body</span>.<span class="ruby-identifier">binmode</span>
            <span class="ruby-keyword kw">end</span>
            <span class="ruby-keyword kw">next</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-comment cmt"># Save the read body part.</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">head</span> <span class="ruby-operator">&amp;&amp;</span> (<span class="ruby-identifier">boundary_size</span><span class="ruby-operator">+</span><span class="ruby-value">4</span> <span class="ruby-operator">&lt;</span> <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">size</span>)
            <span class="ruby-identifier">body</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">slice!</span>(<span class="ruby-value">0</span>, <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">-</span> (<span class="ruby-identifier">boundary_size</span><span class="ruby-operator">+</span><span class="ruby-value">4</span>))
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">read_size</span> = <span class="ruby-identifier">bufsize</span> <span class="ruby-operator">&lt;</span> <span class="ruby-identifier">content_length</span> <span class="ruby-value">? </span><span class="ruby-identifier">bufsize</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">content_length</span>
          <span class="ruby-keyword kw">if</span>( <span class="ruby-identifier">read_size</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">0</span> )
            <span class="ruby-identifier">c</span> = <span class="ruby-identifier">input</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">read_size</span>)
            <span class="ruby-identifier">raise</span> <span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">MultiPartParseError</span>, <span class="ruby-value str">&quot;bad content body&quot;</span>  <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">empty?</span>
            <span class="ruby-identifier">buf</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">c</span>
            <span class="ruby-identifier">content_length</span> <span class="ruby-operator">-=</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">size</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># Save the rest.</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">i</span> = <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">index</span>(<span class="ruby-identifier">rx</span>)
          <span class="ruby-comment cmt"># correct value of i for some edge cases</span>
          <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">i</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">2</span>) <span class="ruby-operator">&amp;&amp;</span> (<span class="ruby-identifier">j</span> = <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">index</span>(<span class="ruby-identifier">rx</span>, <span class="ruby-identifier">i</span><span class="ruby-operator">-</span><span class="ruby-value">2</span>)) <span class="ruby-operator">&amp;&amp;</span> (<span class="ruby-identifier">j</span> <span class="ruby-operator">&lt;</span> <span class="ruby-identifier">i</span>)
             <span class="ruby-identifier">i</span> = <span class="ruby-identifier">j</span>
           <span class="ruby-keyword kw">end</span>
          <span class="ruby-identifier">body</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">slice!</span>(<span class="ruby-value">0</span>, <span class="ruby-identifier">i</span>)
          <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">slice!</span>(<span class="ruby-value">0</span>, <span class="ruby-identifier">boundary_size</span><span class="ruby-operator">+</span><span class="ruby-value">2</span>)

          <span class="ruby-identifier">content_length</span> = <span class="ruby-value">-1</span>  <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">$1</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;--&quot;</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">filename</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">filename</span>.<span class="ruby-identifier">empty?</span>
          <span class="ruby-identifier">body</span>.<span class="ruby-identifier">rewind</span>
          <span class="ruby-identifier">data</span> = {
            <span class="ruby-identifier">:filename</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">filename</span>),
            <span class="ruby-identifier">:content_type</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">content_type</span>,
            <span class="ruby-identifier">:tempfile</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">body</span>,
            <span class="ruby-identifier">:size</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">size</span>(<span class="ruby-identifier">body</span>.<span class="ruby-identifier">path</span>)
          }
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">data</span> = <span class="ruby-identifier">body</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">paramhsh</span> = <span class="ruby-identifier">normalize_params</span>(<span class="ruby-identifier">paramhsh</span>,<span class="ruby-identifier">name</span>,<span class="ruby-identifier">data</span>)
        <span class="ruby-keyword kw">break</span>  <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">buf</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">content_length</span> <span class="ruby-operator">==</span> <span class="ruby-value">-1</span>
      }
      <span class="ruby-identifier">paramhsh</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="params_to_query_string" type="Public" category="Class" id="M000319">
          <parameters>(value, prefix = nil)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">value&lt;Array, <a href="#Hash">Hash</a>, Dictionary ~to_s&gt;:</td><td>The value for the query string.

</td></tr>
<tr><td valign="top">prefix&lt;~to_s&gt;:</td><td>The prefix to add to the query string keys.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The query string.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If the value is a string, the prefix will be used as the key.
</p>
<h4>Examples</h4>
<pre>
  params_to_query_string(10, &quot;page&quot;)
    # =&gt; &quot;page=10&quot;
  params_to_query_string({ :page =&gt; 10, :word =&gt; &quot;ruby&quot; })
    # =&gt; &quot;page=10&amp;word=ruby&quot;
  params_to_query_string({ :page =&gt; 10, :word =&gt; &quot;ruby&quot; }, &quot;search&quot;)
    # =&gt; &quot;search[page]=10&amp;search[word]=ruby&quot;
  params_to_query_string([ &quot;ice-cream&quot;, &quot;cake&quot; ], &quot;shopping_list&quot;)
    # =&gt; &quot;shopping_list[]=ice-cream&amp;shopping_list[]=cake&quot;
</pre>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request_parsers.rb, line 156</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">params_to_query_string</span>(<span class="ruby-identifier">value</span>, <span class="ruby-identifier">prefix</span> = <span class="ruby-keyword kw">nil</span>)
      <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">value</span>
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Array</span>
        <span class="ruby-identifier">value</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">v</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">params_to_query_string</span>(<span class="ruby-identifier">v</span>, <span class="ruby-node">&quot;#{prefix}[]&quot;</span>)
        } <span class="ruby-operator">*</span> <span class="ruby-value str">&quot;&amp;&quot;</span>
      <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Hash</span>, <span class="ruby-constant">Dictionary</span>
        <span class="ruby-identifier">value</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>, <span class="ruby-identifier">v</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">params_to_query_string</span>(<span class="ruby-identifier">v</span>, <span class="ruby-identifier">prefix</span> <span class="ruby-value">? </span><span class="ruby-node">&quot;#{prefix}[#{escape(k)}]&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">escape</span>(<span class="ruby-identifier">k</span>))
        } <span class="ruby-operator">*</span> <span class="ruby-value str">&quot;&amp;&quot;</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-node">&quot;#{prefix}=#{escape(value)}&quot;</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="query" type="Public" category="Class" id="M000317">
          <parameters>(query_string, delimiter = '&amp;;', preserve_order = false)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">query_string&lt;String&gt;:</td><td>The query string.

</td></tr>
<tr><td valign="top">delimiter&lt;String&gt;:</td><td>The query string divider. Defaults to &quot;&amp;&quot;.

</td></tr>
<tr><td valign="top">preserve_order&lt;Boolean&gt;:</td><td>Preserve order of args. Defaults to false.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Mash:</td><td>The parsed query string (Dictionary if preserve_order is set).

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  Merb::Parse.query(&quot;bar=nik&amp;post[body]=heya&quot;)
    # =&gt; { :bar =&gt; &quot;nik&quot;, :post =&gt; { :body =&gt; &quot;heya&quot; } }
</pre>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request_parsers.rb, line 17</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">query</span>(<span class="ruby-identifier">query_string</span>, <span class="ruby-identifier">delimiter</span> = <span class="ruby-value str">'&amp;;'</span>, <span class="ruby-identifier">preserve_order</span> = <span class="ruby-keyword kw">false</span>)
      <span class="ruby-identifier">query</span> = <span class="ruby-identifier">preserve_order</span> <span class="ruby-value">? </span><span class="ruby-constant">Dictionary</span>.<span class="ruby-identifier">new</span> <span class="ruby-operator">:</span> {}
      <span class="ruby-keyword kw">for</span> <span class="ruby-identifier">pair</span> <span class="ruby-keyword kw">in</span> (<span class="ruby-identifier">query_string</span> <span class="ruby-operator">||</span> <span class="ruby-value str">''</span>).<span class="ruby-identifier">split</span>(<span class="ruby-node">/[#{delimiter}] */n</span>)
        <span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span> = <span class="ruby-identifier">unescape</span>(<span class="ruby-identifier">pair</span>).<span class="ruby-identifier">split</span>(<span class="ruby-value str">'='</span>,<span class="ruby-value">2</span>)
        <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">key</span>.<span class="ruby-identifier">nil?</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">key</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-value str">'['</span>)
          <span class="ruby-identifier">normalize_params</span>(<span class="ruby-identifier">query</span>, <span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">query</span>[<span class="ruby-identifier">key</span>] = <span class="ruby-identifier">value</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">preserve_order</span> <span class="ruby-value">? </span><span class="ruby-identifier">query</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">query</span>.<span class="ruby-identifier">to_mash</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="unescape" type="Public" category="Class" id="M000321">
          <parameters>(s)</parameters>

          <description><![CDATA[
            <h4>Parameter</h4>
<table>
<tr><td valign="top">s&lt;String&gt;:</td><td><a href="#String">String</a> to URL unescape.

</td></tr>
</table>
<h4>returns</h4>
<table>
<tr><td valign="top">String:</td><td>The unescaped string.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request_parsers.rb, line 191</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">unescape</span>(<span class="ruby-identifier">s</span>)
      <span class="ruby-identifier">s</span>.<span class="ruby-identifier">tr</span>(<span class="ruby-value str">'+'</span>, <span class="ruby-value str">' '</span>).<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">/((?:%[0-9a-fA-F]{2})+)/n</span>){
        [<span class="ruby-identifier">$1</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-value str">'%'</span>)].<span class="ruby-identifier">pack</span>(<span class="ruby-value str">'H*'</span>)
      }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::Template" id="Merb::Template">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>




      <constant-list>

        <constant name="EXTENSIONS">

          <value>{} unless defined?(EXTENSIONS)</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="METHOD_LIST">

          <value>{} unless defined?(METHOD_LIST)</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="SUPPORTED_LOCALS_LIST">

          <value>Hash.new([].freeze) unless defined?(SUPPORTED_LOCALS_LIST)</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="MTIMES">

          <value>{} unless defined?(MTIMES)</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="engine_for" type="Public" category="Class" id="M000328">
          <parameters>(path)</parameters>

          <description><![CDATA[
            <p>
Finds the engine for a particular path.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path of the file to find an engine for.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Class:</td><td>The engine.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 148</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">engine_for</span>(<span class="ruby-identifier">path</span>)
      <span class="ruby-identifier">path</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">path</span>)      
      <span class="ruby-constant">EXTENSIONS</span>[<span class="ruby-identifier">path</span>.<span class="ruby-identifier">match</span>(<span class="ruby-regexp re">/\.([^\.]*)$/</span>)[<span class="ruby-value">1</span>]]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="inline_template" type="Public" category="Class" id="M000327">
          <parameters>(io, locals=[], mod = Merb::InlineTemplates)</parameters>

          <description><![CDATA[
            <p>
Takes a template at a particular path and inlines it into a module and adds
it to the METHOD_LIST table to speed lookup later.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">io&lt;path&gt;:</td><td>An IO that responds to path (File or VirtualFile)

</td></tr>
<tr><td valign="top">locals&lt;Array[Symbol]&gt;:</td><td>A list of local names that should be assigned in the template method from
the arguments hash. Defaults to [].

</td></tr>
<tr><td valign="top">mod&lt;Module&gt;:</td><td>The module to put the compiled method into. Defaults to <a
href="#Merb::InlineTemplates">Merb::InlineTemplates</a>

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Symbol:</td><td>The name of the method that the template was compiled into.

</td></tr>
</table>
<h4>Notes</h4>
<p>
Even though this method supports inlining into any module, the method must
be available to instances of <a
href="#Merb::AbstractController">AbstractController</a> that will use it.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 127</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">inline_template</span>(<span class="ruby-identifier">io</span>, <span class="ruby-identifier">locals</span>=[], <span class="ruby-identifier">mod</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">InlineTemplates</span>)
      <span class="ruby-identifier">full_file_path</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">io</span>.<span class="ruby-identifier">path</span>)
      <span class="ruby-identifier">engine_neutral_path</span> = <span class="ruby-identifier">full_file_path</span>.<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">/\.[^\.]*$/</span>, <span class="ruby-value str">&quot;&quot;</span>)
      
      <span class="ruby-constant">SUPPORTED_LOCALS_LIST</span>[<span class="ruby-identifier">engine_neutral_path</span>] <span class="ruby-operator">|=</span> <span class="ruby-identifier">locals</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">locals</span>.<span class="ruby-identifier">empty?</span>
      <span class="ruby-identifier">ret</span> = <span class="ruby-constant">METHOD_LIST</span>[<span class="ruby-identifier">engine_neutral_path</span>] =
        <span class="ruby-identifier">engine_for</span>(<span class="ruby-identifier">full_file_path</span>).<span class="ruby-identifier">compile_template</span>(<span class="ruby-identifier">io</span>, <span class="ruby-identifier">template_name</span>(<span class="ruby-identifier">full_file_path</span>), <span class="ruby-identifier">locals</span>, <span class="ruby-identifier">mod</span>)
        
      <span class="ruby-identifier">io</span>.<span class="ruby-identifier">close</span>
      <span class="ruby-identifier">ret</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="load_template_io" type="Public" category="Class" id="M000323">
          <parameters>(path)</parameters>

          <description><![CDATA[
            <p>
For a given path, gets an IO object that responds to path.
</p>
<p>
This is so that plugins can override this if they provide mechanisms for
specifying templates that are not just simple files. The plugin is
responsible for ensuring that the fake path provided will work with <a
href="#M000324">template_for</a>, and thus the <a
href="#Merb::RenderMixin">RenderMixin</a> in general.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>A full path to find a template for. This is the

</td></tr>
</table>
<pre>
  path that the RenderMixin assumes it should find the template
  in.
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">IO#path:</td><td>An IO object that responds to path (File or VirtualFile).

</td></tr>
</table>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 52</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">load_template_io</span>(<span class="ruby-identifier">path</span>)
      <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">path</span>, <span class="ruby-value str">&quot;r&quot;</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="needs_compilation?" type="Public" category="Class" id="M000325">
          <parameters>(path, locals)</parameters>

          <description><![CDATA[
            <p>
Decides if a template needs to be re/compiled.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The full path of the template to check support for.

</td></tr>
<tr><td valign="top">locals&lt;Array[Symbol]&gt;:</td><td>The list of locals that need to be supported

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>Whether or not the template for the provided path needs to be recompiled

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 88</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">needs_compilation?</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">locals</span>)
      <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">true</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:reload_templates</span>] <span class="ruby-operator">||</span> <span class="ruby-operator">!</span><span class="ruby-constant">METHOD_LIST</span>[<span class="ruby-identifier">path</span>]
      
      <span class="ruby-identifier">current_locals</span> = <span class="ruby-constant">SUPPORTED_LOCALS_LIST</span>[<span class="ruby-identifier">path</span>]
      <span class="ruby-identifier">current_locals</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">locals</span> <span class="ruby-operator">&amp;&amp;</span>
        <span class="ruby-operator">!</span>(<span class="ruby-identifier">locals</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">current_locals</span>).<span class="ruby-identifier">empty?</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="register_extensions" type="Public" category="Class" id="M000329">
          <parameters>(engine, extensions)</parameters>

          <description><![CDATA[
            <p>
Registers the extensions that will trigger a particular templating engine.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">engine&lt;Class&gt;:</td><td>The class of the engine that is being registered

</td></tr>
<tr><td valign="top">extensions&lt;Array[String]&gt;:</td><td>The list of extensions that will be registered with this templating
language

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>engine does not have a compile_template method.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<h4>Example</h4>
<pre>
  Merb::Template.register_extensions(Merb::Template::Erubis, [&quot;erb&quot;])
</pre>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 172</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">register_extensions</span>(<span class="ruby-identifier">engine</span>, <span class="ruby-identifier">extensions</span>) 
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-value str">&quot;The class you are registering does not have a compile_template method&quot;</span> <span class="ruby-keyword kw">unless</span>
        <span class="ruby-identifier">engine</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:compile_template</span>)
      <span class="ruby-identifier">extensions</span>.<span class="ruby-identifier">each</span>{<span class="ruby-operator">|</span><span class="ruby-identifier">ext</span><span class="ruby-operator">|</span> <span class="ruby-constant">EXTENSIONS</span>[<span class="ruby-identifier">ext</span>] = <span class="ruby-identifier">engine</span> }
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">AbstractController</span>.<span class="ruby-identifier">class_eval</span> <span class="ruby-value str">&quot;include \#{engine}::Mixin\n&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="template_extensions" type="Public" category="Class" id="M000326">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Gets all known template extensions
</p>
<h4>Returns</h4>
<pre>
  Array:: Extension strings.
</pre>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 102</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">template_extensions</span>
      <span class="ruby-constant">EXTENSIONS</span>.<span class="ruby-identifier">keys</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="template_for" type="Public" category="Class" id="M000324">
          <parameters>(path, template_stack = [], locals=[])</parameters>

          <description><![CDATA[
            <p>
Gets the name of the template method for a particular path.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>A full path to find a template method for.

</td></tr>
<tr><td valign="top">template_stack&lt;Array&gt;:</td><td>The template stack. Not used.

</td></tr>
<tr><td valign="top">locals&lt;Array[Symbol]&gt;:</td><td>The names of local variables

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">&lt;String&gt;:</td><td>name of the method that inlines the template.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 67</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">template_for</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">template_stack</span> = [], <span class="ruby-identifier">locals</span>=[])
      <span class="ruby-identifier">path</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">path</span>)
      
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">needs_compilation?</span>(<span class="ruby-identifier">path</span>, <span class="ruby-identifier">locals</span>)
        <span class="ruby-identifier">file</span> = <span class="ruby-constant">Dir</span>[<span class="ruby-node">&quot;#{path}.{#{template_extensions.join(',')}}&quot;</span>].<span class="ruby-identifier">first</span>
        <span class="ruby-constant">METHOD_LIST</span>[<span class="ruby-identifier">path</span>] = <span class="ruby-identifier">file</span> <span class="ruby-value">? </span><span class="ruby-identifier">inline_template</span>(<span class="ruby-identifier">load_template_io</span>(<span class="ruby-identifier">file</span>), <span class="ruby-identifier">locals</span>) <span class="ruby-operator">:</span> <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-constant">METHOD_LIST</span>[<span class="ruby-identifier">path</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="template_name" type="Public" category="Class" id="M000322">
          <parameters>(path)</parameters>

          <description><![CDATA[
            <p>
Gets the template&#8217;s method name from a full path. This replaces
non-alphanumeric characters with __ and &quot;.&quot; with &quot;_&quot;
</p>
<p>
Collisions are potentially possible with something like: ~foo.bar and
__foo.bar or !foo.bar.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>A full path to convert to a valid Ruby method name

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The template name.

</td></tr>
</table>
<p>
We might want to replace this with something that varies the character
replaced based on the non-alphanumeric character to avoid edge-case
collisions.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 29</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">template_name</span>(<span class="ruby-identifier">path</span>)
      <span class="ruby-identifier">path</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">path</span>)      
      <span class="ruby-identifier">path</span>.<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">/[^\.a-zA-Z0-9]/</span>, <span class="ruby-value str">&quot;__&quot;</span>).<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">/\./</span>, <span class="ruby-value str">&quot;_&quot;</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::Template::Erubis" id="Merb::Template::Erubis">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="compile_template" type="Public" category="Class" id="M000330">
          <parameters>(io, name, locals, mod)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">io&lt;path&gt;:</td><td>An IO containing the full path of the template.

</td></tr>
<tr><td valign="top">name&lt;String&gt;:</td><td>The name of the method that will be created.

</td></tr>
<tr><td valign="top">locals&lt;Array[Symbol]&gt;:</td><td>A list of locals to assign from the args passed into the compiled template.

</td></tr>
<tr><td valign="top">mod&lt;Module&gt;:</td><td>The module that the compiled method will be placed into.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 193</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">compile_template</span>(<span class="ruby-identifier">io</span>, <span class="ruby-identifier">name</span>, <span class="ruby-identifier">locals</span>, <span class="ruby-identifier">mod</span>)
      <span class="ruby-identifier">template</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Erubis</span><span class="ruby-operator">::</span><span class="ruby-constant">BlockAwareEruby</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">io</span>.<span class="ruby-identifier">read</span>)
      <span class="ruby-identifier">_old_verbose</span>, <span class="ruby-identifier">$VERBOSE</span> = <span class="ruby-identifier">$VERBOSE</span>, <span class="ruby-keyword kw">nil</span>
      <span class="ruby-identifier">assigns</span> = <span class="ruby-identifier">locals</span>.<span class="ruby-identifier">inject</span>([]) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">assigns</span>, <span class="ruby-identifier">local</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">assigns</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">&quot;#{local} = _locals[#{local.inspect}]&quot;</span>
      <span class="ruby-keyword kw">end</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;;&quot;</span>)
      
      <span class="ruby-identifier">code</span> = <span class="ruby-node">&quot;def #{name}(_locals={}); #{assigns}; #{template.src}; end&quot;</span>
      <span class="ruby-identifier">mod</span>.<span class="ruby-identifier">module_eval</span> <span class="ruby-identifier">code</span>, <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">io</span>.<span class="ruby-identifier">path</span>)
      <span class="ruby-identifier">$VERBOSE</span> = <span class="ruby-identifier">_old_verbose</span>
      
      <span class="ruby-identifier">name</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::Template::Erubis::Mixin" id="Merb::Template::Erubis::Mixin">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37template.rb">lib/merb-core/controller/template.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="capture_erb" type="Public" category="Instance" id="M000331">
          <parameters>(*args, &amp;block)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">*args:</td><td>Arguments to pass to the block.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>The template block to call.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The output of the block.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Capture being used in a .html.erb page:
</p>
<pre>
  &lt;% @foo = capture do %&gt;
    &lt;p&gt;Some Foo content!&lt;/p&gt;
  &lt;% end %&gt;
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 224</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">capture_erb</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">_old_buf</span>, <span class="ruby-ivar">@_erb_buf</span> = <span class="ruby-ivar">@_erb_buf</span>, <span class="ruby-value str">&quot;&quot;</span>
        <span class="ruby-identifier">block</span>.<span class="ruby-identifier">call</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-identifier">ret</span> = <span class="ruby-ivar">@_erb_buf</span>
        <span class="ruby-ivar">@_erb_buf</span> = <span class="ruby-identifier">_old_buf</span>
        <span class="ruby-identifier">ret</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="concat_erb" type="Public" category="Instance" id="M000332">
          <parameters>(string, binding)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/template.rb, line 233</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">concat_erb</span>(<span class="ruby-identifier">string</span>, <span class="ruby-identifier">binding</span>)
        <span class="ruby-ivar">@_erb_buf</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">string</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Module name="Merb::MemcacheStore" id="Merb::MemcacheStore">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37memcached.rb">lib/merb-core/dispatch/session/memcached.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="delete_session" type="Public" category="Instance" id="M000335">
          <parameters>(session_id)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>ID of the session to delete.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memcached.rb, line 58</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">delete_session</span>(<span class="ruby-identifier">session_id</span>)
      <span class="ruby-identifier">delete</span>(<span class="ruby-node">&quot;session:#{session_id}&quot;</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="retrieve_session" type="Public" category="Instance" id="M000333">
          <parameters>(session_id)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>ID of the session to retrieve.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">ContainerSession:</td><td>The session corresponding to the ID.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memcached.rb, line 41</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">retrieve_session</span>(<span class="ruby-identifier">session_id</span>)
      <span class="ruby-identifier">get</span>(<span class="ruby-node">&quot;session:#{session_id}&quot;</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="store_session" type="Public" category="Instance" id="M000334">
          <parameters>(session_id, data)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>ID of the session to set.

</td></tr>
<tr><td valign="top">data&lt;ContainerSession&gt;:</td><td>The session to set.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memcached.rb, line 50</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">store_session</span>(<span class="ruby-identifier">session_id</span>, <span class="ruby-identifier">data</span>)
      <span class="ruby-identifier">set</span>(<span class="ruby-node">&quot;session:#{session_id}&quot;</span>, <span class="ruby-identifier">data</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::CookieSession" id="Merb::CookieSession">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37cookie.rb">lib/merb-core/dispatch/session/cookie.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::SessionContainer">Merb::SessionContainer</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
If you have more than 4K of session data or don&#8217;t want your data to
be visible to the user, pick another session store.
</p>
<p>
<a href="#Merb::CookieSession::CookieOverflow">CookieOverflow</a> is raised
if you attempt to store more than 4K of data. <a
href="#Merb::CookieSession::TamperedWithCookie">TamperedWithCookie</a> is
raised if the data integrity check fails.
</p>
<p>
A message digest is included with the cookie to ensure data integrity: a
user cannot alter session data without knowing the secret key included in
the hash.
</p>
<p>
To use Cookie Sessions, set in config/merb.yml
</p>
<pre>
 :session_secret_key - your secret digest key
 :session_store - cookie
</pre>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="MAX">

          <value>4096</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="DIGEST">

          <value>OpenSSL::Digest::Digest.new('SHA1')</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>


      <attribute-list>

        <attribute name="_original_session_data">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="generate" type="Public" category="Class" id="M000336">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Generates a new session ID and creates a new session.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>The new session.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 46</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">generate</span>
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>.<span class="ruby-identifier">rand_uuid</span>, <span class="ruby-value str">&quot;&quot;</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">_session_secret_key</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new" type="Public" category="Class" id="M000338">
          <parameters>(session_id, cookie, secret)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>A unique identifier for this session.

</td></tr>
<tr><td valign="top">cookie&lt;String&gt;:</td><td>The raw cookie data.

</td></tr>
<tr><td valign="top">secret&lt;String&gt;:</td><td>A session secret.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>blank or insufficiently long secret.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 78</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">session_id</span>, <span class="ruby-identifier">cookie</span>, <span class="ruby-identifier">secret</span>)
      <span class="ruby-keyword kw">super</span> <span class="ruby-identifier">session_id</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">secret</span>.<span class="ruby-identifier">blank?</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">secret</span>.<span class="ruby-identifier">length</span> <span class="ruby-operator">&lt;</span> <span class="ruby-value">16</span>
        <span class="ruby-identifier">msg</span> = <span class="ruby-value str">&quot;You must specify a session_secret_key in your init file, and it must be at least 16 characters&quot;</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn</span>(<span class="ruby-identifier">msg</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-identifier">msg</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-ivar">@secret</span> = <span class="ruby-identifier">secret</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">update</span>(<span class="ruby-identifier">unmarshal</span>(<span class="ruby-identifier">cookie</span>))
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="setup" type="Public" category="Class" id="M000337">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Sets up a new session on request: make it available on request instance.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The <a href="#Merb::Request">Merb::Request</a> that came in from <a
href="#Merb::Rack">Rack</a>.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>a <a href="#Merb::SessionContainer">SessionContainer</a>. If no sessions
were found,

</td></tr>
</table>
<p>
a new <a href="#Merb::SessionContainer">SessionContainer</a> will be
generated.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 60</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">setup</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-identifier">session</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>.<span class="ruby-identifier">rand_uuid</span>,
          <span class="ruby-identifier">request</span>.<span class="ruby-identifier">session_cookie_value</span>, <span class="ruby-identifier">request</span>.<span class="ruby-identifier">_session_secret_key</span>)
        <span class="ruby-identifier">session</span>.<span class="ruby-identifier">_original_session_data</span> = <span class="ruby-identifier">session</span>.<span class="ruby-identifier">to_cookie</span>
        <span class="ruby-identifier">request</span>.<span class="ruby-identifier">session</span> = <span class="ruby-identifier">session</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="finalize" type="Public" category="Instance" id="M000339">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Teardown and/or persist the current session.
</p>
<p>
If @_destroy is true, clear out the session completely, including removal
of the session cookie itself.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>request object created from <a href="#Merb::Rack">Rack</a> environment.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 98</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">finalize</span>(<span class="ruby-identifier">request</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@_destroy</span>
        <span class="ruby-identifier">request</span>.<span class="ruby-identifier">destroy_session_cookie</span>
      <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">_original_session_data</span> <span class="ruby-operator">!=</span> (<span class="ruby-identifier">new_session_data</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">to_cookie</span>)
        <span class="ruby-identifier">request</span>.<span class="ruby-identifier">set_session_cookie_value</span>(<span class="ruby-identifier">new_session_data</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="regenerate" type="Public" category="Instance" id="M000340">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Regenerates the session_id.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 109</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">regenerate</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>.<span class="ruby-identifier">rand_uuid</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_cookie" type="Public" category="Instance" id="M000341">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Creates the raw cookie string; includes an HMAC keyed message digest.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Cookie value.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">CookieOverflow:</td><td>More than 4K of data put into session.

</td></tr>
</table>
<h4>Notes</h4>
<p>
<a href="#Merb::Session">Session</a> data is converted to a <a
href="#Hash">Hash</a> first, since a container might choose to marshal it,
which would make it persist attributes like &#8216;needs_new_cookie&#8217;,
which it shouldn&#8217;t.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 127</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_cookie</span>
      <span class="ruby-keyword kw">unless</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">empty?</span>
        <span class="ruby-identifier">data</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">serialize</span>
        <span class="ruby-identifier">value</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">escape</span> <span class="ruby-node">&quot;#{data}--#{generate_digest(data)}&quot;</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">value</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">&gt;</span> <span class="ruby-constant">MAX</span>
          <span class="ruby-identifier">msg</span> = <span class="ruby-node">&quot;Cookies have limit of 4K. Session contents: #{data.inspect}&quot;</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">error!</span>(<span class="ruby-identifier">msg</span>)
          <span class="ruby-identifier">raise</span> <span class="ruby-constant">CookieOverflow</span>, <span class="ruby-identifier">msg</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">value</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Protected" category="Instance">


        <method name="serialize" type="Protected" category="Instance" id="M000342">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Serializes current session data as a <a href="#Hash">Hash</a>. Uses Base64
encoding for integrity.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Base64 encoded dump of the session hash.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 189</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">serialize</span>
      <span class="ruby-constant">Base64</span>.<span class="ruby-identifier">encode64</span>(<span class="ruby-constant">Marshal</span>.<span class="ruby-identifier">dump</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">to_hash</span>)).<span class="ruby-identifier">chop</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="unserialize" type="Protected" category="Instance" id="M000343">
          <parameters>(data)</parameters>

          <description><![CDATA[
            <p>
Unserializes the raw cookie data to a <a href="#Hash">Hash</a>
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>the session hash Base64 decoded from the data dump.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/cookie.rb, line 199</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">unserialize</span>(<span class="ruby-identifier">data</span>)
      <span class="ruby-constant">Marshal</span>.<span class="ruby-identifier">load</span>(<span class="ruby-constant">Base64</span>.<span class="ruby-identifier">decode64</span>(<span class="ruby-identifier">data</span>)) <span class="ruby-keyword kw">rescue</span> {}
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::CookieSession::CookieOverflow" id="Merb::CookieSession::CookieOverflow">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37cookie.rb">lib/merb-core/dispatch/session/cookie.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Raised when storing more than 4K of session data.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::CookieSession::TamperedWithCookie" id="Merb::CookieSession::TamperedWithCookie">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37cookie.rb">lib/merb-core/dispatch/session/cookie.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Raised when the cookie fails its integrity check.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::SessionContainer" id="Merb::SessionContainer">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37container.rb">lib/merb-core/dispatch/session/container.rb</a></infile>

      </infiles>


     <superclass>Mash</superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="needs_new_cookie">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="session_id">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="generate" type="Public" category="Class" id="M000345">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Generates a new session ID and creates a new session.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>The new session.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 27</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">generate</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="inherited" type="Public" category="Class" id="M000344">
          <parameters>(klass)</parameters>

          <description><![CDATA[
            <p>
Registers the subclass as an available session store type.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 16</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">inherited</span>(<span class="ruby-identifier">klass</span>)
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">subclasses</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span>
        <span class="ruby-keyword kw">super</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new" type="Public" category="Class" id="M000347">
          <parameters>(session_id)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>A unique identifier for this session.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 49</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">session_id</span>)
      <span class="ruby-ivar">@_destroy</span> = <span class="ruby-keyword kw">false</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span> = <span class="ruby-identifier">session_id</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="setup" type="Public" category="Class" id="M000346">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The <a href="#Merb::Request">Merb::Request</a> that came in from <a
href="#Merb::Rack">Rack</a>.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If no sessions were found, a new <a
href="#Merb::SessionContainer">SessionContainer</a> will be generated.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>a <a href="#Merb::SessionContainer">SessionContainer</a>.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 40</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">setup</span>(<span class="ruby-identifier">request</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="clear!" type="Public" category="Instance" id="M000350">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Destroy the current session - clears data and removes session cookie.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 80</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">clear!</span>
      <span class="ruby-ivar">@_destroy</span> = <span class="ruby-keyword kw">true</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">clear</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="finalize" type="Public" category="Instance" id="M000349">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Teardown and/or persist the current session.
</p>
<p>
If @_destroy is true, clear out the session completely, including removal
of the session cookie itself.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The <a href="#Merb::Request">Merb::Request</a> that came in from <a
href="#Merb::Rack">Rack</a>.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 74</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">finalize</span>(<span class="ruby-identifier">request</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="regenerate" type="Public" category="Instance" id="M000351">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Regenerate the session_id.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 88</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">regenerate</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="session_id=" type="Public" category="Instance" id="M000348">
          <parameters>(sid)</parameters>

          <description><![CDATA[
            <p>
Assigns a new session_id.
</p>
<p>
Recreates the cookie with the default expiration time. Useful during log in
for pushing back the expiration date.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/container.rb, line 60</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">session_id=</span>(<span class="ruby-identifier">sid</span>)
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">needs_new_cookie</span> = (<span class="ruby-ivar">@session_id</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-ivar">@session_id</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">sid</span>)
      <span class="ruby-ivar">@session_id</span> = <span class="ruby-identifier">sid</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Worker" id="Merb::Worker">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37worker.rb">lib/merb-core/dispatch/worker.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="thread">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000353">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Creates a new worker thread that loops over the work queue.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/worker.rb, line 29</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>
      <span class="ruby-ivar">@thread</span> = <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">loop</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-identifier">process_queue</span>
          <span class="ruby-keyword kw">break</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start" type="Public" category="Class" id="M000352">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Merb::Worker:</td><td>instance of a worker.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/worker.rb, line 12</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">start</span>
        <span class="ruby-ivar">@worker</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">new</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">at_exit</span> <span class="ruby-keyword kw">do</span> 
          <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span>.<span class="ruby-identifier">empty?</span>
            <span class="ruby-ivar">@worker</span>.<span class="ruby-identifier">thread</span>.<span class="ruby-identifier">abort_on_exception</span> = <span class="ruby-keyword kw">false</span>
            <span class="ruby-ivar">@worker</span>.<span class="ruby-identifier">thread</span>.<span class="ruby-identifier">raise</span>
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-ivar">@worker</span>.<span class="ruby-identifier">thread</span>.<span class="ruby-identifier">join</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-ivar">@worker</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="process_queue" type="Public" category="Instance" id="M000354">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Processes tasks in the <a href="#M000430">Merb::Dispatcher.work_queue</a>.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/worker.rb, line 41</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">process_queue</span>
      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-keyword kw">while</span> <span class="ruby-identifier">blk</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span>.<span class="ruby-identifier">pop</span>
           <span class="ruby-comment cmt"># we've been blocking on the queue waiting for an item sleeping.</span>
           <span class="ruby-comment cmt"># when someone pushes an item it wakes up this thread so we </span>
           <span class="ruby-comment cmt"># immediately pass execution to the scheduler so we don't </span>
           <span class="ruby-comment cmt"># accidentally run this block before the action finishes </span>
           <span class="ruby-comment cmt"># it's own processing</span>
          <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">pass</span>
          <span class="ruby-identifier">blk</span>.<span class="ruby-identifier">call</span>
          <span class="ruby-keyword kw">break</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Dispatcher</span>.<span class="ruby-identifier">work_queue</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Exception</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">%Q!Worker Thread Crashed with Exception:\n#{Merb.exception(e)}\nRestarting Worker Thread!</span>
        <span class="ruby-keyword kw">retry</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::MemorySessionStore" id="Merb::MemorySessionStore">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37memory.rb">lib/merb-core/dispatch/session/memory.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Used for handling multiple sessions stored in memory.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000355">
          <parameters>(ttl=nil)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">ttl&lt;Fixnum&gt;:</td><td><a href="#Merb::Session">Session</a> validity time in seconds. Defaults to
1 hour.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 44</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">ttl</span>=<span class="ruby-keyword kw">nil</span>)
      <span class="ruby-ivar">@sessions</span> = <span class="ruby-constant">Hash</span>.<span class="ruby-identifier">new</span>
      <span class="ruby-ivar">@timestamps</span> = <span class="ruby-constant">Hash</span>.<span class="ruby-identifier">new</span>
      <span class="ruby-ivar">@mutex</span> = <span class="ruby-constant">Mutex</span>.<span class="ruby-identifier">new</span>
      <span class="ruby-ivar">@session_ttl</span> = <span class="ruby-identifier">ttl</span> <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HOUR</span> <span class="ruby-comment cmt"># defaults 1 hour</span>
      <span class="ruby-identifier">start_timer</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="delete_session" type="Public" category="Instance" id="M000358">
          <parameters>(session_id)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>ID of the session to delete.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 82</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">delete_session</span>(<span class="ruby-identifier">session_id</span>)
      <span class="ruby-ivar">@mutex</span>.<span class="ruby-identifier">synchronize</span> {
        <span class="ruby-ivar">@timestamps</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">session_id</span>)
        <span class="ruby-ivar">@sessions</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">session_id</span>)
      }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reap_expired_sessions" type="Public" category="Instance" id="M000359">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Deletes any sessions that have reached their maximum validity.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 92</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reap_expired_sessions</span>
      <span class="ruby-ivar">@timestamps</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">session_id</span>,<span class="ruby-identifier">stamp</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">delete_session</span>(<span class="ruby-identifier">session_id</span>) <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">stamp</span> <span class="ruby-operator">+</span> <span class="ruby-ivar">@session_ttl</span>) <span class="ruby-operator">&lt;</span> <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span> 
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-constant">GC</span>.<span class="ruby-identifier">start</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="retrieve_session" type="Public" category="Instance" id="M000356">
          <parameters>(session_id)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>ID of the session to retrieve.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">ContainerSession:</td><td>The session corresponding to the ID.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 59</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">retrieve_session</span>(<span class="ruby-identifier">session_id</span>)
      <span class="ruby-ivar">@mutex</span>.<span class="ruby-identifier">synchronize</span> {
        <span class="ruby-ivar">@timestamps</span>[<span class="ruby-identifier">session_id</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
        <span class="ruby-ivar">@sessions</span>[<span class="ruby-identifier">session_id</span>]
      }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_timer" type="Public" category="Instance" id="M000360">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Starts the timer that will eventually reap outdated sessions.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 102</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">start_timer</span>
      <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">loop</span> {
          <span class="ruby-identifier">sleep</span> <span class="ruby-ivar">@session_ttl</span>
          <span class="ruby-identifier">reap_expired_sessions</span>
        } 
      <span class="ruby-keyword kw">end</span>  
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="store_session" type="Public" category="Instance" id="M000357">
          <parameters>(session_id, data)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">session_id&lt;String&gt;:</td><td>ID of the session to set.

</td></tr>
<tr><td valign="top">data&lt;ContainerSession&gt;:</td><td>The session to set.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 71</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">store_session</span>(<span class="ruby-identifier">session_id</span>, <span class="ruby-identifier">data</span>)
      <span class="ruby-ivar">@mutex</span>.<span class="ruby-identifier">synchronize</span> {
        <span class="ruby-ivar">@timestamps</span>[<span class="ruby-identifier">session_id</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
        <span class="ruby-ivar">@sessions</span>[<span class="ruby-identifier">session_id</span>] = <span class="ruby-identifier">data</span>
      }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::MemcacheSession" id="Merb::MemcacheSession">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37memcached.rb">lib/merb-core/dispatch/session/memcached.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::SessionStoreContainer">Merb::SessionStoreContainer</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Sessions stored in memcached.
</p>
<p>
Requires setup in your <tt>init.rb</tt>.
</p>
<p>
This for the &#8216;memcache-client&#8217; gem:
</p>
<pre>
  Merb::BootLoader.after_app_loads do
    require 'memcache'
    Merb::MemcacheSession.store =
       MemCache.new('127.0.0.1:11211', :namespace =&gt; 'my_app')
  end
</pre>
<p>
Or this for the &#8216;memcached&#8217; gem:
</p>
<pre>
  Merb::BootLoader.after_app_loads do
    require 'memcache'
    Merb::MemcacheSession.store =
       Memcached.new('127.0.0.1:11211', :namespace =&gt; 'my_app')
  end
</pre>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::AcceptType" id="Merb::AcceptType">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37responder.rb">lib/merb-core/controller/mixins/responder.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="index">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="media_range">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="quality">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="sub_type">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="type">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000361">
          <parameters>(entry,index)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">entry&lt;String&gt;:</td><td>The accept type pattern

</td></tr>
<tr><td valign="top">index&lt;Fixnum&gt;:</td><td>The index used for sorting accept types. A lower value indicates higher
priority.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 388</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">entry</span>,<span class="ruby-identifier">index</span>)
      <span class="ruby-ivar">@index</span> = <span class="ruby-identifier">index</span>
      
      <span class="ruby-identifier">entry</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/\s*([^;\s]*)\s*(;\s*q=\s*(.*))?/</span>
      <span class="ruby-ivar">@media_range</span>, <span class="ruby-identifier">quality</span> = <span class="ruby-identifier">$1</span>, <span class="ruby-identifier">$3</span>
      
      <span class="ruby-ivar">@type</span>, <span class="ruby-ivar">@sub_type</span> = <span class="ruby-ivar">@media_range</span>.<span class="ruby-identifier">split</span>(<span class="ruby-regexp re">%r{/}</span>)
      (<span class="ruby-identifier">quality</span> <span class="ruby-operator">||=</span> <span class="ruby-value">0</span><span class="ruby-value">.0</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@media_range</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;*/*&quot;</span>
      <span class="ruby-ivar">@quality</span> = <span class="ruby-identifier">quality</span> <span class="ruby-value">? </span>(<span class="ruby-identifier">quality</span>.<span class="ruby-identifier">to_f</span> <span class="ruby-operator">*</span> <span class="ruby-value">100</span>).<span class="ruby-identifier">to_i</span> <span class="ruby-operator">:</span> <span class="ruby-value">100</span>
      <span class="ruby-ivar">@quality</span> <span class="ruby-operator">*=</span> (<span class="ruby-identifier">mime</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">mime</span>[<span class="ruby-identifier">:default_quality</span>] <span class="ruby-operator">||</span> <span class="ruby-value">1</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="&lt;=&gt;" type="Public" category="Instance" id="M000362">
          <parameters>(entry)</parameters>

          <description><![CDATA[
            <p>
Compares two accept types for sorting purposes.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">entry&lt;AcceptType&gt;:</td><td>The accept type to compare.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>-1, 0 or 1, depending on whether entry has a lower, equal or higher
priority than the accept type being compared.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 411</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-operator">&lt;=&gt;</span>(<span class="ruby-identifier">entry</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">entry</span>.<span class="ruby-identifier">quality</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">quality</span>
        <span class="ruby-ivar">@index</span> <span class="ruby-operator">&lt;=&gt;</span> <span class="ruby-identifier">entry</span>.<span class="ruby-identifier">index</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">entry</span>.<span class="ruby-identifier">quality</span> <span class="ruby-operator">&lt;=&gt;</span> <span class="ruby-ivar">@quality</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="==" type="Public" category="Instance" id="M000364">
          <parameters>(entry)</parameters>

          <description><![CDATA[
            <p>
An alias for eql?.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 436</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-operator">==</span>(<span class="ruby-identifier">entry</span>); <span class="ruby-identifier">eql?</span>(<span class="ruby-identifier">entry</span>); <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="eql?" type="Public" category="Instance" id="M000363">
          <parameters>(entry)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">entry&lt;AcceptType&gt;:</td><td>The accept type to compare.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the accept types are equal, i.e. if the synonyms for this accept
type includes the entry media range.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 429</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">eql?</span>(<span class="ruby-identifier">entry</span>)
      <span class="ruby-identifier">synonyms</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">entry</span>.<span class="ruby-identifier">media_range</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="hash" type="Public" category="Instance" id="M000365">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>A hash based on the super range.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 442</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">hash</span>; <span class="ruby-identifier">super_range</span>.<span class="ruby-identifier">hash</span>; <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="mime" type="Public" category="Instance" id="M000367">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 459</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">mime</span>
      <span class="ruby-ivar">@mime</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">available_mime_types</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">ResponderMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">MIMES</span>[<span class="ruby-ivar">@media_range</span>]]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="super_range" type="Public" category="Instance" id="M000368">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The primary media range for this accept type, i.e. either the first synonym
or, if none exist, the media range.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 469</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">super_range</span>
      <span class="ruby-identifier">synonyms</span>.<span class="ruby-identifier">first</span> <span class="ruby-operator">||</span> <span class="ruby-ivar">@media_range</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="synonyms" type="Public" category="Instance" id="M000366">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Array[String]:</td><td>All Accept header values, such as &quot;text/html&quot;, that match this
type.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 449</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">synonyms</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-ivar">@syns</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@syns</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">_mime</span> = <span class="ruby-identifier">mime</span>
        <span class="ruby-ivar">@syns</span> = <span class="ruby-identifier">_mime</span>[<span class="ruby-identifier">:accepts</span>]
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-ivar">@syns</span> = []
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_s" type="Public" category="Instance" id="M000370">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The accept type as a string, i.e. the media range.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 486</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_s</span>
      <span class="ruby-ivar">@media_range</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_sym" type="Public" category="Instance" id="M000369">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<p>
Symbol: The type as a symbol, e.g. :html.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 477</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_sym</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">available_mime_types</span>.<span class="ruby-identifier">select</span>{<span class="ruby-operator">|</span><span class="ruby-identifier">k</span>,<span class="ruby-identifier">v</span><span class="ruby-operator">|</span> 
        <span class="ruby-identifier">v</span>[<span class="ruby-identifier">:accepts</span>] <span class="ruby-operator">==</span> <span class="ruby-identifier">synonyms</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">v</span>[<span class="ruby-identifier">:accepts</span>][<span class="ruby-value">0</span>] <span class="ruby-operator">==</span> <span class="ruby-identifier">synonyms</span>[<span class="ruby-value">0</span>]}.<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">first</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Responder" id="Merb::Responder">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37mixins37responder.rb">lib/merb-core/controller/mixins/responder.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="parse" type="Public" category="Class" id="M000371">
          <parameters>(accept_header)</parameters>

          <description><![CDATA[
            <p>
Parses the raw accept header into an array of sorted <a
href="#Merb::AcceptType">AcceptType</a> objects.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">accept_header&lt;~to_s&gt;:</td><td>The raw accept header.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[AcceptType]:</td><td>The accepted types.

</td></tr>
</table>
<p>
@api private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/mixins/responder.rb, line 367</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">parse</span>(<span class="ruby-identifier">accept_header</span>)
      <span class="ruby-identifier">headers</span> = <span class="ruby-identifier">accept_header</span>.<span class="ruby-identifier">split</span>(<span class="ruby-regexp re">/,/</span>)
      <span class="ruby-identifier">idx</span>, <span class="ruby-identifier">list</span> = <span class="ruby-value">0</span>, []
      <span class="ruby-keyword kw">while</span> <span class="ruby-identifier">idx</span> <span class="ruby-operator">&lt;</span> <span class="ruby-identifier">headers</span>.<span class="ruby-identifier">size</span>
        <span class="ruby-identifier">list</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">AcceptType</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">headers</span>[<span class="ruby-identifier">idx</span>], <span class="ruby-identifier">idx</span>)
        <span class="ruby-identifier">idx</span> <span class="ruby-operator">+=</span> <span class="ruby-value">1</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">list</span>.<span class="ruby-identifier">sort</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Config" id="Merb::Config">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37config.rb">lib/merb-core/config.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37session.rb">lib/merb-core/dispatch/session.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="configuration">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="[]" type="Public" category="Class" id="M000375">
          <parameters>(key)</parameters>

          <description><![CDATA[
            <p>
Retrieve the value of a config entry.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Object&gt;:</td><td>The key to retrieve the parameter for.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Object:</td><td>The value of the configuration parameter.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 79</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-operator">[]</span>(<span class="ruby-identifier">key</span>)
        (<span class="ruby-ivar">@configuration</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">setup</span>)[<span class="ruby-identifier">key</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="[]=" type="Public" category="Class" id="M000376">
          <parameters>(key, val)</parameters>

          <description><![CDATA[
            <p>
Set the value of a config entry.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Object&gt;:</td><td>The key to set the parameter for.

</td></tr>
<tr><td valign="top">val&lt;Object&gt;:</td><td>The value of the parameter.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 90</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-operator">[]=</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">val</span>)
        (<span class="ruby-ivar">@configuration</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">setup</span>)[<span class="ruby-identifier">key</span>] = <span class="ruby-identifier">val</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="configure" type="Public" category="Class" id="M000383">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Set configuration parameters from a code block, where each method evaluates
to a config parameter.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>Configuration parameter block.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  # Set environment and log level.
  Merb::Config.configure do
    environment &quot;development&quot;
    log_level   &quot;debug&quot;
    log_file    Merb.root / &quot;log&quot; / &quot;special.log&quot;
  end
</pre>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 428</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">configure</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-constant">ConfigBlock</span>.<span class="ruby-identifier">new</span>(<span class="ruby-keyword kw">self</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="defaults" type="Public" category="Class" id="M000372">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the hash of default config values for <a href="#Merb">Merb</a>.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The defaults for the config.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 15</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">defaults</span>
        <span class="ruby-ivar">@defaults</span> <span class="ruby-operator">||=</span> {
          <span class="ruby-identifier">:host</span>                   =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;0.0.0.0&quot;</span>,
          <span class="ruby-identifier">:port</span>                   =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;4000&quot;</span>,
          <span class="ruby-identifier">:adapter</span>                =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;runner&quot;</span>,
          <span class="ruby-identifier">:reload_classes</span>         =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>,
          <span class="ruby-identifier">:fork_for_class_load</span>    =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">forking_environment?</span>,
          <span class="ruby-identifier">:environment</span>            =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;development&quot;</span>,
          <span class="ruby-identifier">:merb_root</span>              =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">pwd</span>,
          <span class="ruby-identifier">:use_mutex</span>              =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>,
          <span class="ruby-identifier">:log_delimiter</span>          =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot; ~ &quot;</span>,
          <span class="ruby-identifier">:log_auto_flush</span>         =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>,
          <span class="ruby-identifier">:log_level</span>              =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:info</span>,
          <span class="ruby-identifier">:log_stream</span>             =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">STDOUT</span>,
          <span class="ruby-identifier">:disabled_components</span>    =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">on_windows?</span> <span class="ruby-value">? </span>[<span class="ruby-identifier">:signals</span>] <span class="ruby-operator">:</span> [],
          <span class="ruby-identifier">:deferred_actions</span>       =<span class="ruby-operator">&gt;</span> [],
          <span class="ruby-identifier">:verbose</span>                =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">false</span>,
          <span class="ruby-identifier">:name</span>                   =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;merb&quot;</span>
        }
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="delete" type="Public" category="Class" id="M000377">
          <parameters>(key)</parameters>

          <description><![CDATA[
            <p>
Removes the value of a config entry.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Object&gt;:</td><td>The key of the parameter to delete.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Object:</td><td>The value of the removed entry.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 103</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">delete</span>(<span class="ruby-identifier">key</span>)
        <span class="ruby-ivar">@configuration</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">key</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="fetch" type="Public" category="Class" id="M000378">
          <parameters>(key, default)</parameters>

          <description><![CDATA[
            <p>
Retrieves the value of a config entry, returning the provided default if
the key is not present
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Object&gt;:</td><td>The key to retrieve the parameter for.

</td></tr>
<tr><td valign="top">default&lt;Object&gt;:</td><td>The default value to return if the parameter is not set.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Object:</td><td>The value of the configuration parameter or the default.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 118</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">fetch</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">default</span>)
        <span class="ruby-ivar">@configuration</span>.<span class="ruby-identifier">fetch</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">default</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="key?" type="Public" category="Class" id="M000374">
          <parameters>(key)</parameters>

          <description><![CDATA[
            <p>
Detects whether the provided key is in the config.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">key&lt;Object&gt;:</td><td>The key to check.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the key exists in the config.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 66</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">key?</span>(<span class="ruby-identifier">key</span>)
        <span class="ruby-ivar">@configuration</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">key</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="method_missing" type="Public" category="Class" id="M000384">
          <parameters>(method, *args)</parameters>

          <description><![CDATA[
            <p>
Allows retrieval of single key config values via Merb.config.&lt;key&gt;
Allows single key assignment via Merb.config.&lt;key&gt; = &#8230;
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">method&lt;~to_s&gt;:</td><td>Method name as hash key value.

</td></tr>
<tr><td valign="top">*args:</td><td>Value to set the configuration parameter to.

</td></tr>
</table>
<h4>Returns</h4>
<p>
The value of the entry fetched or assigned to.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 444</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">method_missing</span>(<span class="ruby-identifier">method</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">method</span>.<span class="ruby-identifier">to_s</span>[<span class="ruby-value">-1</span>,<span class="ruby-value">1</span>] <span class="ruby-operator">==</span> <span class="ruby-value str">'='</span>
          <span class="ruby-ivar">@configuration</span>[<span class="ruby-identifier">method</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">tr</span>(<span class="ruby-value str">'='</span>,<span class="ruby-value str">''</span>).<span class="ruby-identifier">to_sym</span>] = <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-ivar">@configuration</span>[<span class="ruby-identifier">method</span>]
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="parse_args" type="Public" category="Class" id="M000382">
          <parameters>(argv = ARGV)</parameters>

          <description><![CDATA[
            <p>
Parses the command line arguments and stores them in the config.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">argv&lt;String&gt;:</td><td>The command line arguments. Defaults to <tt>ARGV</tt>.

</td></tr>
</table>
<h4>Returns</h4>
<p>
The configuration as a hash.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 181</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">parse_args</span>(<span class="ruby-identifier">argv</span> = <span class="ruby-constant">ARGV</span>)
        <span class="ruby-ivar">@configuration</span> <span class="ruby-operator">||=</span> {}
        <span class="ruby-comment cmt"># Our primary configuration hash for the length of this method</span>
        <span class="ruby-identifier">options</span> = {}

        <span class="ruby-comment cmt"># Environment variables always win</span>
        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:environment</span>] = <span class="ruby-constant">ENV</span>[<span class="ruby-value str">&quot;MERB_ENV&quot;</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-constant">ENV</span>[<span class="ruby-value str">&quot;MERB_ENV&quot;</span>]
        
        <span class="ruby-comment cmt"># Build a parser for the command line arguments</span>
        <span class="ruby-identifier">opts</span> = <span class="ruby-constant">OptionParser</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">opts</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">version</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">VERSION</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">banner</span> = <span class="ruby-value str">&quot;Usage: merb [uGdcIpPhmailLerkKX] [argument]&quot;</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">define_head</span> <span class="ruby-value str">&quot;Merb. Pocket rocket web framework&quot;</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">separator</span> <span class="ruby-value str">'*'</span> <span class="ruby-operator">*</span> <span class="ruby-value">80</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">separator</span> <span class="ruby-value str">&quot;If no flags are given, Merb starts in the &quot;</span> \
            <span class="ruby-value str">&quot;foreground on port 4000.&quot;</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">separator</span> <span class="ruby-value str">'*'</span> <span class="ruby-operator">*</span> <span class="ruby-value">80</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-u&quot;</span>, <span class="ruby-value str">&quot;--user USER&quot;</span>, <span class="ruby-value str">&quot;This flag is for having merb run &quot;</span> \
                  <span class="ruby-value str">&quot;as a user other than the one currently logged in. Note: &quot;</span> \
                  <span class="ruby-value str">&quot;if you set this you must also provide a --group option &quot;</span> \
                  <span class="ruby-value str">&quot;for it to take effect.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">user</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:user</span>] = <span class="ruby-identifier">user</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-G&quot;</span>, <span class="ruby-value str">&quot;--group GROUP&quot;</span>, <span class="ruby-value str">&quot;This flag is for having merb run &quot;</span> \
                  <span class="ruby-value str">&quot;as a group other than the one currently logged in. Note: &quot;</span> \
                  <span class="ruby-value str">&quot;if you set this you must also provide a --user option &quot;</span> \
                  <span class="ruby-value str">&quot;for it to take effect.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">group</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:group</span>] = <span class="ruby-identifier">group</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-d&quot;</span>, <span class="ruby-value str">&quot;--daemonize&quot;</span>, <span class="ruby-value str">&quot;This will run a single merb in the &quot;</span> \
                  <span class="ruby-value str">&quot;background.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">daemon</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:daemonize</span>] = <span class="ruby-keyword kw">true</span>
          <span class="ruby-keyword kw">end</span>
          
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-N&quot;</span>, <span class="ruby-value str">&quot;--no-daemonize&quot;</span>, <span class="ruby-value str">&quot;This will allow you to run a &quot;</span> \
                  <span class="ruby-value str">&quot;cluster in console mode&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">no_daemon</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:daemonize</span>] = <span class="ruby-keyword kw">false</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-c&quot;</span>, <span class="ruby-value str">&quot;--cluster-nodes NUM_MERBS&quot;</span>, <span class="ruby-constant">Integer</span>, 
                  <span class="ruby-value str">&quot;Number of merb daemons to run.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">nodes</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:daemonize</span>] = <span class="ruby-keyword kw">true</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:daemonize</span>)
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:cluster</span>] = <span class="ruby-identifier">nodes</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-I&quot;</span>, <span class="ruby-value str">&quot;--init-file FILE&quot;</span>, <span class="ruby-value str">&quot;File to use for initialization &quot;</span> \
                  <span class="ruby-value str">&quot;on load, defaults to config/init.rb&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">init_file</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:init_file</span>] = <span class="ruby-identifier">init_file</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-p&quot;</span>, <span class="ruby-value str">&quot;--port PORTNUM&quot;</span>, <span class="ruby-constant">Integer</span>, <span class="ruby-value str">&quot;Port to run merb on, &quot;</span> \
                  <span class="ruby-value str">&quot;defaults to 4000.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">port</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:port</span>] = <span class="ruby-identifier">port</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-o&quot;</span>, <span class="ruby-value str">&quot;--socket-file FILE&quot;</span>, <span class="ruby-value str">&quot;Socket file to run merb on, &quot;</span> \
                  <span class="ruby-value str">&quot;defaults to [Merb.root]/log/merb.sock. This is for &quot;</span> \
                  <span class="ruby-value str">&quot;web servers, like thin, that use sockets.&quot;</span> \
                  <span class="ruby-value str">&quot;Specify this *only* if you *must*.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">port</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:socket_file</span>] = <span class="ruby-identifier">port</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-s&quot;</span>, <span class="ruby-value str">&quot;--socket SOCKNUM&quot;</span>, <span class="ruby-constant">Integer</span>, <span class="ruby-value str">&quot;Socket number to run &quot;</span> \
                  <span class="ruby-value str">&quot;merb on, defaults to 0.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">port</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:socket</span>] = <span class="ruby-identifier">port</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-n&quot;</span>, <span class="ruby-value str">&quot;--name NAME&quot;</span>, <span class="ruby-constant">String</span>, <span class="ruby-value str">&quot;Set the name of the application. &quot;</span>\
                  <span class="ruby-value str">&quot;This is used in the process title and log file names.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:name</span>] = <span class="ruby-identifier">name</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-P&quot;</span>, <span class="ruby-value str">&quot;--pid PIDFILE&quot;</span>, <span class="ruby-value str">&quot;PID file, defaults to &quot;</span> \
                  <span class="ruby-value str">&quot;[Merb.root]/log/merb.main.pid for the master process and&quot;</span> \
                  <span class="ruby-value str">&quot;[Merb.root]/log/merb.[port number].pid for worker &quot;</span> \
                  <span class="ruby-value str">&quot;processes. For clusters, use %s to specify where &quot;</span> \
                  <span class="ruby-value str">&quot;in the file merb should place the port number. For &quot;</span> \
                  <span class="ruby-value str">&quot;instance: -P myapp.%s.pid&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">pid_file</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:pid_file</span>] = <span class="ruby-identifier">pid_file</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-h&quot;</span>, <span class="ruby-value str">&quot;--host HOSTNAME&quot;</span>, <span class="ruby-value str">&quot;Host to bind to &quot;</span> \
                  <span class="ruby-value str">&quot;(default is 0.0.0.0).&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">host</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:host</span>] = <span class="ruby-identifier">host</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-m&quot;</span>, <span class="ruby-value str">&quot;--merb-root /path/to/approot&quot;</span>, <span class="ruby-value str">&quot;The path to the &quot;</span> \
                  <span class="ruby-value str">&quot;Merb.root for the app you want to run &quot;</span> \
                  <span class="ruby-value str">&quot;(default is current working directory).&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">root</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:merb_root</span>] = <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-identifier">root</span>)
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">adapters</span> = [<span class="ruby-identifier">:mongrel</span>, <span class="ruby-identifier">:emongrel</span>, <span class="ruby-identifier">:thin</span>, <span class="ruby-identifier">:ebb</span>, <span class="ruby-identifier">:fastcgi</span>, <span class="ruby-identifier">:webrick</span>]

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-a&quot;</span>, <span class="ruby-value str">&quot;--adapter ADAPTER&quot;</span>,
                  <span class="ruby-value str">&quot;The rack adapter to use to run merb (default is mongrel)&quot;</span> \
                  <span class="ruby-node">&quot;[#{adapters.join(', ')}]&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">adapter</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:adapter</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">adapter</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-R&quot;</span>, <span class="ruby-value str">&quot;--rackup FILE&quot;</span>, <span class="ruby-value str">&quot;Load an alternate Rack config &quot;</span> \
                  <span class="ruby-value str">&quot;file (default is config/rack.rb)&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">rackup</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:rackup</span>] = <span class="ruby-identifier">rackup</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-i&quot;</span>, <span class="ruby-value str">&quot;--irb-console&quot;</span>, <span class="ruby-value str">&quot;This flag will start merb in &quot;</span> \
                  <span class="ruby-value str">&quot;irb console mode. All your models and other classes will &quot;</span> \
                  <span class="ruby-value str">&quot;be available for you in an irb session.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">console</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:adapter</span>] = <span class="ruby-value str">'irb'</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-S&quot;</span>, <span class="ruby-value str">&quot;--sandbox&quot;</span>, <span class="ruby-value str">&quot;This flag will enable a sandboxed irb &quot;</span> \
                  <span class="ruby-value str">&quot;console. If your ORM supports transactions, all edits will &quot;</span> \
                  <span class="ruby-value str">&quot;be rolled back on exit.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">sandbox</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:sandbox</span>] = <span class="ruby-keyword kw">true</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-l&quot;</span>, <span class="ruby-value str">&quot;--log-level LEVEL&quot;</span>, <span class="ruby-value str">&quot;Log levels can be set to any of &quot;</span> \
                  <span class="ruby-value str">&quot;these options: debug &lt; info &lt; warn &lt; error &lt; &quot;</span> \
                  <span class="ruby-value str">&quot;fatal (default is info)&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">log_level</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:log_level</span>] = <span class="ruby-identifier">log_level</span>.<span class="ruby-identifier">to_sym</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:force_logging</span>] = <span class="ruby-keyword kw">true</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-L&quot;</span>, <span class="ruby-value str">&quot;--log LOGFILE&quot;</span>, <span class="ruby-value str">&quot;A string representing the logfile to &quot;</span> \
                  <span class="ruby-value str">&quot;use. Defaults to [Merb.root]/log/merb.[main].log for the &quot;</span> \
                  <span class="ruby-value str">&quot;master process and [Merb.root]/log/merb[port number].log&quot;</span> \
                  <span class="ruby-value str">&quot;for worker processes&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">log_file</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:log_file</span>] = <span class="ruby-identifier">log_file</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:force_logging</span>] = <span class="ruby-keyword kw">true</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-e&quot;</span>, <span class="ruby-value str">&quot;--environment STRING&quot;</span>, <span class="ruby-value str">&quot;Environment to run Merb &quot;</span> \
                  <span class="ruby-value str">&quot;under [development, production, testing] &quot;</span> \
                  <span class="ruby-value str">&quot;(default is development)&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">env</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:environment</span>] = <span class="ruby-identifier">env</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-r&quot;</span>, <span class="ruby-value str">&quot;--script-runner ['RUBY CODE'| FULL_SCRIPT_PATH]&quot;</span>,
                  <span class="ruby-value str">&quot;Command-line option to run scripts and/or code in the &quot;</span> \
                  <span class="ruby-value str">&quot;merb app.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">code_or_file</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:runner_code</span>] = <span class="ruby-identifier">code_or_file</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:adapter</span>] = <span class="ruby-value str">'runner'</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-K&quot;</span>, <span class="ruby-value str">&quot;--graceful PORT or all&quot;</span>, <span class="ruby-value str">&quot;Gracefully kill one &quot;</span> \
                  <span class="ruby-value str">&quot;merb proceses by port number.  Use merb -K all to &quot;</span> \
                  <span class="ruby-value str">&quot;gracefully kill all merbs.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">ports</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:action</span>] = <span class="ruby-identifier">:kill</span>
            <span class="ruby-identifier">ports</span> = <span class="ruby-value str">&quot;main&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">ports</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;all&quot;</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:port</span>] = <span class="ruby-identifier">ports</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-k&quot;</span>, <span class="ruby-value str">&quot;--kill PORT&quot;</span>, <span class="ruby-value str">&quot;Force kill one merb worker &quot;</span> \
                  <span class="ruby-value str">&quot;by port number. This will cause the worker to&quot;</span> \
                  <span class="ruby-value str">&quot;be respawned.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">port</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:action</span>] = <span class="ruby-identifier">:kill_9</span>
            <span class="ruby-identifier">port</span> = <span class="ruby-value str">&quot;main&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">port</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;all&quot;</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:port</span>] = <span class="ruby-identifier">port</span>
          <span class="ruby-keyword kw">end</span>
          
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;--fast-deploy&quot;</span>, <span class="ruby-value str">&quot;Reload the code, but not your&quot;</span> \
            <span class="ruby-value str">&quot;init.rb or gems&quot;</span>) <span class="ruby-keyword kw">do</span>
              <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:action</span>] = <span class="ruby-identifier">:fast_deploy</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-comment cmt"># @todo Do we really need this flag? It seems unlikely to want to</span>
          <span class="ruby-comment cmt">#   change the mutex from the command-line.</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-X&quot;</span>, <span class="ruby-value str">&quot;--mutex on/off&quot;</span>, <span class="ruby-value str">&quot;This flag is for turning the &quot;</span> \
                  <span class="ruby-value str">&quot;mutex lock on and off.&quot;</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">mutex</span><span class="ruby-operator">|</span>
            <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">mutex</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;off&quot;</span>
              <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:use_mutex</span>] = <span class="ruby-keyword kw">false</span>
            <span class="ruby-keyword kw">else</span>
              <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:use_mutex</span>] = <span class="ruby-keyword kw">true</span>
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-D&quot;</span>, <span class="ruby-value str">&quot;--debugger&quot;</span>, <span class="ruby-value str">&quot;Run merb using rDebug.&quot;</span>) <span class="ruby-keyword kw">do</span>
            <span class="ruby-keyword kw">begin</span>
              <span class="ruby-identifier">require</span> <span class="ruby-value str">&quot;ruby-debug&quot;</span>
              <span class="ruby-constant">Debugger</span>.<span class="ruby-identifier">start</span>

              <span class="ruby-comment cmt"># Load up any .rdebugrc files we find</span>
              [<span class="ruby-value str">&quot;.&quot;</span>, <span class="ruby-constant">ENV</span>[<span class="ruby-value str">&quot;HOME&quot;</span>], <span class="ruby-constant">ENV</span>[<span class="ruby-value str">&quot;HOMEPATH&quot;</span>]].<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">script_dir</span><span class="ruby-operator">|</span>
                <span class="ruby-identifier">script_file</span> = <span class="ruby-node">&quot;#{script_dir}/.rdebugrc&quot;</span>
                <span class="ruby-constant">Debugger</span>.<span class="ruby-identifier">run_script</span> <span class="ruby-identifier">script_file</span>, <span class="ruby-constant">StringIO</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-identifier">script_file</span>)
              <span class="ruby-keyword kw">end</span>

              <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Debugger</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:settings</span>)
                <span class="ruby-constant">Debugger</span>.<span class="ruby-identifier">settings</span>[<span class="ruby-identifier">:autoeval</span>] = <span class="ruby-keyword kw">true</span>
              <span class="ruby-keyword kw">end</span>
              <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;Debugger enabled&quot;</span>
            <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">LoadError</span>
              <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;You need to install ruby-debug to run the server in &quot;</span> \
                <span class="ruby-value str">&quot;debugging mode. With gems, use `gem install ruby-debug'&quot;</span>
              <span class="ruby-identifier">exit</span>
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-V&quot;</span>, <span class="ruby-value str">&quot;--verbose&quot;</span>, <span class="ruby-value str">&quot;Print extra information&quot;</span>) <span class="ruby-keyword kw">do</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:verbose</span>] = <span class="ruby-keyword kw">true</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-C&quot;</span>, <span class="ruby-value str">&quot;--console-trap&quot;</span>, <span class="ruby-value str">&quot;Enter an irb console on ^C&quot;</span>) <span class="ruby-keyword kw">do</span>
            <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:console_trap</span>] = <span class="ruby-keyword kw">true</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">on</span>(<span class="ruby-value str">&quot;-?&quot;</span>, <span class="ruby-value str">&quot;-H&quot;</span>, <span class="ruby-value str">&quot;--help&quot;</span>, <span class="ruby-value str">&quot;Show this help message&quot;</span>) <span class="ruby-keyword kw">do</span>
            <span class="ruby-identifier">puts</span> <span class="ruby-identifier">opts</span>
            <span class="ruby-identifier">exit</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-comment cmt"># Parse what we have on the command line</span>
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">parse!</span>(<span class="ruby-identifier">argv</span>)
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">OptionParser</span><span class="ruby-operator">::</span><span class="ruby-constant">InvalidOption</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-identifier">e</span>.<span class="ruby-identifier">message</span>, <span class="ruby-identifier">e</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>.<span class="ruby-identifier">setup</span>(<span class="ruby-identifier">options</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="session_stores" type="Public" category="Class" id="M000385">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns stores list constructed from configured session stores (:<a
href="#M000385">session_stores</a> config option) or default one
(:session_store config option).
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session.rb, line 11</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_stores</span>
      <span class="ruby-ivar">@session_stores</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
        <span class="ruby-identifier">config_stores</span> = <span class="ruby-constant">Array</span>(
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_stores</span>] <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_store</span>]
        )
        <span class="ruby-identifier">config_stores</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">name</span><span class="ruby-operator">|</span> <span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_sym</span> }
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="setup" type="Public" category="Class" id="M000381">
          <parameters>(settings = {})</parameters>

          <description><![CDATA[
            <p>
Sets up the configuration by storing the given settings.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">settings&lt;Hash&gt;:</td><td>Configuration settings to use. These are merged with the defaults.

</td></tr>
</table>
<h4>Returns</h4>
<p>
The configuration as a hash.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 153</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">setup</span>(<span class="ruby-identifier">settings</span> = {})
        <span class="ruby-identifier">config</span> = <span class="ruby-identifier">defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">settings</span>)
        
        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">config</span>[<span class="ruby-identifier">:reload_classes</span>]
          <span class="ruby-identifier">config</span>[<span class="ruby-identifier">:fork_for_class_load</span>] = <span class="ruby-keyword kw">false</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-identifier">dev_mode</span> = <span class="ruby-identifier">config</span>[<span class="ruby-identifier">:environment</span>] <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;development&quot;</span>
        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">config</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:reap_workers_quickly</span>)
          <span class="ruby-identifier">config</span>[<span class="ruby-identifier">:reap_workers_quickly</span>] = <span class="ruby-identifier">dev_mode</span> <span class="ruby-operator">&amp;</span> <span class="ruby-operator">!</span><span class="ruby-identifier">config</span>[<span class="ruby-identifier">:cluster</span>]
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">config</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:bind_fail_fatal</span>)
          <span class="ruby-identifier">config</span>[<span class="ruby-identifier">:bind_fail_fatal</span>] = <span class="ruby-identifier">dev_mode</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-ivar">@configuration</span> = <span class="ruby-identifier">config</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_hash" type="Public" category="Class" id="M000379">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the configuration as a hash.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The config as a hash.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 128</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_hash</span>
        <span class="ruby-ivar">@configuration</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_yaml" type="Public" category="Class" id="M000380">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the config as YAML.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The config as YAML.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 138</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_yaml</span>
        <span class="ruby-identifier">require</span> <span class="ruby-value str">&quot;yaml&quot;</span>
        <span class="ruby-ivar">@configuration</span>.<span class="ruby-identifier">to_yaml</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="use" type="Public" category="Class" id="M000373">
          <parameters>() {|@configuration| ...}</parameters>

          <description><![CDATA[
            <p>
Yields the configuration.
</p>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">c&lt;Hash&gt;:</td><td>The configuration parameters.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  Merb::Config.use do |config|
    config[:exception_details] = false
    config[:log_stream]        = STDOUT
  end
</pre>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 51</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">use</span>
        <span class="ruby-ivar">@configuration</span> <span class="ruby-operator">||=</span> {}
        <span class="ruby-keyword kw">yield</span> <span class="ruby-ivar">@configuration</span>
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Config::ConfigBlock" id="Merb::Config::ConfigBlock">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37config.rb">lib/merb-core/config.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000386">
          <parameters>(klass, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Evaluates the provided block, where any call to a method causes #[]= to be
called on klass with the method name as the key and the arguments as the
value.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;Object~[]=&gt;:</td><td>The object on which to assign values.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>The block which specifies the config values to set.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 468</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-ivar">@klass</span> = <span class="ruby-identifier">klass</span>
        <span class="ruby-identifier">instance_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="method_missing" type="Public" category="Instance" id="M000387">
          <parameters>(method, *args)</parameters>

          <description><![CDATA[
            <p>
Assign args as the value of the entry keyed by method.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/config.rb, line 476</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">method_missing</span>(<span class="ruby-identifier">method</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-ivar">@klass</span>[<span class="ruby-identifier">method</span>] = <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::SessionStoreContainer" id="Merb::SessionStoreContainer">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37store_container.rb">lib/merb-core/dispatch/session/store_container.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::SessionContainer">Merb::SessionContainer</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="_fingerprint">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="generate" type="Public" category="Class" id="M000388">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Generates a new session ID and creates a new session.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionStoreContainer:</td><td>The new session.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/store_container.rb, line 56</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">generate</span>
        <span class="ruby-identifier">session</span> = <span class="ruby-identifier">new</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>.<span class="ruby-identifier">rand_uuid</span>)
        <span class="ruby-identifier">session</span>.<span class="ruby-identifier">needs_new_cookie</span> = <span class="ruby-keyword kw">true</span>
        <span class="ruby-identifier">session</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="setup" type="Public" category="Class" id="M000389">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Setups a new session or retrieves an existing session.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The <a href="#Merb::Request">Merb::Request</a> that came in from <a
href="#Merb::Rack">Rack</a>.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If no sessions were found, a new <a
href="#Merb::SessionContainer">SessionContainer</a> will be generated.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SessionContainer:</td><td>a <a href="#Merb::SessionContainer">SessionContainer</a>.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/store_container.rb, line 74</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">setup</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-identifier">session</span> = <span class="ruby-identifier">retrieve</span>(<span class="ruby-identifier">request</span>.<span class="ruby-identifier">session_id</span>)
        <span class="ruby-identifier">request</span>.<span class="ruby-identifier">session</span> = <span class="ruby-identifier">session</span>
        <span class="ruby-comment cmt"># TODO Marshal.dump is slow - needs optimization</span>
        <span class="ruby-identifier">session</span>.<span class="ruby-identifier">_fingerprint</span> = <span class="ruby-constant">Marshal</span>.<span class="ruby-identifier">dump</span>(<span class="ruby-identifier">request</span>.<span class="ruby-identifier">session</span>.<span class="ruby-identifier">to_hash</span>).<span class="ruby-identifier">hash</span>
        <span class="ruby-identifier">session</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="finalize" type="Public" category="Instance" id="M000390">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Teardown and/or persist the current session.
</p>
<p>
If @_destroy is true, clear out the session completely, including removal
of the session cookie itself.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The <a href="#Merb::Request">Merb::Request</a> that came in from <a
href="#Merb::Rack">Rack</a>.

</td></tr>
</table>
<h4>Notes</h4>
<p>
The data (self) is converted to a <a href="#Hash">Hash</a> first, since a
container might choose to do a full Marshal on the data, which would make
it persist attributes like &#8216;needs_new_cookie&#8217;, which it
shouldn&#8217;t.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/store_container.rb, line 135</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">finalize</span>(<span class="ruby-identifier">request</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@_destroy</span>
        <span class="ruby-identifier">store</span>.<span class="ruby-identifier">delete_session</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span>)
        <span class="ruby-identifier">request</span>.<span class="ruby-identifier">destroy_session_cookie</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">_fingerprint</span> <span class="ruby-operator">!=</span> <span class="ruby-constant">Marshal</span>.<span class="ruby-identifier">dump</span>(<span class="ruby-identifier">data</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">to_hash</span>).<span class="ruby-identifier">hash</span>
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-identifier">store</span>.<span class="ruby-identifier">store_session</span>(<span class="ruby-identifier">request</span>.<span class="ruby-identifier">session</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">session_store_type</span>).<span class="ruby-identifier">session_id</span>, <span class="ruby-identifier">data</span>)
          <span class="ruby-keyword kw">rescue</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">err</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;Could not persist session to #{self.class.name}: #{err.message}&quot;</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">needs_new_cookie</span> <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>.<span class="ruby-identifier">needs_new_cookie?</span>
          <span class="ruby-identifier">request</span>.<span class="ruby-identifier">set_session_id_cookie</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="regenerate" type="Public" category="Instance" id="M000391">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Regenerate the session ID.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/store_container.rb, line 156</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">regenerate</span>
      <span class="ruby-identifier">store</span>.<span class="ruby-identifier">delete_session</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span>)
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>.<span class="ruby-identifier">rand_uuid</span>
      <span class="ruby-identifier">store</span>.<span class="ruby-identifier">store_session</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">session_id</span>, <span class="ruby-keyword kw">self</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Controller" id="Merb::Controller">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37merb_controller.rb">lib/merb-core/controller/merb_controller.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::AbstractController">Merb::AbstractController</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="headers">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[
:api: public

]]></description>
        </attribute>

        <attribute name="request">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[
:api: public

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="_callable_methods" type="Public" category="Class" id="M000398">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
All methods that are callable as actions.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array:</td><td>A list of method names that are also actions

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 107</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_callable_methods</span>
    <span class="ruby-identifier">callables</span> = []
    <span class="ruby-identifier">klass</span> = <span class="ruby-keyword kw">self</span>
    <span class="ruby-keyword kw">begin</span>
      <span class="ruby-identifier">callables</span> <span class="ruby-operator">&lt;&lt;</span> (<span class="ruby-identifier">klass</span>.<span class="ruby-identifier">public_instance_methods</span>(<span class="ruby-keyword kw">false</span>) <span class="ruby-operator">+</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_shown_actions</span>) <span class="ruby-operator">-</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_hidden_actions</span>
      <span class="ruby-identifier">klass</span> = <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">superclass</span>
    <span class="ruby-keyword kw">end</span> <span class="ruby-keyword kw">until</span> <span class="ruby-identifier">klass</span> <span class="ruby-operator">==</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">AbstractController</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">klass</span> <span class="ruby-operator">==</span> <span class="ruby-constant">Object</span>
    <span class="ruby-identifier">callables</span>.<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">reject</span>{<span class="ruby-operator">|</span><span class="ruby-identifier">action</span><span class="ruby-operator">|</span> <span class="ruby-identifier">action</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/^_.*/</span>}
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_filter_params" type="Public" category="Class" id="M000397">
          <parameters>(params)</parameters>

          <description><![CDATA[
            <p>
This is a stub method so plugins can implement param filtering if they
want.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash{Symbol =&gt; String}&gt;:</td><td>A list of params

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash{Symbol =&gt; String}:</td><td>A new list of params, filtered as desired

</td></tr>
</table>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 97</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_filter_params</span>(<span class="ruby-identifier">params</span>)
    <span class="ruby-identifier">params</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="abstract!" type="Public" category="Class" id="M000411">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Sets a controller to be &quot;abstract&quot; This controller will not be
able to be routed to and is used for super classing only
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 359</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">abstract!</span>
    <span class="ruby-ivar">@_abstract</span> = <span class="ruby-keyword kw">true</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="abstract?" type="Public" category="Class" id="M000412">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Asks a controller if it is abstract
</p>
<h4>Returns</h4>
<p>
Boolean
</p>
<pre>
 true if the controller has been set as abstract
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 370</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">abstract?</span>
    <span class="ruby-operator">!</span><span class="ruby-operator">!</span><span class="ruby-ivar">@_abstract</span> 
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="callable_actions" type="Public" category="Class" id="M000396">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
The list of actions that are callable, after taking defaults,
_hidden_actions and _shown_actions into consideration. It is calculated
once, the first time an action is dispatched for this controller.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">SimpleSet[String]:</td><td>A set of actions that should be callable.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 83</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">callable_actions</span>
    <span class="ruby-ivar">@callable_actions</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">Extlib</span><span class="ruby-operator">::</span><span class="ruby-constant">SimpleSet</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">_callable_methods</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="hide_action" type="Public" category="Class" id="M000394">
          <parameters>(*names)</parameters>

          <description><![CDATA[
            <p>
Hides each of the given methods from being callable as actions.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*names&lt;~to-s&gt;:</td><td>Actions that should be added to the list.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[String]:</td><td>An array of actions that should not be possible to dispatch to.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 40</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">hide_action</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">names</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_hidden_actions</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_hidden_actions</span> <span class="ruby-operator">|</span> <span class="ruby-identifier">names</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">n</span><span class="ruby-operator">|</span> <span class="ruby-identifier">n</span>.<span class="ruby-identifier">to_s</span> }
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="inherited" type="Public" category="Class" id="M000393">
          <parameters>(klass)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;Merb::Controller&gt;:</td><td>The <a href="#Merb::Controller">Merb::Controller</a> inheriting from the
base class.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 24</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">inherited</span>(<span class="ruby-identifier">klass</span>)
    <span class="ruby-identifier">_subclasses</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span>
    <span class="ruby-keyword kw">super</span>
    <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">_template_root</span> = <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:view</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_template_root</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new" type="Public" category="Class" id="M000401">
          <parameters>(request, status=200, headers={'Content-Type' =&gt; 'text/html; charset=utf-8'})</parameters>

          <description><![CDATA[
            <p>
Builds a new controller.
</p>
<p>
Sets the variables that came in through the dispatch as available to the
controller.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>The <a href="#Merb::Request">Merb::Request</a> that came in from <a
href="#Merb::Rack">Rack</a>.

</td></tr>
<tr><td valign="top">status&lt;Integer&gt;:</td><td>An integer code for the status. Defaults to 200.

</td></tr>
<tr><td valign="top">headers&lt;Hash{header =&gt; value}&gt;:</td><td>A hash of headers to start the controller with. These headers can be
overridden later by the headers method.

</td></tr>
</table>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 170</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">request</span>, <span class="ruby-identifier">status</span>=<span class="ruby-value">200</span>, <span class="ruby-identifier">headers</span>={<span class="ruby-value str">'Content-Type'</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">'text/html; charset=utf-8'</span>})
    <span class="ruby-keyword kw">super</span>()
    <span class="ruby-ivar">@request</span>, <span class="ruby-ivar">@_status</span>, <span class="ruby-ivar">@headers</span> = <span class="ruby-identifier">request</span>, <span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="show_action" type="Public" category="Class" id="M000395">
          <parameters>(*names)</parameters>

          <description><![CDATA[
            <p>
Makes each of the given methods being callable as actions. You can use this
to make methods included from modules callable as actions.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*names&lt;~to-s&gt;:</td><td>Actions that should be added to the list.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[String]:</td><td>An array of actions that should be dispatched to even if they would not
otherwise be.

</td></tr>
</table>
<h4>Example</h4>
<pre>
  module Foo
    def self.included(base)
      base.show_action(:foo)
    end

    def foo
      # some actiony stuff
    end

    def foo_helper
      # this should not be an action
    end
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 71</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">show_action</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">names</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_shown_actions</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_shown_actions</span> <span class="ruby-operator">|</span> <span class="ruby-identifier">names</span>.<span class="ruby-identifier">map</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">n</span><span class="ruby-operator">|</span> <span class="ruby-identifier">n</span>.<span class="ruby-identifier">to_s</span>}
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="subclasses_list" type="Public" category="Class" id="M000392">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 12</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">subclasses_list</span>() <span class="ruby-identifier">_subclasses</span> <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="_absolute_template_location" type="Public" category="Instance" id="M000400">
          <parameters>(template, type)</parameters>

          <description><![CDATA[
            <p>
The location to look for a template and mime-type. This is overridden from
<a href="#Merb::AbstractController">AbstractController</a>, which defines a
version of this that does not involve mime-types.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">template&lt;String&gt;:</td><td>The absolute path to a template - without mime and template extension. The
mime-type extension is optional - it will be appended from the current
content type if it hasn&#8217;t been added already.

</td></tr>
<tr><td valign="top">type&lt;~to_s&gt;:</td><td>The mime-type of the template that will be rendered. Defaults to nil.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 152</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_absolute_template_location</span>(<span class="ruby-identifier">template</span>, <span class="ruby-identifier">type</span>)
    <span class="ruby-identifier">_conditionally_append_extension</span>(<span class="ruby-identifier">template</span>, <span class="ruby-identifier">type</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_dispatch" type="Public" category="Instance" id="M000402">
          <parameters>(action=:index)</parameters>

          <description><![CDATA[
            <p>
Dispatch the action.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">action&lt;~to_s&gt;:</td><td>An action to dispatch to. Defaults to :index.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The string sent to the logger for time spent.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ActionNotFound:</td><td>The requested action was not found in class.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 187</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_dispatch</span>(<span class="ruby-identifier">action</span>=<span class="ruby-identifier">:index</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span>(<span class="ruby-node">&quot;Params: #{self.class._filter_params(request.params).inspect}&quot;</span>)
    <span class="ruby-identifier">start</span> = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">callable_actions</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>)
      <span class="ruby-keyword kw">super</span>(<span class="ruby-identifier">action</span>)
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ActionNotFound</span>, <span class="ruby-node">&quot;Action '#{action}' was not found in #{self.class}&quot;</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-ivar">@_benchmarks</span>[<span class="ruby-identifier">:action_time</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">start</span>
    <span class="ruby-keyword kw">self</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_location" type="Public" category="Instance" id="M000399">
          <parameters>(context, type, controller)</parameters>

          <description><![CDATA[
            <p>
The location to look for a template for a particular controller, context,
and mime-type. This is overridden from <a
href="#Merb::AbstractController">AbstractController</a>, which defines a
version of this that does not involve mime-types.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">context&lt;~to_s&gt;:</td><td>The name of the action or template basename that will be rendered.

</td></tr>
<tr><td valign="top">type&lt;~to_s&gt;:</td><td>The mime-type of the template that will be rendered. Defaults to nil.

</td></tr>
<tr><td valign="top">controller&lt;~to_s&gt;:</td><td>The name of the controller that will be rendered. Defaults to
controller_name. This will be &quot;layout&quot; for rendering a layout.

</td></tr>
</table>
<h4>Notes</h4>
<p>
By default, this renders &quot;:controller/:action.:type&quot;. To change
this, override it in your application class or in individual controllers.
</p>
<p>
:api: public @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 135</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_template_location</span>(<span class="ruby-identifier">context</span>, <span class="ruby-identifier">type</span>, <span class="ruby-identifier">controller</span>)
    <span class="ruby-identifier">_conditionally_append_extension</span>(<span class="ruby-identifier">controller</span> <span class="ruby-value">? </span><span class="ruby-node">&quot;#{controller}/#{context}&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-node">&quot;#{context}&quot;</span>, <span class="ruby-identifier">type</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="absolute_url" type="Public" category="Instance" id="M000409">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Returns the absolute url including the passed protocol and host.
</p>
<p>
This uses the same arguments as the url method, with added requirements of
protocol and host options.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 335</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">absolute_url</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">options</span>  = <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">args</span>) <span class="ruby-operator">||</span> {}
    <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:protocol</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">request</span>.<span class="ruby-identifier">protocol</span>
    <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:host</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">request</span>.<span class="ruby-identifier">host</span>
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">options</span>
    <span class="ruby-keyword kw">super</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="params" type="Public" category="Instance" id="M000405">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The parameters from the request object

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 230</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">params</span>()  <span class="ruby-identifier">request</span>.<span class="ruby-identifier">params</span>  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="rack_response" type="Public" category="Instance" id="M000410">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
The results of the controller&#8217;s render, to be returned to <a
href="#Merb::Rack">Rack</a>.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Integer, <a href="#Hash">Hash</a>, String]:</td><td>The controller&#8217;s status code, headers, and body

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 350</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">rack_response</span>
    [<span class="ruby-identifier">status</span>, <span class="ruby-identifier">headers</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">StreamWrapper</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">body</span>)]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="relative_url" type="Public" category="Instance" id="M000408">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000406">url</a>
</p>
          ]]></description>


        </method>

        <method name="resource" type="Public" category="Instance" id="M000407">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Generates a URL for a single or nested resource.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">resources&lt;Symbol,Object&gt;:</td><td>The resources for which the URL

</td></tr>
</table>
<pre>
  should be generated. These resources should be specified
  in the router.rb file using #resources and #resource.
</pre>
<table>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Any extra parameters that are needed to

</td></tr>
</table>
<pre>
  generate the URL.
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  resources :users do
    resources :comments
  end
</pre>
<p>
end
</p>
<p>
resource(:users) # =&gt; /users resource(@user) # =&gt; /users/10
resource(@user, :comments) # =&gt; /users/10/comments resource(@user,
@comment) # =&gt; /users/10/comments/15 resource(:users, :new) # =&gt;
/users/new resource(:@user, :edit) # =&gt; /users/10/edit
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 321</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">params</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status" type="Public" category="Instance" id="M000403">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>The response status code

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 206</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status</span>
    <span class="ruby-ivar">@_status</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="status=" type="Public" category="Instance" id="M000404">
          <parameters>(s)</parameters>

          <description><![CDATA[
            <p>
Sets the response status code.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">s&lt;Fixnum, Symbol&gt;:</td><td>A status-code or named http-status

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 216</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">status=</span>(<span class="ruby-identifier">s</span>)
    <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">s</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Symbol</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">STATUS_CODES</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">s</span>)
      <span class="ruby-ivar">@_status</span> = <span class="ruby-constant">STATUS_CODES</span>[<span class="ruby-identifier">s</span>]
    <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">s</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Fixnum</span>)
      <span class="ruby-ivar">@_status</span> = <span class="ruby-identifier">s</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-node">&quot;Status should be of type Fixnum or Symbol, was #{s.class}&quot;</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="url" type="Public" category="Instance" id="M000406">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
There are three possible ways to use this method. First, if you have a
named route, you can specify the route as the first parameter as a symbol
and any parameters in a hash. Second, you can generate the default route by
just passing the params hash, just passing the params hash. Finally, you
can use the anonymous parameters. This allows you to specify the parameters
to a named route in the order they appear in the router.
</p>
<h4>Parameters(Named Route)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation.

</td></tr>
</table>
<h4>Parameters(Default Route)</h4>
<table>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation. This route will use the default route.

</td></tr>
</table>
<h4>Parameters(Anonymous Parameters)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Array&gt;:</td><td>An array of anonymous parameters to generate the route with. These
parameters are assigned to the route parameters in the order that they are
passed.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Named Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, :title =&gt; &quot;new_article&quot;)
</p>
<p>
Default Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  default_routes
</pre>
<p>
end
</p>
<p>
url(:controller =&gt; &quot;articles&quot;, :action =&gt; &quot;new&quot;)
</p>
<p>
Anonymous Parameters
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:year/:month/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, 2008, 10, &quot;test_article&quot;)
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/merb_controller.rb, line 286</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">params</span>
    <span class="ruby-identifier">name</span> = <span class="ruby-identifier">request</span>.<span class="ruby-identifier">route</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">name</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:this</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::ResponderMixin"

                         href="Merb::ResponderMixin"

        />

        <included-module name="Merb::ControllerMixin"

                         href="Merb::ControllerMixin"

        />

        <included-module name="Merb::AuthenticationMixin"

                         href="Merb::AuthenticationMixin"

        />

        <included-module name="Merb::ConditionalGetMixin"

                         href="Merb::ConditionalGetMixin"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Merb::Server" id="Merb::Server">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37server.rb">lib/merb-core/server.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a href="#Merb::Server">Server</a> encapsulates the management of <a
href="#Merb">Merb</a> daemons.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="_change_privilege" type="Public" category="Class" id="M000428">
          <parameters>(user, group=user)</parameters>

          <description><![CDATA[
            <p>
Changes privileges of the process to the specified user and group.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">user&lt;String&gt;:</td><td>The user to change the process to.

</td></tr>
<tr><td valign="top">group&lt;String&gt;:</td><td>The group to change the process to.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If group is left out, the user will be used as the group.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 324</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_change_privilege</span>(<span class="ruby-identifier">user</span>, <span class="ruby-identifier">group</span>=<span class="ruby-identifier">user</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Changing privileges to #{user}:#{group}&quot;</span>

        <span class="ruby-identifier">uid</span>, <span class="ruby-identifier">gid</span> = <span class="ruby-constant">Process</span>.<span class="ruby-identifier">euid</span>, <span class="ruby-constant">Process</span>.<span class="ruby-identifier">egid</span>

        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">target_uid</span> = <span class="ruby-constant">Etc</span>.<span class="ruby-identifier">getpwnam</span>(<span class="ruby-identifier">user</span>).<span class="ruby-identifier">uid</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">ArgumentError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span>(<span class="ruby-node">&quot;Failed to change to user #{user}, does the user exist?&quot;</span>, <span class="ruby-identifier">e</span>)
          <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">false</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">target_gid</span> = <span class="ruby-constant">Etc</span>.<span class="ruby-identifier">getgrnam</span>(<span class="ruby-identifier">group</span>).<span class="ruby-identifier">gid</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">ArgumentError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span>(<span class="ruby-node">&quot;Failed to change to group #{group}, does the group exist?&quot;</span>, <span class="ruby-identifier">e</span>)
          <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">false</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">uid</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">target_uid</span>) <span class="ruby-operator">||</span> (<span class="ruby-identifier">gid</span> <span class="ruby-operator">!=</span> <span class="ruby-identifier">target_gid</span>)
          <span class="ruby-comment cmt"># Change process ownership</span>
          <span class="ruby-constant">Process</span>.<span class="ruby-identifier">initgroups</span>(<span class="ruby-identifier">user</span>, <span class="ruby-identifier">target_gid</span>)
          <span class="ruby-constant">Process</span><span class="ruby-operator">::</span><span class="ruby-constant">GID</span>.<span class="ruby-identifier">change_privilege</span>(<span class="ruby-identifier">target_gid</span>)
          <span class="ruby-constant">Process</span><span class="ruby-operator">::</span><span class="ruby-constant">UID</span>.<span class="ruby-identifier">change_privilege</span>(<span class="ruby-identifier">target_uid</span>)
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">true</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EPERM</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Permission denied for changing user:group to #{user}:#{group}.&quot;</span>, <span class="ruby-identifier">e</span>
        <span class="ruby-keyword kw">false</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="add_irb_trap" type="Public" category="Class" id="M000429">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Add trap to enter IRB on SIGINT. Process exit if second SIGINT is received.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 358</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add_irb_trap</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">&quot;INT&quot;</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@interrupted</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Interrupt received a second time, exiting!\n&quot;</span>
            <span class="ruby-identifier">exit</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-ivar">@interrupted</span> = <span class="ruby-keyword kw">true</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Interrupt a second time to quit.&quot;</span>
          <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">sleep</span> <span class="ruby-value">1.5</span>
          <span class="ruby-constant">ARGV</span>.<span class="ruby-identifier">clear</span> <span class="ruby-comment cmt"># Avoid passing args to IRB</span>

          <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@irb</span>.<span class="ruby-identifier">nil?</span>
            <span class="ruby-identifier">require</span> <span class="ruby-value str">&quot;irb&quot;</span>
            <span class="ruby-constant">IRB</span>.<span class="ruby-identifier">setup</span>(<span class="ruby-keyword kw">nil</span>)
            <span class="ruby-ivar">@irb</span> = <span class="ruby-constant">IRB</span><span class="ruby-operator">::</span><span class="ruby-constant">Irb</span>.<span class="ruby-identifier">new</span>(<span class="ruby-keyword kw">nil</span>)
            <span class="ruby-constant">IRB</span>.<span class="ruby-identifier">conf</span>[<span class="ruby-identifier">:MAIN_CONTEXT</span>] = <span class="ruby-ivar">@irb</span>.<span class="ruby-identifier">context</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-identifier">:INT</span>) { <span class="ruby-ivar">@irb</span>.<span class="ruby-identifier">signal_handle</span> }
          <span class="ruby-identifier">catch</span>(<span class="ruby-identifier">:IRB_EXIT</span>) { <span class="ruby-ivar">@irb</span>.<span class="ruby-identifier">eval_input</span> }

          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Exiting from IRB mode back into server mode.&quot;</span>
          <span class="ruby-ivar">@interrupted</span> = <span class="ruby-keyword kw">false</span>
          <span class="ruby-identifier">add_irb_trap</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="alive?" type="Public" category="Class" id="M000414">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port to check for <a href="#Merb">Merb</a> instances on.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if <a href="#Merb">Merb</a> is running on the specified port.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 54</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">alive?</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">pidfile</span> = <span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">pid</span>     = <span class="ruby-identifier">pid_in_file</span>(<span class="ruby-identifier">pidfile</span>)
        <span class="ruby-constant">Process</span>.<span class="ruby-identifier">kill</span>(<span class="ruby-value">0</span>, <span class="ruby-identifier">pid</span>)
        <span class="ruby-keyword kw">true</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">ESRCH</span>, <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">ENOENT</span>
        <span class="ruby-keyword kw">false</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EACCES</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span>(<span class="ruby-node">&quot;You don't have access to the PID file at #{pidfile}: #{e.message}&quot;</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="bootup" type="Public" category="Class" id="M000419">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Starts up <a href="#Merb">Merb</a> by running the bootloader and starting
the adapter.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 168</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">bootup</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">&quot;TERM&quot;</span>) { <span class="ruby-identifier">shutdown</span> }

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Running bootloaders...&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
        <span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">run</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Starting Rack adapter...&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">adapter</span>.<span class="ruby-identifier">start</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>.<span class="ruby-identifier">to_hash</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="change_privilege" type="Public" category="Class" id="M000421">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Changes process user/group to those specified in <a
href="#Merb::Config">Merb::Config</a>.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 190</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">change_privilege</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:user</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:group</span>]
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">verbose!</span> <span class="ruby-value str">&quot;About to change privilege to group &quot;</span> \
            <span class="ruby-node">&quot;#{Merb::Config[:group]} and user #{Merb::Config[:user]}&quot;</span>
          <span class="ruby-identifier">_change_privilege</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:user</span>], <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:group</span>])
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:user</span>]
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">verbose!</span> <span class="ruby-value str">&quot;About to change privilege to user &quot;</span> \
            <span class="ruby-node">&quot;#{Merb::Config[:user]}&quot;</span>
          <span class="ruby-identifier">_change_privilege</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:user</span>])
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">true</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="daemonize" type="Public" category="Class" id="M000418">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port of the <a href="#Merb">Merb</a> process to daemonize.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 141</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">daemonize</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;About to fork...&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
        <span class="ruby-identifier">fork</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Process</span>.<span class="ruby-identifier">setsid</span>
          <span class="ruby-identifier">exit</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">fork</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;In #{Process.pid}&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>
          <span class="ruby-constant">File</span>.<span class="ruby-identifier">umask</span> <span class="ruby-value">0000</span>
          <span class="ruby-constant">STDIN</span>.<span class="ruby-identifier">reopen</span> <span class="ruby-value str">&quot;/dev/null&quot;</span>
          <span class="ruby-constant">STDOUT</span>.<span class="ruby-identifier">reopen</span> <span class="ruby-value str">&quot;/dev/null&quot;</span>, <span class="ruby-value str">&quot;a&quot;</span>
          <span class="ruby-constant">STDERR</span>.<span class="ruby-identifier">reopen</span> <span class="ruby-constant">STDOUT</span>
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-constant">Dir</span>.<span class="ruby-identifier">chdir</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:merb_root</span>]
          <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EACCES</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;You specified Merb root as #{Merb::Config[:merb_root]}, &quot;</span> \
              <span class="ruby-value str">&quot;yet the current user does not have access to it. &quot;</span>, <span class="ruby-identifier">e</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-identifier">at_exit</span> { <span class="ruby-identifier">remove_pid_file</span>(<span class="ruby-identifier">port</span>) }
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:port</span>] = <span class="ruby-identifier">port</span>
          <span class="ruby-identifier">bootup</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">NotImplementedError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-value str">&quot;Daemonized mode is not supported on your platform. &quot;</span>, <span class="ruby-identifier">e</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="kill" type="Public" category="Class" id="M000416">
          <parameters>(port, sig = &quot;INT&quot;)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port of the <a href="#Merb">Merb</a> process to kill.

</td></tr>
<tr><td valign="top">sig&lt;~to_s&gt;:</td><td>The signal to send to the process, the default is 9 - SIGKILL.

</td></tr>
</table>
<p>
No Name Default Action Description 1 SIGHUP terminate process terminal line
hangup 2 SIGINT terminate process interrupt program 3 SIGQUIT create core
image quit program 4 SIGILL create core image illegal instruction 9 SIGKILL
terminate process kill program 15 SIGTERM terminate process software
termination signal 30 SIGUSR1 terminate process User defined signal 1 31
SIGUSR2 terminate process User defined signal 2
</p>
<h4>Alternatives</h4>
<p>
If you pass &quot;all&quot; as the port, the signal will be sent to all <a
href="#Merb">Merb</a> processes.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 88</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">kill</span>(<span class="ruby-identifier">port</span>, <span class="ruby-identifier">sig</span> = <span class="ruby-value str">&quot;INT&quot;</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">sig</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Integer</span>)
          <span class="ruby-identifier">sig</span> = <span class="ruby-constant">Signal</span>.<span class="ruby-identifier">list</span>.<span class="ruby-identifier">invert</span>[<span class="ruby-identifier">sig</span>]
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span><span class="ruby-operator">::</span><span class="ruby-constant">BuildFramework</span>.<span class="ruby-identifier">run</span>

        <span class="ruby-comment cmt"># If we kill the master, then the workers should be reaped also.</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-node">%w(main master all)</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">port</span>)
          <span class="ruby-comment cmt"># If a graceful exit is requested then send INT to the master process.</span>
          <span class="ruby-comment cmt">#</span>
          <span class="ruby-comment cmt"># Otherwise read pids from pid files and try to kill each process in turn.</span>
          <span class="ruby-identifier">kill_pid</span>(<span class="ruby-identifier">sig</span>, <span class="ruby-identifier">pid_file</span>(<span class="ruby-value str">&quot;main&quot;</span>)) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">sig</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;INT&quot;</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">kill_pid</span>(<span class="ruby-identifier">sig</span>, <span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>))
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="kill_pid" type="Public" category="Class" id="M000417">
          <parameters>(sig, file)</parameters>

          <description><![CDATA[
            <p>
Sends the provided signal to the process pointed at by the provided pid
file. :api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 108</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">kill_pid</span>(<span class="ruby-identifier">sig</span>, <span class="ruby-identifier">file</span>)
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">pid</span> = <span class="ruby-identifier">pid_in_file</span>(<span class="ruby-identifier">file</span>)
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Killing pid #{pid} with #{sig}&quot;</span>
          <span class="ruby-constant">Process</span>.<span class="ruby-identifier">kill</span>(<span class="ruby-identifier">sig</span>, <span class="ruby-identifier">pid</span>)
          <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">rm</span>(<span class="ruby-identifier">file</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exist?</span>(<span class="ruby-identifier">file</span>)
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EINVAL</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Failed to kill PID #{pid} with #{sig}: '#{sig}' is an invalid &quot;</span> \
            <span class="ruby-value str">&quot;or unsupported signal number.&quot;</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EPERM</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Failed to kill PID #{pid} with #{sig}: Insufficient permissions.&quot;</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">ESRCH</span>
          <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">rm</span> <span class="ruby-identifier">file</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Failed to kill PID #{pid} with #{sig}: Process is &quot;</span> \
            <span class="ruby-value str">&quot;deceased or zombie.&quot;</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EACCES</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-identifier">e</span>.<span class="ruby-identifier">message</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">ENOENT</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-comment cmt"># This should not cause abnormal exit, which is why </span>
          <span class="ruby-comment cmt"># we do not use Merb.fatal but instead just log with max level.</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Could not find a PID file at #{file}. &quot;</span> \
            <span class="ruby-value str">&quot;Most likely the process is no longer running and the pid file was not cleaned up.&quot;</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Exception</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-operator">!</span><span class="ruby-identifier">e</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">SystemExit</span>)
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Failed to kill PID #{pid.inspect} with #{sig.inspect}: #{e.message}&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="pid_file" type="Public" category="Class" id="M000426">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
Gets the pid file for the specified port/socket.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port/socket of the <a href="#Merb">Merb</a> process to whom the PID
file belongs to.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Location of pid file for specified port. If clustered and <a
href="#M000426">pid_file</a> option is specified, it adds the port/socket
value to the path.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 290</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">pidfile</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:pid_file</span>] <span class="ruby-operator">||</span> (<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">log_path</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;merb.%s.pid&quot;</span>)
        <span class="ruby-identifier">pidfile</span> <span class="ruby-operator">%</span> <span class="ruby-identifier">port</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="pid_files" type="Public" category="Class" id="M000427">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Gets a list of the pid files.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array:</td><td>List of pid file paths. If not running clustered, the array contains a
single path.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 302</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">pid_files</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:pid_file</span>]
          <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:cluster</span>]
            <span class="ruby-constant">Dir</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:pid_file</span>] <span class="ruby-operator">%</span> <span class="ruby-value str">&quot;*&quot;</span>]
          <span class="ruby-keyword kw">else</span>
            [ <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:pid_file</span>] ]
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-constant">Dir</span>[<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">log_path</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;merb.*.pid&quot;</span>]
        <span class="ruby-keyword kw">end</span>
       <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="pid_in_file" type="Public" category="Class" id="M000415">
          <parameters>(pidfile)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 66</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">pid_in_file</span>(<span class="ruby-identifier">pidfile</span>)
        <span class="ruby-constant">File</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">pidfile</span>).<span class="ruby-identifier">chomp</span>.<span class="ruby-identifier">to_i</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="remove_pid" type="Public" category="Class" id="M000424">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
Deletes the pidfile for the specified port/socket.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 245</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">remove_pid</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">rm</span>(<span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>)) <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">file?</span>(<span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>))
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="remove_pid_file" type="Public" category="Class" id="M000422">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
Removes a PID file used by the server from the filesystem. This uses :<a
href="#M000426">pid_file</a> options from configuration when provided or
merb.&lt;port/socket&gt;.pid in log directory by default.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port of the <a href="#Merb">Merb</a> process to whom the the PID file
belongs to.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If Merb::Config[:<a href="#M000426">pid_file</a>] has been specified, that
will be used instead of the port/socket based PID file.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 217</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">remove_pid_file</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">pidfile</span> = <span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exist?</span>(<span class="ruby-identifier">pidfile</span>)
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Removing pid file #{pidfile} (port/socket: #{port})...&quot;</span>
          <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">rm</span>(<span class="ruby-identifier">pidfile</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="shutdown" type="Public" category="Class" id="M000420">
          <parameters>(status = 0)</parameters>

          <description><![CDATA[
            <p>
Shut down <a href="#Merb">Merb</a>, reap any workers if necessary.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 180</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">shutdown</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>)
        <span class="ruby-comment cmt"># reap_workers does exit but may not be called...</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span><span class="ruby-operator">::</span><span class="ruby-constant">LoadClasses</span>.<span class="ruby-identifier">reap_workers</span>(<span class="ruby-identifier">status</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:fork_for_class_load</span>]
        <span class="ruby-comment cmt"># which is why we exit explicitly here</span>
        <span class="ruby-identifier">exit</span>(<span class="ruby-identifier">status</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start" type="Public" category="Class" id="M000413">
          <parameters>(port, cluster=nil)</parameters>

          <description><![CDATA[
            <p>
Starts a <a href="#Merb">Merb</a> server, in either foreground, daemonized
or cluster mode.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_i&gt;:</td><td>The port to which the first server instance should bind to. Subsequent
server instances bind to the immediately following ports.

</td></tr>
<tr><td valign="top">cluster&lt;~to_i&gt;:</td><td>Number of servers to run in a cluster.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If cluster is left out, then one process will be started. This process will
be daemonized if Merb::Config[:daemonize] is true.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 23</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">start</span>(<span class="ruby-identifier">port</span>, <span class="ruby-identifier">cluster</span>=<span class="ruby-keyword kw">nil</span>)

        <span class="ruby-ivar">@port</span> = <span class="ruby-identifier">port</span>
        <span class="ruby-ivar">@cluster</span> = <span class="ruby-identifier">cluster</span>

        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:daemonize</span>]
          <span class="ruby-identifier">pidfile</span> = <span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>)
          <span class="ruby-identifier">pid</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">pidfile</span>).<span class="ruby-identifier">chomp</span>.<span class="ruby-identifier">to_i</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exist?</span>(<span class="ruby-identifier">pidfile</span>)

          <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">alive?</span>(<span class="ruby-ivar">@port</span>)
            <span class="ruby-identifier">remove_pid_file</span>(<span class="ruby-ivar">@port</span>)
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Daemonizing...&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
            <span class="ruby-identifier">daemonize</span>(<span class="ruby-ivar">@port</span>)
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Merb is already running on port #{port}.\n&quot;</span> \
              <span class="ruby-node">&quot;\e[0m   \e[1;31;47mpid file: \e[34;47m#{pidfile}&quot;</span> \
              <span class="ruby-node">&quot;\e[1;31;47m, process id is \e[34;47m#{pid}.&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">bootup</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="store_details" type="Public" category="Class" id="M000425">
          <parameters>(port = nil)</parameters>

          <description><![CDATA[
            <p>
Stores a PID file on the filesystem. This uses :<a
href="#M000426">pid_file</a> options from configuration when provided or
merb.&lt;port/socket&gt;.pid in log directory by default.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port of the <a href="#Merb">Merb</a> process to whom the PID file
belongs to.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If Merb::Config[:<a href="#M000426">pid_file</a>] has been specified, that
will be used instead of the port/socket based PID file.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 262</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">store_details</span>(<span class="ruby-identifier">port</span> = <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-identifier">file</span> = <span class="ruby-identifier">pid_file</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-constant">FileUtils</span>.<span class="ruby-identifier">mkdir_p</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">dirname</span>(<span class="ruby-identifier">file</span>))
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EACCES</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Failed to store Merb logs in #{File.dirname(file)}, &quot;</span> \
            <span class="ruby-value str">&quot;permission denied. &quot;</span>, <span class="ruby-identifier">e</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Storing pid #{Process.pid} file to #{file}...&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">file</span>, <span class="ruby-value str">'w'</span>){ <span class="ruby-operator">|</span><span class="ruby-identifier">f</span><span class="ruby-operator">|</span> <span class="ruby-identifier">f</span>.<span class="ruby-identifier">write</span>(<span class="ruby-constant">Process</span>.<span class="ruby-identifier">pid</span>.<span class="ruby-identifier">to_s</span>) }
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Errno</span><span class="ruby-operator">::</span><span class="ruby-constant">EACCES</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Failed to access #{file}, permission denied.&quot;</span>, <span class="ruby-identifier">e</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="store_pid" type="Public" category="Class" id="M000423">
          <parameters>(port)</parameters>

          <description><![CDATA[
            <p>
Stores a PID file on the filesystem. This uses :<a
href="#M000426">pid_file</a> options from configuration when provided or
merb.&lt;port&gt;.pid in log directory by default.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">port&lt;~to_s&gt;:</td><td>The port of the <a href="#Merb">Merb</a> process to whom the the PID file
belongs to.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If Merb::Config[:<a href="#M000426">pid_file</a>] has been specified, that
will be used instead of the port/socket based PID file.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/server.rb, line 238</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">store_pid</span>(<span class="ruby-identifier">port</span>)
        <span class="ruby-identifier">store_details</span>(<span class="ruby-identifier">port</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Dispatcher" id="Merb::Dispatcher">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37default_exception37default_exception.rb">lib/merb-core/dispatch/default_exception/default_exception.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37dispatcher.rb">lib/merb-core/dispatch/dispatcher.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="use_mutex">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="handle" type="Public" category="Class" id="M000431">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Dispatch the rack environment. <a
href="#Merb::ControllerExceptions">ControllerExceptions</a> are rescued
here and redispatched.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">rack_env&lt;Rack::Environment&gt;:</td><td>The rack environment, which is used to instantiate a <a
href="#Merb::Request">Merb::Request</a>

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Merb::Controller:</td><td>The <a href="#Merb::Controller">Merb::Controller</a> that was dispatched to

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/dispatcher.rb, line 35</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">handle</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-identifier">request</span>.<span class="ruby-identifier">handle</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="work_queue" type="Public" category="Class" id="M000430">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Queue:</td><td>the current queue of dispatch jobs.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/dispatcher.rb, line 17</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">work_queue</span>
        <span class="ruby-ivar">@@work_queue</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::ControllerExceptions"

                         href="Merb::ControllerExceptions"

        />

      </included-module-list>

    </contents>

  </Class>

  <Module name="Merb::Dispatcher::DefaultExceptionHelper" id="Merb::Dispatcher::DefaultExceptionHelper">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37default_exception37default_exception.rb">lib/merb-core/dispatch/default_exception/default_exception.rb</a></infile>

      </infiles>


    </classmod-info>

    <description><![CDATA[
      <p>
:api: private
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="error_codes" type="Public" category="Instance" id="M000433">
          <parameters>(exception)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 12</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">error_codes</span>(<span class="ruby-identifier">exception</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@show_details</span>
          <span class="ruby-identifier">message</span>, <span class="ruby-identifier">message_details</span> = <span class="ruby-identifier">exception</span>.<span class="ruby-identifier">message</span>.<span class="ruby-identifier">split</span>(<span class="ruby-value str">&quot;\n&quot;</span>, <span class="ruby-value">2</span>)
          <span class="ruby-node">&quot;&lt;h2&gt;#{escape_html(message)}&lt;/h2&gt;&lt;p&gt;#{escape_html(message_details)}&lt;/p&gt;&quot;</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-value str">&quot;&lt;h2&gt;Sorry about that...&lt;/h2&gt;&quot;</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="frame_details" type="Public" category="Instance" id="M000434">
          <parameters>(line)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 22</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">frame_details</span>(<span class="ruby-identifier">line</span>)
        <span class="ruby-identifier">filename</span>, <span class="ruby-identifier">lineno</span>, <span class="ruby-identifier">location</span> = <span class="ruby-identifier">line</span>.<span class="ruby-identifier">split</span>(<span class="ruby-value str">&quot;:&quot;</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">filename</span>.<span class="ruby-identifier">index</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">framework_root</span>)
          <span class="ruby-identifier">type</span> = <span class="ruby-value str">&quot;framework&quot;</span>
          <span class="ruby-identifier">shortname</span> = <span class="ruby-constant">Pathname</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">filename</span>).<span class="ruby-identifier">relative_path_from</span>(<span class="ruby-constant">Pathname</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">framework_root</span>))
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">filename</span>.<span class="ruby-identifier">index</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span>)
          <span class="ruby-identifier">type</span> = <span class="ruby-value str">&quot;app&quot;</span>
          <span class="ruby-identifier">shortname</span> = <span class="ruby-constant">Pathname</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">filename</span>).<span class="ruby-identifier">relative_path_from</span>(<span class="ruby-constant">Pathname</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span>))
        <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">path</span> = <span class="ruby-constant">Gem</span>.<span class="ruby-identifier">path</span>.<span class="ruby-identifier">find</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">p</span><span class="ruby-operator">|</span> <span class="ruby-identifier">filename</span>.<span class="ruby-identifier">index</span>(<span class="ruby-identifier">p</span>)}
          <span class="ruby-identifier">type</span> = <span class="ruby-value str">&quot;gem&quot;</span>
          <span class="ruby-identifier">shortname</span> = <span class="ruby-constant">Pathname</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">filename</span>).<span class="ruby-identifier">relative_path_from</span>(<span class="ruby-constant">Pathname</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">path</span>))
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">type</span> = <span class="ruby-value str">&quot;other&quot;</span>
          <span class="ruby-identifier">shortname</span> = <span class="ruby-identifier">filename</span>
        <span class="ruby-keyword kw">end</span>
        [<span class="ruby-identifier">type</span>, <span class="ruby-identifier">shortname</span>, <span class="ruby-identifier">filename</span>, <span class="ruby-identifier">lineno</span>, <span class="ruby-identifier">location</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="humanize_exception" type="Public" category="Instance" id="M000432">
          <parameters>(e)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 7</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">humanize_exception</span>(<span class="ruby-identifier">e</span>)
        <span class="ruby-identifier">e</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">name</span>.<span class="ruby-identifier">split</span>(<span class="ruby-value str">&quot;::&quot;</span>).<span class="ruby-identifier">last</span>.<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">/([a-z])([A-Z])/</span>, <span class="ruby-value str">'\1 \2'</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="listing" type="Public" category="Instance" id="M000435">
          <parameters>(key, value, arr)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 41</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">listing</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span>, <span class="ruby-identifier">arr</span>)
        <span class="ruby-identifier">ret</span>   =  []
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;table class=\&quot;listing\&quot; style=\&quot;display: none\&quot;&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;  &lt;thead&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">&quot;    &lt;tr&gt;&lt;th width='25%'&gt;#{key}&lt;/th&gt;&lt;th width='75%'&gt;#{value}&lt;/th&gt;&lt;/tr&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;  &lt;/thead&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;  &lt;tbody&gt;&quot;</span>
        (<span class="ruby-identifier">arr</span> <span class="ruby-operator">||</span> []).<span class="ruby-identifier">each_with_index</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">val</span>), <span class="ruby-identifier">i</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">klass</span> = <span class="ruby-identifier">i</span> <span class="ruby-operator">%</span> <span class="ruby-value">2</span> <span class="ruby-operator">==</span> <span class="ruby-value">0</span> <span class="ruby-operator">?</span> <span class="ruby-value str">&quot;even&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-value str">&quot;odd&quot;</span>
          <span class="ruby-identifier">ret</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">&quot;    &lt;tr class=\&quot;#{klass}\&quot;&gt;&lt;td&gt;#{key}&lt;/td&gt;&lt;td&gt;#{val.inspect}&lt;/td&gt;&lt;/tr&gt;&quot;</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">arr</span>.<span class="ruby-identifier">blank?</span>
          <span class="ruby-identifier">ret</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;    &lt;tr class='odd'&gt;&lt;td colspan='2'&gt;None&lt;/td&gt;&lt;/tr&gt;&quot;</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;  &lt;/tbody&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;/table&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;\n&quot;</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="render_source" type="Public" category="Instance" id="M000437">
          <parameters>(filename, line)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 66</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">render_source</span>(<span class="ruby-identifier">filename</span>, <span class="ruby-identifier">line</span>)
        <span class="ruby-identifier">line</span> = <span class="ruby-identifier">line</span>.<span class="ruby-identifier">to_i</span>
        <span class="ruby-identifier">ret</span>   =  []
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;tr class='source'&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;  &lt;td class='collapse'&gt;&lt;/td&gt;&quot;</span>
        <span class="ruby-identifier">str</span>   =  <span class="ruby-value str">&quot;  &lt;td class='code' colspan='2'&gt;&lt;div&gt;&quot;</span>
        
        <span class="ruby-identifier">__caller_lines__</span>(<span class="ruby-identifier">filename</span>, <span class="ruby-identifier">line</span>, <span class="ruby-value">5</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">lline</span>, <span class="ruby-identifier">lcode</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">str</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">&quot;&lt;a href='txmt://open?url=file://#{filename}&amp;amp;line=#{lline}'&gt;#{lline}&lt;/a&gt;&quot;</span>
          <span class="ruby-identifier">str</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;em&gt;&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">line</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">lline</span>
          <span class="ruby-identifier">str</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">Erubis</span><span class="ruby-operator">::</span><span class="ruby-constant">XmlHelper</span>.<span class="ruby-identifier">escape_xml</span>(<span class="ruby-identifier">lcode</span>)
          <span class="ruby-identifier">str</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;/em&gt;&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">line</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">lline</span>
          <span class="ruby-identifier">str</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;\n&quot;</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">str</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;/div&gt;&lt;/td&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">str</span>
        <span class="ruby-identifier">ret</span>   <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;&lt;/tr&gt;&quot;</span>
        <span class="ruby-identifier">ret</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;\n&quot;</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="textmate_url" type="Public" category="Instance" id="M000436">
          <parameters>(filename, line)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 61</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">textmate_url</span>(<span class="ruby-identifier">filename</span>, <span class="ruby-identifier">line</span>)
        <span class="ruby-node">&quot;&lt;a href='txmt://open?url=file://#{filename}&amp;amp;line=#{line}'&gt;#{line}&lt;/a&gt;&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::Dispatcher::DefaultException" id="Merb::Dispatcher::DefaultException">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37default_exception37default_exception.rb">lib/merb-core/dispatch/default_exception/default_exception.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Controller">Merb::Controller</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
:api: private
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="_template_location" type="Public" category="Instance" id="M000438">
          <parameters>(context, type = nil, controller = controller_name)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 92</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_template_location</span>(<span class="ruby-identifier">context</span>, <span class="ruby-identifier">type</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">controller</span> = <span class="ruby-identifier">controller_name</span>)
        <span class="ruby-node">&quot;#{context}.#{type}&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="index" type="Public" category="Instance" id="M000439">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/default_exception/default_exception.rb, line 97</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">index</span>
        <span class="ruby-ivar">@exceptions</span> = <span class="ruby-identifier">request</span>.<span class="ruby-identifier">exceptions</span>
        <span class="ruby-ivar">@show_details</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:exception_details</span>]
        <span class="ruby-identifier">render</span> <span class="ruby-identifier">:format</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:html</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Request" id="Merb::Request">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37dispatcher.rb">lib/merb-core/dispatch/dispatcher.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37request.rb">lib/merb-core/dispatch/request.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>




      <constant-list>

        <constant name="METHODS">

          <value>%w{get post put delete head options}</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>


      <attribute-list>

        <attribute name="env">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="exceptions">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: public

]]></description>
        </attribute>

        <attribute name="route">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="route_params">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000441">
          <parameters>(rack_env)</parameters>

          <description><![CDATA[
            <p>
Initializes the request object.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">http_request&lt;~params:~[], ~body:IO&gt;:</td><td>An object like an HTTP <a href="#Merb::Request">Request</a>.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 38</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">rack_env</span>)
      <span class="ruby-ivar">@env</span>  = <span class="ruby-identifier">rack_env</span>
      <span class="ruby-ivar">@body</span> = <span class="ruby-identifier">rack_env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">RACK_INPUT</span>]
      <span class="ruby-ivar">@route_params</span> = {}
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="_process_block_return" type="Public" category="Instance" id="M000445">
          <parameters>(retval)</parameters>

          <description><![CDATA[
            <h4>Notes</h4>
<p>
Processes the return value of a deferred router block and returns the
current route params for the current request evaluation
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 126</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_process_block_return</span>(<span class="ruby-identifier">retval</span>)
      <span class="ruby-comment cmt"># If the return value is an array, then it is a redirect</span>
      <span class="ruby-comment cmt"># so we must set the request as a redirect and extract</span>
      <span class="ruby-comment cmt"># the redirect params and return it as a hash so that the</span>
      <span class="ruby-comment cmt"># dispatcher can handle it</span>
      <span class="ruby-identifier">matched!</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">retval</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Array</span>)
      <span class="ruby-identifier">retval</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="accept" type="Public" category="Instance" id="M000474">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The accepted response types. Defaults to &quot;<b>/</b>&quot;.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 491</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">accept</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_ACCEPT</span>].<span class="ruby-identifier">blank?</span> <span class="ruby-value">? </span><span class="ruby-value str">&quot;*/*&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_ACCEPT</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="accept_charset" type="Public" category="Instance" id="M000471">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The accepted character sets.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 467</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">accept_charset</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_ACCEPT_CHARSET</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="accept_encoding" type="Public" category="Instance" id="M000465">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The accepted encodings.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 419</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">accept_encoding</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_ACCEPT_ENCODING</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="accept_language" type="Public" category="Instance" id="M000468">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The accepted language.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 443</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">accept_language</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_ACCEPT_LANGUAGE</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="ajax?" type="Public" category="Instance" id="M000456">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000454">xml_http_request?</a>
</p>
          ]]></description>


        </method>

        <method name="cache_control" type="Public" category="Instance" id="M000467">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>HTTP cache control.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 435</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">cache_control</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_CACHE_CONTROL</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="connection" type="Public" category="Instance" id="M000475">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The HTTP connection.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 499</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">connection</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_CONNECTION</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="content_length" type="Public" category="Instance" id="M000478">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>The request content length.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 523</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">content_length</span>
      <span class="ruby-ivar">@content_length</span> <span class="ruby-operator">||=</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">CONTENT_LENGTH</span>].<span class="ruby-identifier">to_i</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="content_type" type="Public" category="Instance" id="M000477">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The request content type.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 515</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">content_type</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">UPCASE_CONTENT_TYPE</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="controller" type="Public" category="Instance" id="M000442">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the controller object for initialization and dispatching the
request.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Class:</td><td>The controller class matching the routed request,

</td></tr>
</table>
<pre>
  e.g. Posts.
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 52</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">controller</span>
      <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:controller</span>]
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">NotFound</span>,
          <span class="ruby-value str">&quot;Route matched, but route did not specify a controller.\n&quot;</span> <span class="ruby-operator">+</span>
          <span class="ruby-value str">&quot;Did you forgot to add :controller =&gt; \&quot;people\&quot; or :controller &quot;</span> <span class="ruby-operator">+</span>
          <span class="ruby-value str">&quot;segment to route definition?\nHere is what's specified:\n&quot;</span> <span class="ruby-operator">+</span>
          <span class="ruby-identifier">route</span>.<span class="ruby-identifier">inspect</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">path</span> = [<span class="ruby-identifier">params</span>[<span class="ruby-identifier">:namespace</span>], <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:controller</span>]].<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">join</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span>)
      <span class="ruby-identifier">controller</span> = <span class="ruby-identifier">path</span>.<span class="ruby-identifier">snake_case</span>.<span class="ruby-identifier">to_const_string</span>

      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">controller</span>)
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">NameError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-identifier">msg</span> = <span class="ruby-node">&quot;Controller class not found for controller `#{path}'&quot;</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-identifier">msg</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">NotFound</span>, <span class="ruby-identifier">msg</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="domain" type="Public" category="Instance" id="M000484">
          <parameters>(tld_length = 1)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">tld_length&lt;Fixnum&gt;:</td><td>Number of domains levels to include in the top level domain. Defaults to 1.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The full domain name without the port number.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 589</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">domain</span>(<span class="ruby-identifier">tld_length</span> = <span class="ruby-value">1</span>)
      <span class="ruby-identifier">host</span>.<span class="ruby-identifier">split</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DOT</span>).<span class="ruby-identifier">last</span>(<span class="ruby-value">1</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">tld_length</span>).<span class="ruby-identifier">join</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DOT</span>).<span class="ruby-identifier">sub</span>(<span class="ruby-regexp re">/:\d+$/</span>,<span class="ruby-value str">''</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="find_route!" type="Public" category="Instance" id="M000444">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Notes</h4>
<p>
Finds route using requested URI and merges route parameters (:action,
:controller and named segments) into request params hash.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 115</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">find_route!</span>
      <span class="ruby-ivar">@route</span>, <span class="ruby-ivar">@route_params</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">route_for</span>(<span class="ruby-keyword kw">self</span>)
      <span class="ruby-identifier">params</span>.<span class="ruby-identifier">merge!</span> <span class="ruby-ivar">@route_params</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route_params</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="full_uri" type="Public" category="Instance" id="M000461">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The full URI, including protocol and host

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 387</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">full_uri</span>
      <span class="ruby-identifier">protocol</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;://&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">host</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">uri</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="gateway" type="Public" category="Instance" id="M000473">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The gateway.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 483</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">gateway</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">GATEWAY_INTERFACE</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="handle" type="Public" category="Instance" id="M000440">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Handles request routing and action dispatch.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Merb::Controller:</td><td>the controller that handled the action dispatch.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/dispatcher.rb, line 52</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">handle</span>
      <span class="ruby-identifier">start</span> = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span> <span class="ruby-node">&quot;Started request handling: #{start.to_s}&quot;</span>
      
      <span class="ruby-identifier">find_route!</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">rack_response</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">handled?</span>
      
      <span class="ruby-identifier">klass</span> = <span class="ruby-identifier">controller</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug</span>(<span class="ruby-node">&quot;Routed to: #{params.inspect}&quot;</span>)
      
      <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">klass</span> <span class="ruby-operator">&lt;</span> <span class="ruby-constant">Controller</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotFound</span>, 
          <span class="ruby-node">&quot;Controller '#{klass}' not found.\n&quot;</span> \
          <span class="ruby-value str">&quot;If Merb tries to find a controller for static files, &quot;</span> \
          <span class="ruby-value str">&quot;you may need to check your Rackup file, see the Problems &quot;</span> \
          <span class="ruby-value str">&quot;section at: http://wiki.merbivore.com/pages/rack-middleware&quot;</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">abstract?</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">NotFound</span>, <span class="ruby-node">&quot;The '#{klass}' controller has no public actions&quot;</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-identifier">controller</span> = <span class="ruby-identifier">dispatch_action</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:action</span>])
      <span class="ruby-identifier">controller</span>.<span class="ruby-identifier">_benchmarks</span>[<span class="ruby-identifier">:dispatch_time</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">start</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span> <span class="ruby-identifier">controller</span>.<span class="ruby-identifier">_benchmarks</span>.<span class="ruby-identifier">inspect</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">flush</span>
      <span class="ruby-identifier">controller</span>.<span class="ruby-identifier">rack_response</span>
    <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Object</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">exception</span>
      <span class="ruby-identifier">dispatch_exception</span>(<span class="ruby-identifier">exception</span>).<span class="ruby-identifier">rack_response</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="handled?" type="Public" category="Instance" id="M000449">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
If @route_params is an Array, then it will be the rack response. In this
case, the request is considered handled.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>true if @route_params is an Array, false otherwise.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 170</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">handled?</span>
      <span class="ruby-ivar">@route_params</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Array</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="host" type="Public" category="Instance" id="M000482">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The full hostname including the port.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 561</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">host</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_X_FORWARDED_HOST</span>] <span class="ruby-operator">||</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_HOST</span>] <span class="ruby-operator">||</span>
        <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SERVER_NAME</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="if_modified_since" type="Public" category="Instance" id="M000486">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<p>
Value of If-Modified-Since request header.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 605</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">if_modified_since</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">time</span> = <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_IF_MODIFIED_SINCE</span>]
        <span class="ruby-constant">Time</span>.<span class="ruby-identifier">rfc2822</span>(<span class="ruby-identifier">time</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="if_none_match" type="Public" category="Instance" id="M000485">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<p>
Value of If-None-Match request header.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 597</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">if_none_match</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_IF_NONE_MATCH</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="keep_alive" type="Public" category="Instance" id="M000470">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Value of HTTP_KEEP_ALIVE.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 459</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">keep_alive</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_KEEP_ALIVE</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matched!" type="Public" category="Instance" id="M000446">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Sets the request as matched. This will abort evaluating any further
deferred procs.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 139</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matched!</span>
      <span class="ruby-ivar">@matched</span> = <span class="ruby-keyword kw">true</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matched?" type="Public" category="Instance" id="M000447">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Checks whether or not the request has been matched to a route.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 146</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">matched?</span>
      <span class="ruby-ivar">@matched</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="message" type="Public" category="Instance" id="M000451">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Returns the redirect message Base64 unencoded.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 303</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">message</span>
      <span class="ruby-keyword kw">return</span> {} <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">params</span>[<span class="ruby-identifier">:_message</span>]
      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-constant">Marshal</span>.<span class="ruby-identifier">load</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">unescape</span>(<span class="ruby-identifier">params</span>[<span class="ruby-identifier">:_message</span>]).<span class="ruby-identifier">unpack</span>(<span class="ruby-value str">&quot;m&quot;</span>).<span class="ruby-identifier">first</span>)
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-constant">TypeError</span>
        {}
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="method" type="Public" category="Instance" id="M000443">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Symbol:</td><td>The name of the request method, e.g. :get.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If the method is post, then the blocks specified in http_method_overrides
will be checked for the masquerading method. The block will get the
controller yielded to it. The first matching workaround wins. To disable
this behavior, set http_method_overrides = []
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 84</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">method</span>
      <span class="ruby-ivar">@method</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
        <span class="ruby-identifier">request_method</span> = <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">REQUEST_METHOD</span>].<span class="ruby-identifier">downcase</span>.<span class="ruby-identifier">to_sym</span>
        <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">request_method</span>
        <span class="ruby-keyword kw">when</span> <span class="ruby-identifier">:get</span>, <span class="ruby-identifier">:head</span>, <span class="ruby-identifier">:put</span>, <span class="ruby-identifier">:delete</span>, <span class="ruby-identifier">:options</span>
          <span class="ruby-identifier">request_method</span>
        <span class="ruby-keyword kw">when</span> <span class="ruby-identifier">:post</span>
          <span class="ruby-identifier">m</span> = <span class="ruby-keyword kw">nil</span>
          <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">http_method_overrides</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">o</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">m</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">o</span>.<span class="ruby-identifier">call</span>(<span class="ruby-keyword kw">self</span>); <span class="ruby-keyword kw">break</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">m</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-identifier">m</span>.<span class="ruby-identifier">downcase!</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">m</span>
          <span class="ruby-constant">METHODS</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">m</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">m</span>.<span class="ruby-identifier">to_sym</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">:post</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">raise</span> <span class="ruby-node">&quot;Unknown REQUEST_METHOD: #{@env[Merb::Const::REQUEST_METHOD]}&quot;</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="params" type="Public" category="Instance" id="M000450">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Mash:</td><td>All request parameters.

</td></tr>
</table>
<h4>Notes</h4>
<p>
The order of precedence for the params is XML, JSON, multipart, body and
request string.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 289</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">params</span>
      <span class="ruby-ivar">@params</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
        <span class="ruby-identifier">h</span> = <span class="ruby-identifier">body_and_query_params</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">route_params</span>)
        <span class="ruby-identifier">h</span>.<span class="ruby-identifier">merge!</span>(<span class="ruby-identifier">multipart_params</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">parse_multipart_params</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">multipart_params</span>
        <span class="ruby-identifier">h</span>.<span class="ruby-identifier">merge!</span>(<span class="ruby-identifier">json_params</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">parse_json_params</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">json_params</span>
        <span class="ruby-identifier">h</span>.<span class="ruby-identifier">merge!</span>(<span class="ruby-identifier">xml_params</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">parse_xml_params</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">xml_params</span>
        <span class="ruby-identifier">h</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="path" type="Public" category="Instance" id="M000479">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The URI without the query string. Strips trailing &quot;/&quot; and reduces
duplicate &quot;/&quot; to a single &quot;/&quot;.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 533</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">path</span>
      <span class="ruby-comment cmt"># Merb::Const::SLASH is /</span>
      <span class="ruby-comment cmt"># Merb::Const::QUESTION_MARK is ?</span>
      <span class="ruby-identifier">path</span> = (<span class="ruby-identifier">uri</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-value">? </span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">uri</span>.<span class="ruby-identifier">split</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">QUESTION_MARK</span>).<span class="ruby-identifier">first</span>).<span class="ruby-identifier">squeeze</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SLASH</span>)
      <span class="ruby-identifier">path</span> = <span class="ruby-identifier">path</span>[<span class="ruby-value">0</span><span class="ruby-operator">..</span><span class="ruby-value">-2</span>] <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">path</span>[<span class="ruby-value">-1</span>] <span class="ruby-operator">==</span> <span class="ruby-value">?/</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">path</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">1</span>
      <span class="ruby-identifier">path</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="path_info" type="Public" category="Instance" id="M000480">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The path info.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 545</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">path_info</span>
      <span class="ruby-ivar">@path_info</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Parse</span>.<span class="ruby-identifier">unescape</span>(<span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">PATH_INFO</span>])
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="port" type="Public" category="Instance" id="M000481">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>The server port.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 553</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">port</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SERVER_PORT</span>].<span class="ruby-identifier">to_i</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="protocol" type="Public" category="Instance" id="M000458">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The protocol, i.e. either &quot;https&quot; or &quot;http&quot; depending
on the HTTPS header.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 363</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">protocol</span>
      <span class="ruby-identifier">ssl?</span> <span class="ruby-value">? </span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTPS</span> <span class="ruby-operator">:</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="query_string" type="Public" category="Instance" id="M000476">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The query string.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 507</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">query_string</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">QUERY_STRING</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="rack_response" type="Public" category="Instance" id="M000448">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">(Array, <a href="#Hash">Hash</a>):</td><td>the route params for the matched route.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If the response is an Array then it is considered a direct <a
href="#Merb::Rack">Rack</a> response to be sent back as a response.
Otherwise, the route_params is a <a href="#Hash">Hash</a> with routing data
(controller, action, et al).
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 159</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">rack_response</span>
      <span class="ruby-ivar">@route_params</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="raw_post" type="Public" category="Instance" id="M000453">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The raw post.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 324</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">raw_post</span>
      <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">rewind</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:rewind</span>)
      <span class="ruby-ivar">@raw_post</span> <span class="ruby-operator">||=</span> <span class="ruby-ivar">@body</span>.<span class="ruby-identifier">read</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="referer" type="Public" category="Instance" id="M000460">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The HTTP referer.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 379</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">referer</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_REFERER</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="remote_ip" type="Public" category="Instance" id="M000457">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The remote IP address.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 343</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">remote_ip</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_CLIENT_IP</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@env</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_CLIENT_IP</span>)

      <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@env</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_X_FORWARDED_FOR</span>) <span class="ruby-keyword kw">then</span>
        <span class="ruby-identifier">remote_ips</span> = <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_X_FORWARDED_FOR</span>].<span class="ruby-identifier">split</span>(<span class="ruby-value str">','</span>).<span class="ruby-identifier">reject</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">ip</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">ip</span> <span class="ruby-operator">=~</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">LOCAL_IP_REGEXP</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">remote_ips</span>.<span class="ruby-identifier">first</span>.<span class="ruby-identifier">strip</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">remote_ips</span>.<span class="ruby-identifier">empty?</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-keyword kw">return</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">REMOTE_ADDR</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reset_params!" type="Public" category="Instance" id="M000452">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Notes</h4>
<p>
Resets the params to a nil value.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 316</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reset_params!</span>
      <span class="ruby-ivar">@params</span> = <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="script_name" type="Public" category="Instance" id="M000466">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The script name.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 427</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">script_name</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SCRIPT_NAME</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="server_name" type="Public" category="Instance" id="M000464">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The server name.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 411</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">server_name</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SERVER_NAME</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="server_software" type="Public" category="Instance" id="M000469">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The server software.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 451</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">server_software</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">SERVER_SOFTWARE</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="ssl?" type="Public" category="Instance" id="M000459">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Boolean::</td><td>True if the request is an SSL request.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 371</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">ssl?</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">UPCASE_HTTPS</span>] <span class="ruby-operator">==</span> <span class="ruby-value str">'on'</span> <span class="ruby-operator">||</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_X_FORWARDED_PROTO</span>] <span class="ruby-operator">==</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTPS</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="subdomains" type="Public" category="Instance" id="M000483">
          <parameters>(tld_length = 1)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">tld_length&lt;Fixnum&gt;:</td><td>Number of domains levels to include in the top level domain. Defaults to 1.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array:</td><td>All the subdomain parts of the host.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 575</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">subdomains</span>(<span class="ruby-identifier">tld_length</span> = <span class="ruby-value">1</span>)
      <span class="ruby-identifier">parts</span> = <span class="ruby-identifier">host</span>.<span class="ruby-identifier">split</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">DOT</span>)
      <span class="ruby-identifier">parts</span>[<span class="ruby-value">0</span><span class="ruby-operator">..</span><span class="ruby-operator">-</span>(<span class="ruby-identifier">tld_length</span><span class="ruby-operator">+</span><span class="ruby-value">2</span>)]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="uri" type="Public" category="Instance" id="M000462">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The request URI.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 395</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">uri</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">REQUEST_PATH</span>] <span class="ruby-operator">||</span> <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">REQUEST_URI</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">path_info</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="user_agent" type="Public" category="Instance" id="M000463">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The HTTP user agent.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 403</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">user_agent</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_USER_AGENT</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="version" type="Public" category="Instance" id="M000472">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The HTTP version

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 475</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">version</span>
      <span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_VERSION</span>]
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="xhr?" type="Public" category="Instance" id="M000455">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000454">xml_http_request?</a>
</p>
          ]]></description>


        </method>

        <method name="xml_http_request?" type="Public" category="Instance" id="M000454">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>If the request is an XML HTTP request.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/request.rb, line 333</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">xml_http_request?</span>
      <span class="ruby-keyword kw">not</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">XML_HTTP_REQUEST_REGEXP</span>.<span class="ruby-identifier">match</span>(<span class="ruby-ivar">@env</span>[<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">HTTP_X_REQUESTED_WITH</span>]).<span class="ruby-identifier">nil?</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::ControllerExceptions"

                         href="Merb::ControllerExceptions"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Merb::Cookies" id="Merb::Cookies">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37cookies.rb">lib/merb-core/dispatch/cookies.rb</a></infile>

      </infiles>


     <superclass>Mash</superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000487">
          <parameters>(constructor = {})</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 6</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">constructor</span> = {})
      <span class="ruby-ivar">@_options_lookup</span>  = <span class="ruby-constant">Mash</span>.<span class="ruby-identifier">new</span>
      <span class="ruby-ivar">@_cookie_defaults</span> = { <span class="ruby-value str">&quot;domain&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Controller</span>.<span class="ruby-identifier">_default_cookie_domain</span>, <span class="ruby-value str">&quot;path&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">'/'</span> }
      <span class="ruby-keyword kw">super</span> <span class="ruby-identifier">constructor</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="[]=" type="Public" category="Instance" id="M000488">
          <parameters>(key, value)</parameters>

          <description><![CDATA[
            <p>
Implicit assignment of cookie key and value.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;~to_s&gt;:</td><td>Name of the cookie.

</td></tr>
<tr><td valign="top">value&lt;~to_s&gt;:</td><td>Value of the cookie.

</td></tr>
</table>
<h4>Notes</h4>
<p>
By using this method, a cookie key is marked for being included in the
Set-Cookie response header.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 23</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-operator">[]=</span>(<span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span>)
      <span class="ruby-ivar">@_options_lookup</span>[<span class="ruby-identifier">key</span>] <span class="ruby-operator">||=</span> {}
      <span class="ruby-keyword kw">super</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="delete" type="Public" category="Instance" id="M000490">
          <parameters>(name, options = {})</parameters>

          <description><![CDATA[
            <p>
Removes the cookie on the client machine by setting the value to an empty
string and setting its expiration date into the past.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;~to_s&gt;:</td><td>Name of the cookie to delete.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Additional options to pass to <tt><a href="#M000489">set_cookie</a></tt>.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 59</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">delete</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">options</span> = {})
      <span class="ruby-identifier">set_cookie</span>(<span class="ruby-identifier">name</span>, <span class="ruby-value str">&quot;&quot;</span>, <span class="ruby-identifier">options</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-value str">&quot;expires&quot;</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-constant">Time</span>.<span class="ruby-identifier">at</span>(<span class="ruby-value">0</span>)))
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="extract_headers" type="Public" category="Instance" id="M000491">
          <parameters>(controller_defaults = {})</parameters>

          <description><![CDATA[
            <p>
Generates any necessary headers.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Hash:</td><td>The headers to set, or an empty array if no cookies are set.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 69</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">extract_headers</span>(<span class="ruby-identifier">controller_defaults</span> = {})
      <span class="ruby-identifier">defaults</span> = <span class="ruby-ivar">@_cookie_defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">controller_defaults</span>)
      <span class="ruby-identifier">cookies</span> = []
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span>, <span class="ruby-identifier">value</span><span class="ruby-operator">|</span>
        <span class="ruby-comment cmt"># Only set cookies that marked for inclusion in the response header. </span>
        <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-ivar">@_options_lookup</span>[<span class="ruby-identifier">name</span>]
        <span class="ruby-identifier">options</span> = <span class="ruby-identifier">defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-ivar">@_options_lookup</span>[<span class="ruby-identifier">name</span>])
        <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">expiry</span> = <span class="ruby-identifier">options</span>[<span class="ruby-value str">&quot;expires&quot;</span>]).<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:gmtime</span>)
          <span class="ruby-identifier">options</span>[<span class="ruby-value str">&quot;expires&quot;</span>] = <span class="ruby-identifier">expiry</span>.<span class="ruby-identifier">gmtime</span>.<span class="ruby-identifier">strftime</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Const</span><span class="ruby-operator">::</span><span class="ruby-constant">COOKIE_EXPIRATION_FORMAT</span>)
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">secure</span>  = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-value str">&quot;secure&quot;</span>)
        <span class="ruby-identifier">kookie</span>  = <span class="ruby-node">&quot;#{name}=#{Merb::Parse.escape(value)}; &quot;</span>
        <span class="ruby-comment cmt"># WebKit in particular doesn't like empty cookie options - skip them.</span>
        <span class="ruby-identifier">options</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>, <span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-identifier">kookie</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-node">&quot;#{k}=#{v}; &quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">v</span>.<span class="ruby-identifier">blank?</span> }
        <span class="ruby-identifier">kookie</span>  <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">'secure'</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">secure</span>
        <span class="ruby-identifier">cookies</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">kookie</span>.<span class="ruby-identifier">rstrip</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">cookies</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-value">? </span>{} <span class="ruby-operator">:</span> { <span class="ruby-value str">'Set-Cookie'</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">cookies</span> }
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="set_cookie" type="Public" category="Instance" id="M000489">
          <parameters>(name, value, options = {})</parameters>

          <description><![CDATA[
            <p>
Explicit assignment of cookie key, value and options
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;~to_s&gt;:</td><td>Name of the cookie.

</td></tr>
<tr><td valign="top">value&lt;~to_s&gt;:</td><td>Value of the cookie.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Additional options for the cookie (see below).

</td></tr>
</table>
<h4>Options (options)</h4>
<table>
<tr><td valign="top">:path&lt;String&gt;:</td><td>The path for which this cookie applies. Defaults to &quot;/&quot;.

</td></tr>
<tr><td valign="top">:expires&lt;Time&gt;:</td><td>Cookie expiry date.

</td></tr>
<tr><td valign="top">:domain&lt;String&gt;:</td><td>The domain for which this cookie applies.

</td></tr>
<tr><td valign="top">:secure&lt;Boolean&gt;:</td><td>Security flag.

</td></tr>
</table>
<h4>Notes</h4>
<p>
By using this method, a cookie key is marked for being included in the
Set-Cookie response header.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/cookies.rb, line 46</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">set_cookie</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">value</span>, <span class="ruby-identifier">options</span> = {})
      <span class="ruby-ivar">@_options_lookup</span>[<span class="ruby-identifier">name</span>] = <span class="ruby-identifier">options</span>
      <span class="ruby-keyword kw">self</span>[<span class="ruby-identifier">name</span>] = <span class="ruby-identifier">value</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::AbstractController" id="Merb::AbstractController">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37controller37abstract_controller.rb">lib/merb-core/controller/abstract_controller.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <h4>Why do we use Underscores?</h4>
<p>
In <a href="#Merb">Merb</a>, views are actually methods on controllers.
This provides not-insignificant speed benefits, as well as preventing us
from needing to copy over instance variables, which we think is proof that
everything belongs in one class to begin with.
</p>
<p>
Unfortunately, this means that view helpers need to be included into the
&lt;strong&gt;Controller&lt;/strong&gt; class. To avoid causing confusion
when your helpers potentially conflict with our instance methods, we use an
_ to disambiguate. As long as you don&#8217;t begin your helper methods
with _, you only need to worry about conflicts with <a
href="#Merb">Merb</a> methods that are part of the public API.
</p>
<h4>Filters</h4>
<p>
<a href="#M000510">before</a> is a class method that allows you to specify
before filters in your controllers. Filters can either be a symbol or
string that corresponds to a method name to call, or a proc object. if it
is a method name that method will be called and if it is a proc it will be
called with an argument of self where self is the current controller
object. When you use a proc as a filter it needs to take one parameter.
</p>
<p>
<a href="#M000509">after</a> is identical, but the filters are run after
the action is invoked.
</p>
<h5>Examples</h5>
<pre>
  before :some_filter
  before :authenticate, :exclude =&gt; [:login, :signup]
  before :has_role, :with =&gt; [&quot;Admin&quot;], :exclude =&gt; [:index, :show]
  before Proc.new { some_method }, :only =&gt; :foo
  before :authorize, :unless =&gt; :logged_in?
</pre>
<p>
You can use either <tt>:only =&gt; :actionname</tt> or <tt>:exclude =&gt;
[:this, :that]</tt> but not both at once. <tt>:only</tt> will only run
before the listed actions and <tt>:exclude</tt> will run for every action
that is not listed.
</p>
<p>
Merb&#8217;s before filter chain is very flexible. To halt the filter chain
you use <tt>throw :halt</tt>. If <tt>throw</tt> is called with only one
argument of <tt>:halt</tt> the return value of the method
<tt>filters_halted</tt> will be what is rendered to the view. You can
override <tt>filters_halted</tt> in your own controllers to control what it
outputs. But the <tt>throw</tt> construct is much more powerful than just
that.
</p>
<p>
<tt>throw :halt</tt> can also take a second argument. Here is what that
second argument can be and the behavior each type can have:
</p>
<ul>
<li><tt>String</tt>: when the second argument is a string then that string will
be what is rendered to the browser. Since merb&#8217;s <tt>render</tt>
method returns a string you can render a template or just use a plain
string:

<pre>
  throw :halt, &quot;You don't have permissions to do that!&quot;
  throw :halt, render(:action =&gt; :access_denied)
</pre>
</li>
<li><tt>Symbol</tt>: If the second arg is a symbol, then the method named after
that symbol will be called

<pre>
  throw :halt, :must_click_disclaimer
</pre>
</li>
<li><tt>Proc</tt>: If the second arg is a Proc, it will be called and its
return value will be what is rendered to the browser:

<pre>
  throw :halt, proc { access_denied }
  throw :halt, proc { Tidy.new(c.index) }
</pre>
</li>
</ul>
<h5>Filter Options (.before, .after, .add_filter, .if, .unless)</h5>
<table>
<tr><td valign="top">:only&lt;Symbol, Array[Symbol]&gt;:</td><td>A list of actions that this filter should apply to

</td></tr>
<tr><td valign="top">:exclude&lt;Symbol, Array[Symbol]:</td><td>A list of actions that this filter should <b>not</b> apply to

</td></tr>
<tr><td valign="top">:if&lt;Symbol, Proc&gt;:</td><td>Only apply the filter if the method named after the symbol or calling the
proc evaluates to true

</td></tr>
<tr><td valign="top">:unless&lt;Symbol, Proc&gt;:</td><td>Only apply the filter if the method named after the symbol or calling the
proc evaluates to false

</td></tr>
<tr><td valign="top">:with&lt;Array[Object]&gt;:</td><td>Arguments to be passed to the filter. Since we are talking method/proc
calls, filter method or Proc should to have the same arity as number of
elements in Array you pass to this option.

</td></tr>
</table>
<h5>Types (shortcuts for use in this file)</h5>
<table>
<tr><td valign="top">Filter:</td><td>&lt;Array[Symbol, (Symbol, <a href="#String">String</a>, Proc)]&gt;

</td></tr>
</table>
<h4>params[:action] and params[:controller] deprecated</h4>
<p>
<tt>params[:action]</tt> and <tt>params[:controller]</tt> have been
deprecated as of the 0.9.0 release. They are no longer set during dispatch,
and have been replaced by <tt>action_name</tt> and <tt><a
href="#M000492">controller_name</a></tt> respectively.
</p>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="FILTER_OPTIONS">

          <value>[:only, :exclude, :if, :unless, :with]</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>


      <attribute-list>

        <attribute name="_benchmarks">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: plugin

]]></description>
        </attribute>

        <attribute name="_thrown_content">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="action_name">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: plugin

]]></description>
        </attribute>

        <attribute name="body">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: plugin

]]></description>
        </attribute>

        <attribute name="content_type">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
Stub so content-type support in <a
href="#Merb::RenderMixin">RenderMixin</a> doesn&#8217;t throw errors :api:
private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="_reset_template_roots" type="Public" category="Class" id="M000497">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Resets the template root based on the @_template_root ivar.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 201</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_reset_template_roots</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">template_roots</span> = [[<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_template_root</span>, <span class="ruby-identifier">:_template_location</span>]]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_root=" type="Public" category="Class" id="M000496">
          <parameters>(root)</parameters>

          <description><![CDATA[
            <p>
Resets the template roots to the template root passed in.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">root&lt;~to_s&gt;:</td><td>The new path to set the template root to.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 193</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_template_root=</span>(<span class="ruby-identifier">root</span>)
    <span class="ruby-ivar">@_template_root</span> = <span class="ruby-identifier">root</span>
    <span class="ruby-identifier">_reset_template_roots</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_roots" type="Public" category="Class" id="M000498">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">roots&lt;Array[Array]&gt;:</td><td><a href="#Merb::Template">Template</a> roots as pairs of template root path
and template location method.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 211</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_template_roots</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">template_roots</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">_reset_template_roots</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_roots=" type="Public" category="Class" id="M000499">
          <parameters>(roots)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">roots&lt;Array[Array]&gt;:</td><td><a href="#Merb::Template">Template</a> roots as pairs of template root path
and template location method.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 221</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_template_roots=</span>(<span class="ruby-identifier">roots</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">template_roots</span> = <span class="ruby-identifier">roots</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="after" type="Public" category="Class" id="M000509">
          <parameters>(filter = nil, opts = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Adds a filter to the after filter chain
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">filter&lt;Symbol, Proc&gt;:</td><td>The filter to add. Defaults to nil.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Filter options (see class documentation under <tt>Filter Options</tt>).

</td></tr>
<tr><td valign="top">&amp;block:</td><td>A block to use as a filter if filter is nil.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If the filter already exists, its options will be replaced with opts.;
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 441</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">after</span>(<span class="ruby-identifier">filter</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">opts</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-identifier">add_filter</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_after_filters</span>, <span class="ruby-identifier">filter</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">block</span>, <span class="ruby-identifier">opts</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="before" type="Public" category="Class" id="M000510">
          <parameters>(filter = nil, opts = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Adds a filter to the before filter chain.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">filter&lt;Symbol, Proc&gt;:</td><td>The filter to add. Defaults to nil.

</td></tr>
<tr><td valign="top">opts&lt;Hash&gt;:</td><td>Filter options (see class documentation under <tt>Filter Options</tt>).

</td></tr>
<tr><td valign="top">&amp;block:</td><td>A block to use as a filter if filter is nil.

</td></tr>
</table>
<h4>Notes</h4>
<p>
If the filter already exists, its options will be replaced with opts.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 457</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">before</span>(<span class="ruby-identifier">filter</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">opts</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-identifier">add_filter</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_before_filters</span>, <span class="ruby-identifier">filter</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">block</span>, <span class="ruby-identifier">opts</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="controller_name" type="Public" category="Class" id="M000492">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The controller name in path form, e.g. &quot;admin/items&quot;.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 128</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">controller_name</span>() <span class="ruby-ivar">@controller_name</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_const_path</span> <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="inherited" type="Public" category="Class" id="M000501">
          <parameters>(klass)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;Merb::AbstractController&gt;:</td><td>The controller that is being inherited from <a
href="#Merb::AbstractController">Merb::AbstractController</a>

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 239</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">inherited</span>(<span class="ruby-identifier">klass</span>)
    <span class="ruby-identifier">_abstract_subclasses</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span>
    <span class="ruby-identifier">helper_module_name</span> = <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/^(#|Merb::)/</span> <span class="ruby-operator">?</span> <span class="ruby-node">&quot;#{klass}Helper&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-node">&quot;Merb::#{klass}Helper&quot;</span>
    <span class="ruby-constant">Object</span>.<span class="ruby-identifier">make_module</span> <span class="ruby-identifier">helper_module_name</span>
    <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">class_eval</span> <span class="ruby-value str">&quot;include Object.full_const_get(\&quot;\#{helper_module_name}\&quot;) rescue nil\n&quot;</span>
    <span class="ruby-keyword kw">super</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new" type="Public" category="Class" id="M000502">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
This will initialize the controller, it is designed to be overridden in
subclasses (like MerbController)
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*args:</td><td>The args are ignored in this class, but we need this so that subclassed
initializes can have parameters

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 256</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-ivar">@_benchmarks</span> = {}
    <span class="ruby-ivar">@_caught_content</span> = {}
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="skip_after" type="Public" category="Class" id="M000511">
          <parameters>(filter)</parameters>

          <description><![CDATA[
            <p>
Removes a filter from the after filter chain. This removes the filter from
the filter chain for the whole controller and does not take any options.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">filter&lt;Symbol, String&gt;:</td><td>A filter name to skip.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 469</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">skip_after</span>(<span class="ruby-identifier">filter</span>)
    <span class="ruby-identifier">skip_filter</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_after_filters</span>, <span class="ruby-identifier">filter</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="skip_before" type="Public" category="Class" id="M000512">
          <parameters>(filter)</parameters>

          <description><![CDATA[
            <p>
Removes a filter from the before filter chain. This removes the filter from
the filter chain for the whole controller and does not take any options.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">filter&lt;Symbol, String&gt;:</td><td>A filter name to skip.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 481</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">skip_before</span>(<span class="ruby-identifier">filter</span>)
    <span class="ruby-identifier">skip_filter</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_before_filters</span> , <span class="ruby-identifier">filter</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="subclasses_list" type="Public" category="Class" id="M000500">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the list of classes that have specifically subclassed <a
href="#Merb::AbstractController">AbstractController</a>. Does not include
all descendants.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Set:</td><td>The subclasses.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 232</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">subclasses_list</span>() <span class="ruby-identifier">_abstract_subclasses</span> <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="_absolute_template_location" type="Public" category="Instance" id="M000495">
          <parameters>(template, type)</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The location to look for a template - override this method for particular
behaviour.

</td></tr>
</table>
<h4>Parameters</h4>
<table>
<tr><td valign="top">template&lt;String&gt;:</td><td>The absolute path to a template - without template extension.

</td></tr>
<tr><td valign="top">type&lt;~to_s&gt;:</td><td>The mime-type of the template that will be rendered. Defaults to being
called with nil.

</td></tr>
</table>
<p>
:api: public @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 182</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_absolute_template_location</span>(<span class="ruby-identifier">template</span>, <span class="ruby-identifier">type</span>)
    <span class="ruby-identifier">template</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_call_action" type="Public" category="Instance" id="M000504">
          <parameters>(action)</parameters>

          <description><![CDATA[
            <p>
This method exists to provide an overridable hook for ActionArgs. It uses
send to call the action method.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">action&lt;~to_s&gt;:</td><td>the action method to dispatch to

</td></tr>
</table>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 314</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_call_action</span>(<span class="ruby-identifier">action</span>)
    <span class="ruby-identifier">send</span>(<span class="ruby-identifier">action</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_call_filter_for_action?" type="Public" category="Instance" id="M000506">
          <parameters>(rule, action_name)</parameters>

          <description><![CDATA[
            <p>
Determines whether the filter should be called for the current action using
:only and :exclude.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">rule&lt;Hash&gt;:</td><td>Rules for the filter (see below).

</td></tr>
<tr><td valign="top">action_name&lt;~to_s&gt;:</td><td>The name of the action to be called.

</td></tr>
</table>
<h4>Options (rule)</h4>
<table>
<tr><td valign="top">:only&lt;Array&gt;:</td><td>Optional list of actions to fire. If given, action_name must be a part of
it for this function to return true.

</td></tr>
<tr><td valign="top">:exclude&lt;Array&gt;:</td><td>Optional list of actions not to fire. If given, action_name must not be a
part of it for this function to return true.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the action should be called.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 373</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_call_filter_for_action?</span>(<span class="ruby-identifier">rule</span>, <span class="ruby-identifier">action_name</span>)
    <span class="ruby-comment cmt"># Both:</span>
    <span class="ruby-comment cmt"># * no :only or the current action is in the :only list</span>
    <span class="ruby-comment cmt"># * no :exclude or the current action is not in the :exclude list</span>
    (<span class="ruby-operator">!</span><span class="ruby-identifier">rule</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:only</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">rule</span>[<span class="ruby-identifier">:only</span>].<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">action_name</span>)) <span class="ruby-operator">&amp;&amp;</span>
    (<span class="ruby-operator">!</span><span class="ruby-identifier">rule</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:exclude</span>) <span class="ruby-operator">||</span> <span class="ruby-operator">!</span><span class="ruby-identifier">rule</span>[<span class="ruby-identifier">:exclude</span>].<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">action_name</span>))
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_call_filters" type="Public" category="Instance" id="M000505">
          <parameters>(filter_set)</parameters>

          <description><![CDATA[
            <p>
Calls a filter chain.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">filter_set&lt;Array[Filter]&gt;:</td><td>A set of filters in the form [[:filter, rule], [:filter, rule]]

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Symbol:</td><td>:filter_chain_completed.

</td></tr>
</table>
<h4>Notes</h4>
<p>
Filter rules can be Symbols, Strings, or Procs.
</p>
<table>
<tr><td valign="top">Symbols or Strings:</td><td>Call the method represented by the <tt>Symbol</tt> or <tt>String</tt>.

</td></tr>
<tr><td valign="top">Procs:</td><td>Execute the <tt>Proc</tt>, in the context of the controller (self will be
the controller)

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 337</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_call_filters</span>(<span class="ruby-identifier">filter_set</span>)
    (<span class="ruby-identifier">filter_set</span> <span class="ruby-operator">||</span> []).<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">filter</span>, <span class="ruby-identifier">rule</span><span class="ruby-operator">|</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">_call_filter_for_action?</span>(<span class="ruby-identifier">rule</span>, <span class="ruby-identifier">action_name</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">_filter_condition_met?</span>(<span class="ruby-identifier">rule</span>)
        <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">filter</span>
        <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Symbol</span>, <span class="ruby-constant">String</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">rule</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:with</span>)
            <span class="ruby-identifier">args</span> = <span class="ruby-identifier">rule</span>[<span class="ruby-identifier">:with</span>]
            <span class="ruby-identifier">send</span>(<span class="ruby-identifier">filter</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">send</span>(<span class="ruby-identifier">filter</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Proc</span> <span class="ruby-keyword kw">then</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">instance_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">filter</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">:filter_chain_completed</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_dispatch" type="Public" category="Instance" id="M000503">
          <parameters>(action)</parameters>

          <description><![CDATA[
            <p>
This will dispatch the request, calling internal before/after dispatch
callbacks. If the return value of <a href="#M000505">_call_filters</a> is
not :filter_chain_completed the action is not called, and the return from
the filters is used instead.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">action&lt;~to_s&gt;:</td><td>The action to dispatch to. This will be send&#8216;ed in _call_action.
Defaults to :to_s.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">&lt;~to_s&gt;:</td><td>Returns the string that was returned from the action.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>Invalid result caught from before filters.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 277</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_dispatch</span>(<span class="ruby-identifier">action</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">action_name</span> = <span class="ruby-identifier">action</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_before_dispatch_callbacks</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">cb</span><span class="ruby-operator">|</span> <span class="ruby-identifier">cb</span>.<span class="ruby-identifier">call</span>(<span class="ruby-keyword kw">self</span>) }

    <span class="ruby-identifier">caught</span> = <span class="ruby-identifier">catch</span>(<span class="ruby-identifier">:halt</span>) <span class="ruby-keyword kw">do</span>
      <span class="ruby-identifier">start</span> = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
      <span class="ruby-identifier">result</span> = <span class="ruby-identifier">_call_filters</span>(<span class="ruby-identifier">_before_filters</span>)
      <span class="ruby-ivar">@_benchmarks</span>[<span class="ruby-identifier">:before_filters_time</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">start</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">_before_filters</span>
      <span class="ruby-identifier">result</span>
    <span class="ruby-keyword kw">end</span>
  
    <span class="ruby-ivar">@body</span> = <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">caught</span>
    <span class="ruby-keyword kw">when</span> <span class="ruby-identifier">:filter_chain_completed</span>  <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">_call_action</span>(<span class="ruby-identifier">action_name</span>)
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">String</span>                   <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">caught</span>
    <span class="ruby-comment cmt"># return *something* if you throw halt with nothing</span>
    <span class="ruby-keyword kw">when</span> <span class="ruby-keyword kw">nil</span>                      <span class="ruby-keyword kw">then</span> <span class="ruby-value str">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Filter Chain Halted!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Symbol</span>                   <span class="ruby-keyword kw">then</span> <span class="ruby-identifier">__send__</span>(<span class="ruby-identifier">caught</span>)
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Proc</span>                     <span class="ruby-keyword kw">then</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">instance_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">caught</span>)
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-node">&quot;Threw :halt, #{caught}. Expected String, nil, Symbol, Proc.&quot;</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">start</span> = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>
    <span class="ruby-identifier">_call_filters</span>(<span class="ruby-identifier">_after_filters</span>)
    <span class="ruby-ivar">@_benchmarks</span>[<span class="ruby-identifier">:after_filters_time</span>] = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">start</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">_after_filters</span>
    
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">_after_dispatch_callbacks</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">cb</span><span class="ruby-operator">|</span> <span class="ruby-identifier">cb</span>.<span class="ruby-identifier">call</span>(<span class="ruby-keyword kw">self</span>) }
    
    <span class="ruby-ivar">@body</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_evaluate_condition" type="Public" category="Instance" id="M000508">
          <parameters>(condition)</parameters>

          <description><![CDATA[
            <p>
Evaluates a filter condition (:if or :unless)
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">condition&lt;Symbol, Proc&gt;:</td><td>The condition to evaluate.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>condition not a Symbol or Proc.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the condition is met.

</td></tr>
</table>
<h4>Alternatives</h4>
<p>
If condition is a symbol, it will be send&#8217;ed. If it is a Proc it will
be called directly with self as an argument.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 419</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_evaluate_condition</span>(<span class="ruby-identifier">condition</span>)
    <span class="ruby-keyword kw">case</span> <span class="ruby-identifier">condition</span>
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Symbol</span> <span class="ruby-operator">:</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">condition</span>)
    <span class="ruby-keyword kw">when</span> <span class="ruby-constant">Proc</span> <span class="ruby-operator">:</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">instance_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">condition</span>)
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>,
            <span class="ruby-value str">'Filter condtions need to be either a Symbol or a Proc'</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_filter_condition_met?" type="Public" category="Instance" id="M000507">
          <parameters>(rule)</parameters>

          <description><![CDATA[
            <p>
Determines whether the filter should be run based on the conditions passed
(:if and :unless)
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">rule&lt;Hash&gt;:</td><td>Rules for the filter (see below).

</td></tr>
</table>
<h4>Options (rule)</h4>
<table>
<tr><td valign="top">:if&lt;Array&gt;:</td><td>Optional conditions that must be met for the filter to fire.

</td></tr>
<tr><td valign="top">:unless&lt;Array&gt;:</td><td>Optional conditions that must not be met for the filter to fire.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>True if the conditions are met.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 395</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_filter_condition_met?</span>(<span class="ruby-identifier">rule</span>)
    <span class="ruby-comment cmt"># Both:</span>
    <span class="ruby-comment cmt"># * no :if or the if condition evaluates to true</span>
    <span class="ruby-comment cmt"># * no :unless or the unless condition evaluates to false</span>
    (<span class="ruby-operator">!</span><span class="ruby-identifier">rule</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:if</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">_evaluate_condition</span>(<span class="ruby-identifier">rule</span>[<span class="ruby-identifier">:if</span>])) <span class="ruby-operator">&amp;&amp;</span>
    (<span class="ruby-operator">!</span><span class="ruby-identifier">rule</span>.<span class="ruby-identifier">key?</span>(<span class="ruby-identifier">:unless</span>) <span class="ruby-operator">||</span> <span class="ruby-operator">!</span> <span class="ruby-identifier">_evaluate_condition</span>(<span class="ruby-identifier">rule</span>[<span class="ruby-identifier">:unless</span>]))
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="_template_location" type="Public" category="Instance" id="M000494">
          <parameters>(context, type, controller)</parameters>

          <description><![CDATA[
            <p>
This is called after the controller is instantiated to figure out where to
look for templates under the _template_root. Override this to define a new
structure for your app.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">context&lt;~to_s&gt;:</td><td>The controller context (the action or template name).

</td></tr>
<tr><td valign="top">type&lt;~to_s&gt;:</td><td>The content type. Could be nil.

</td></tr>
<tr><td valign="top">controller&lt;~to_s&gt;:</td><td>The name of the controller. Defaults to being called with the
controller_name. Set t

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>Indicating where to look for the template for the current controller,
context, and content-type.

</td></tr>
</table>
<h4>Notes</h4>
<p>
The type is irrelevant for controller-types that don&#8217;t support
content-type negotiation, so we default to not include it in the
superclass.
</p>
<h4>Examples</h4>
<pre>
  def _template_location
    &quot;#{params[:controller]}.#{params[:action]}.#{content_type}&quot;
  end
</pre>
<p>
This would look for templates at controller.action.mime.type instead of
controller/action.mime.type
</p>
<p>
:api: public @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 167</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_template_location</span>(<span class="ruby-identifier">context</span>, <span class="ruby-identifier">type</span>, <span class="ruby-identifier">controller</span>)
    <span class="ruby-identifier">controller</span> <span class="ruby-value">? </span><span class="ruby-node">&quot;#{controller}/#{context}&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">context</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="absolute_url" type="Public" category="Instance" id="M000515">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Returns the absolute url including the passed protocol and host.
</p>
<p>
This uses the same arguments as the url method, with added requirements of
protocol and host options.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 552</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">absolute_url</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">options</span>  = <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">args</span>) <span class="ruby-operator">||</span> {}
    <span class="ruby-identifier">protocol</span> = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:protocol</span>)
    <span class="ruby-identifier">host</span>     = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:host</span>)
    
    <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-value str">&quot;The :protocol option must be specified&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">protocol</span>
    <span class="ruby-identifier">raise</span> <span class="ruby-constant">ArgumentError</span>, <span class="ruby-value str">&quot;The :host option must be specified&quot;</span>     <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">host</span>
    
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">options</span>
    
    <span class="ruby-identifier">protocol</span> <span class="ruby-operator">+</span> <span class="ruby-value str">&quot;://&quot;</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">host</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">url</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="capture" type="Public" category="Instance" id="M000517">
          <parameters>(*args) {|*args| ...}</parameters>

          <description><![CDATA[
            <p>
Calls the capture method for the selected template engine.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*args:</td><td>Arguments to pass to the block.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>The block to call.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The output of a template block or the return value of a non-template block
converted to a string.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 609</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">capture</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
    <span class="ruby-identifier">ret</span> = <span class="ruby-keyword kw">nil</span>

    <span class="ruby-identifier">captured</span> = <span class="ruby-identifier">send</span>(<span class="ruby-node">&quot;capture_#{@_engine}&quot;</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-operator">*</span><span class="ruby-identifier">args</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">ret</span> = <span class="ruby-keyword kw">yield</span> <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># return captured value only if it is not empty</span>
    <span class="ruby-identifier">captured</span>.<span class="ruby-identifier">empty?</span> <span class="ruby-value">? </span><span class="ruby-identifier">ret</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">captured</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="concat" type="Public" category="Instance" id="M000518">
          <parameters>(str, binding)</parameters>

          <description><![CDATA[
            <p>
Calls the concatenate method for the selected template engine.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">str&lt;String&gt;:</td><td>The string to concatenate to the buffer.

</td></tr>
<tr><td valign="top">binding&lt;Binding&gt;:</td><td>The binding to use for the buffer.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 627</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">concat</span>(<span class="ruby-identifier">str</span>, <span class="ruby-identifier">binding</span>)
    <span class="ruby-identifier">send</span>(<span class="ruby-node">&quot;concat_#{@_engine}&quot;</span>, <span class="ruby-identifier">str</span>, <span class="ruby-identifier">binding</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="controller_name" type="Public" category="Instance" id="M000493">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The controller name in path form, e.g. &quot;admin/items&quot;.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 134</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">controller_name</span>()      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">controller_name</span>                   <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="relative_url" type="Public" category="Instance" id="M000514">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000513">url</a>
</p>
          ]]></description>


        </method>

        <method name="resource" type="Public" category="Instance" id="M000516">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Generates a URL for a single or nested resource.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">resources&lt;Symbol,Object&gt;:</td><td>The resources for which the URL

</td></tr>
</table>
<pre>
  should be generated. These resources should be specified
  in the router.rb file using #resources and #resource.
</pre>
<table>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Any extra parameters that are needed to

</td></tr>
</table>
<pre>
  generate the URL.
</pre>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  resources :users do
    resources :comments
  end
</pre>
<p>
end
</p>
<p>
resource(:users) # =&gt; /users resource(@user) # =&gt; /users/10
resource(@user, :comments) # =&gt; /users/10/comments resource(@user,
@comment) # =&gt; /users/10/comments/15 resource(:users, :new) # =&gt;
/users/new resource(:@user, :edit) # =&gt; /users/10/edit
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 594</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> {}
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="url" type="Public" category="Instance" id="M000513">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
There are three possible ways to use this method. First, if you have a
named route, you can specify the route as the first parameter as a symbol
and any paramters in a hash. Second, you can generate the default route by
just passing the params hash, just passing the params hash. Finally, you
can use the anonymous parameters. This allows you to specify the parameters
to a named route in the order they appear in the router.
</p>
<h4>Parameters(Named Route)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation.

</td></tr>
</table>
<h4>Parameters(Default Route)</h4>
<table>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation. This route will use the default route.

</td></tr>
</table>
<h4>Parameters(Anonymous Parameters)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Array&gt;:</td><td>An array of anonymous parameters to generate the route with. These
parameters are assigned to the route parameters in the order that they are
passed.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Named Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, :title =&gt; &quot;new_article&quot;)
</p>
<p>
Default Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  default_routes
</pre>
<p>
end
</p>
<p>
url(:controller =&gt; &quot;articles&quot;, :action =&gt; &quot;new&quot;)
</p>
<p>
Anonymous Parameters
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:year/:month/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, 2008, 10, &quot;test_article&quot;)
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/controller/abstract_controller.rb, line 539</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> {}
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Merb::RenderMixin"

                         href="Merb::RenderMixin"

        />

        <included-module name="Merb::InlineTemplates"

                         href="Merb::InlineTemplates"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Merb::Logger" id="Merb::Logger">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37logger.rb">lib/merb-core/logger.rb</a></infile>

      </infiles>


     <superclass>Extlib::Logger</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a href="#Merb::Logger">Merb::Logger</a> = Extlib::Logger
</p>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="Levels">

          <value>Mash.new({       :fatal =&gt; 7,       :error =&gt; 6,       :warn  =&gt; 4,       :info  =&gt; 3,       :debug =&gt; 0     }) unless const_defined?(:Levels)</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>


      <attribute-list>

        <attribute name="auto_flush">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="buffer">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="delimiter">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="init_args">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="level">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

        <attribute name="log">

          <attribute-rw>R</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000521">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
To initialize the logger you create a new object, proxies to set_log.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*args:</td><td>Arguments to create the log from. See set_logs for specifics.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 83</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
      <span class="ruby-identifier">set_log</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="&lt;&lt;" type="Public" category="Instance" id="M000525">
          <parameters>(string = nil)</parameters>

          <description><![CDATA[
            <p>
Appends a message to the log. The methods yield to an optional block and
the output of this block will be appended to the message.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">string&lt;String&gt;:</td><td>The message to be logged. Defaults to nil.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The resulting message added to the log file.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 142</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-operator">&lt;&lt;</span>(<span class="ruby-identifier">string</span> = <span class="ruby-keyword kw">nil</span>)
      <span class="ruby-identifier">message</span> = <span class="ruby-value str">&quot;&quot;</span>
      <span class="ruby-identifier">message</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">delimiter</span>
      <span class="ruby-identifier">message</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">string</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">string</span>
      <span class="ruby-identifier">message</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;\n&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">message</span>[<span class="ruby-value">-1</span>] <span class="ruby-operator">==</span> <span class="ruby-value">?\n</span>
      <span class="ruby-ivar">@buffer</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">message</span>
      <span class="ruby-identifier">flush</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@auto_flush</span>

      <span class="ruby-identifier">message</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="close" type="Public" category="Instance" id="M000524">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Closes and removes the current log object.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 128</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">close</span>
      <span class="ruby-identifier">flush</span>
      <span class="ruby-ivar">@log</span>.<span class="ruby-identifier">close</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@log</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:close</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-ivar">@log</span>.<span class="ruby-identifier">tty?</span>
      <span class="ruby-ivar">@log</span> = <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="flush" type="Public" category="Instance" id="M000523">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Flush the entire buffer to the log object.
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 120</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">flush</span>
      <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-ivar">@buffer</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">0</span>
      <span class="ruby-ivar">@mutex</span>.<span class="ruby-identifier">synchronize</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-ivar">@log</span>.<span class="ruby-identifier">write</span>(<span class="ruby-ivar">@buffer</span>.<span class="ruby-identifier">slice!</span>(<span class="ruby-value">0</span><span class="ruby-operator">..</span><span class="ruby-value">-1</span>).<span class="ruby-identifier">to_s</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="push" type="Public" category="Instance" id="M000526">
          <parameters>(string = nil)</parameters>

          <description><![CDATA[
            <p>
Alias for #&lt;&lt;
</p>
          ]]></description>


        </method>

        <method name="set_log" type="Public" category="Instance" id="M000522">
          <parameters>(stream = Merb::Config[:log_stream], log_level = Merb::Config[:log_level], delimiter = Merb::Config[:log_delimiter], auto_flush = Merb::Config[:log_auto_flush])</parameters>

          <description><![CDATA[
            <p>
Replaces an existing logger with a new one.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">log&lt;IO, String&gt;:</td><td>Either an IO object or a name of a logfile.

</td></tr>
<tr><td valign="top">log_level&lt;~to_sym&gt;:</td><td>The log level from, e.g. :fatal or :info. Defaults to :error in the
production environment and :debug otherwise.

</td></tr>
<tr><td valign="top">delimiter&lt;String&gt;:</td><td>Delimiter to use between message sections. Defaults to &quot; ~ &quot;.

</td></tr>
<tr><td valign="top">auto_flush&lt;Boolean&gt;:</td><td>Whether the log should automatically flush after new messages are added.
Defaults to false.

</td></tr>
</table>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 99</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">set_log</span>(<span class="ruby-identifier">stream</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_stream</span>],
      <span class="ruby-identifier">log_level</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_level</span>],
      <span class="ruby-identifier">delimiter</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_delimiter</span>],
      <span class="ruby-identifier">auto_flush</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_auto_flush</span>])

      <span class="ruby-ivar">@buffer</span>                   = []
      <span class="ruby-ivar">@delimiter</span>                = <span class="ruby-identifier">delimiter</span>
      <span class="ruby-ivar">@auto_flush</span>               = <span class="ruby-identifier">auto_flush</span>

      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Levels</span>[<span class="ruby-identifier">log_level</span>]
        <span class="ruby-ivar">@level</span>                  = <span class="ruby-constant">Levels</span>[<span class="ruby-identifier">log_level</span>]
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-ivar">@level</span>                  = <span class="ruby-identifier">log_level</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-ivar">@log</span>                      = <span class="ruby-identifier">stream</span>
      <span class="ruby-ivar">@log</span>.<span class="ruby-identifier">sync</span>                 = <span class="ruby-keyword kw">true</span>
      <span class="ruby-ivar">@mutex</span> = (<span class="ruby-ivar">@@mutex</span>[<span class="ruby-ivar">@log</span>] <span class="ruby-operator">||=</span> <span class="ruby-constant">Mutex</span>.<span class="ruby-identifier">new</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="verbose" type="Public" category="Instance" id="M000520">
          <parameters>(message, level = :warn)</parameters>

          <description><![CDATA[
            <p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 10</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">verbose</span>(<span class="ruby-identifier">message</span>, <span class="ruby-identifier">level</span> = <span class="ruby-identifier">:warn</span>)
    <span class="ruby-identifier">send</span>(<span class="ruby-identifier">level</span>, <span class="ruby-identifier">message</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="verbose!" type="Public" category="Instance" id="M000519">
          <parameters>(message, level = :warn)</parameters>

          <description><![CDATA[
            <p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/logger.rb, line 5</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">verbose!</span>(<span class="ruby-identifier">message</span>, <span class="ruby-identifier">level</span> = <span class="ruby-identifier">:warn</span>)
    <span class="ruby-identifier">send</span>(<span class="ruby-node">&quot;#{level}!&quot;</span>, <span class="ruby-identifier">message</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Router" id="Merb::Router">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37behavior.rb">lib/merb-core/dispatch/router/behavior.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37cached_proc.rb">lib/merb-core/dispatch/router/cached_proc.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37resources.rb">lib/merb-core/dispatch/router/resources.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37route.rb">lib/merb-core/dispatch/router/route.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router.rb">lib/merb-core/dispatch/router.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a href="#Merb::Router">Router</a> stores route definitions and finds the
first route that matches the incoming request URL.
</p>
<p>
Then information from route is used by dispatcher to call action on the
controller.
</p>
<h4>Routes compilation.</h4>
<p>
The most interesting method of <a href="#Merb::Router">Router</a> (and
heart of route matching machinery) is match method generated on the fly
from routes definitions. It is called routes compilation. Generated match
method body contains one if/elsif statement that picks the first matching
route definition and sets values to named parameters of the route.
</p>
<p>
Compilation is synchronized by mutex.
</p>

    ]]></description>

    <contents>





      <attribute-list>

        <attribute name="around_match">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
A block that will be run around route matching. This block must yield in
order for the actual matching to happen.

<hr size="1"></hr><p>
:api: plugin
</p>
]]></description>
        </attribute>

        <attribute name="named_routes">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
A hash containing all the named application routes. The names are absolute
(as in, all routes named in a namespace will contain the name of the
namespace).

<hr size="1"></hr><p>
:api: private
</p>
]]></description>
        </attribute>

        <attribute name="resource_routes">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
A hash of all the application resource routes. The key of the hash is an
array with each element containing the &quot;path&quot; for the resource
for example, given the following resource routes:

<p>
resources :users do
</p>
<pre>
  resources :comments
</pre>
<p>
end
</p>
<p>
The show comment route will have a key of [&quot;User&quot;,
&quot;Comment&quot;]
</p>
<hr size="1"></hr><p>
:api: private
</p>
]]></description>
        </attribute>

        <attribute name="root_behavior">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
The starting point for route definition. Any route defined in a <a
href="#M000527">Merb::Router.prepare</a> block will defined in context of
this behavior.

<h4>Examples</h4>
<p>
Merb::Router.root_behavior =
Merb::Router.root_behavior.match(&quot;/hello&quot;)
</p>
<p>
In the previous example, all routes will have the path prefix /hello. It is
important to note that this attribute must be set before any routes are
defined in order for the behavior to be applied to the routes.
</p>
<hr size="1"></hr><p>
:api: plugin
</p>
]]></description>
        </attribute>

        <attribute name="routes">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
An array containing all the application routes in order of priority.

<hr size="1"></hr><p>
:api: private
</p>
]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="extensions" type="Public" category="Class" id="M000532">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Adds functionality to the router. This can be in the form of including a
new module or directly defining new methods.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block&lt;Block&gt;:</td><td>A block of code used to extend the route builder with. This can be
including a module or directly defining some new methods that should be
available to building routes.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<h4>Example</h4>
<p>
<a href="#M000532">Merb::Router.extensions</a> do
</p>
<pre>
  def domain(name, domain, options={}, &amp;block)
    match(:domain =&gt; domain).namespace(name, :path =&gt; nil, &amp;block)
  end
</pre>
<p>
end
</p>
<p>
In this case, a method &#8216;domain&#8217; will be available to the route
builder which will create namespaces around domains instead of path
prefixes.
</p>
<p>
This can then be used as follows.
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  domain(:admin, &quot;my-admin.com&quot;) do
    # ... routes come here ...
  end
</pre>
<p>
end
</p>
<hr size="1"></hr><p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router.rb, line 310</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">extensions</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-constant">Router</span><span class="ruby-operator">::</span><span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">class_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="prepare" type="Public" category="Class" id="M000527">
          <parameters>(first = [], last = [], &amp;block)</parameters>

          <description><![CDATA[
            <p>
Creates a route building context and evaluates the block in it. A copy of
<tt>root_behavior</tt> (and instance of <a
href="#Merb::Router::Behavior">Behavior</a>) is copied as the context.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">first&lt;Array&gt;:</td><td>An array containing routes that should be prepended to the routes defined
in the block.

</td></tr>
<tr><td valign="top">last&lt;Array&gt;:</td><td>An array containing routes that should be appended to the routes defined in
the block.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Merb::Router:</td><td>Returns self to allow chaining of methods.

</td></tr>
</table>
<hr size="1"></hr><p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router.rb, line 103</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">prepare</span>(<span class="ruby-identifier">first</span> = [], <span class="ruby-identifier">last</span> = [], <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-ivar">@routes</span> = []
        <span class="ruby-identifier">root_behavior</span>.<span class="ruby-identifier">_with_proxy</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-ivar">@routes</span> = <span class="ruby-identifier">first</span> <span class="ruby-operator">+</span> <span class="ruby-ivar">@routes</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">last</span>
        <span class="ruby-identifier">compile</span>
        <span class="ruby-keyword kw">self</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reset!" type="Public" category="Class" id="M000528">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Clears the routing table. Route generation and request matching won&#8217;t
work anymore until a new routing table is built.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router.rb, line 115</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reset!</span>
        <span class="ruby-keyword kw">class</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-keyword kw">self</span>
          <span class="ruby-identifier">alias_method</span> <span class="ruby-identifier">:match</span>, <span class="ruby-identifier">:match_before_compilation</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">routes</span>, <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">named_routes</span>, <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">resource_routes</span> = [], {}, {}
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="resource" type="Public" category="Class" id="M000531">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Generates a URL from the resource(s)
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">resources&lt;Symbol,Object&gt;:</td><td>The identifiers for the resource route to generate. These can either be
symbols or objects. Symbols denote resource collection routes and objects
denote the members.

</td></tr>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>Any extra parameters needed to generate the route.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL

</td></tr>
</table>
<hr size="1"></hr><p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router.rb, line 255</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-identifier">defaults</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">pop</span>
        <span class="ruby-identifier">options</span>  = <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">args</span>) <span class="ruby-operator">||</span> {}
        <span class="ruby-identifier">key</span>      = []
        <span class="ruby-identifier">params</span>   = []
        
        <span class="ruby-identifier">args</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">arg</span><span class="ruby-operator">|</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Symbol</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">String</span>)
            <span class="ruby-identifier">key</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">to_s</span>
          <span class="ruby-keyword kw">else</span>
            <span class="ruby-identifier">key</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">arg</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">to_s</span>
            <span class="ruby-identifier">params</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">arg</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">route</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">resource_routes</span>[<span class="ruby-identifier">key</span>]
          <span class="ruby-identifier">raise</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span><span class="ruby-operator">::</span><span class="ruby-constant">GenerationError</span>, <span class="ruby-node">&quot;Resource route not found: #{args.inspect}&quot;</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-identifier">params</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">options</span>
        
        <span class="ruby-identifier">route</span>.<span class="ruby-identifier">generate</span>(<span class="ruby-identifier">params</span>, <span class="ruby-identifier">defaults</span>, <span class="ruby-keyword kw">true</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="route_for" type="Public" category="Class" id="M000529">
          <parameters>(request)</parameters>

          <description><![CDATA[
            <p>
Finds route matching URI of the request and returns a tuple of [route
index, route params]. This method is called by the dispatcher and
isn&#8217;t as useful in applications.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">request&lt;Merb::Request&gt;:</td><td>request to match.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[Integer, Hash]:</td><td>Two-tuple: route index and route parameters. Route parameters are
:controller, :action and all the named segments of the route.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router.rb, line 135</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">route_for</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-identifier">index</span>, <span class="ruby-identifier">params</span> = <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@around_match</span>
          <span class="ruby-identifier">send</span>(<span class="ruby-ivar">@around_match</span>, <span class="ruby-identifier">request</span>) { <span class="ruby-identifier">match</span>(<span class="ruby-identifier">request</span>) }
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">match</span>(<span class="ruby-identifier">request</span>)
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-identifier">route</span> = <span class="ruby-identifier">routes</span>[<span class="ruby-identifier">index</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">index</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-operator">!</span><span class="ruby-identifier">route</span>
          <span class="ruby-identifier">raise</span> <span class="ruby-constant">ControllerExceptions</span><span class="ruby-operator">::</span><span class="ruby-constant">NotFound</span>, 
            <span class="ruby-node">&quot;No routes match the request: #{request.uri}&quot;</span>
        <span class="ruby-keyword kw">end</span>
        [<span class="ruby-identifier">route</span>, <span class="ruby-identifier">params</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="url" type="Public" category="Class" id="M000530">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
There are three possible ways to use this method. First, if you have a
named route, you can specify the route as the first parameter as a symbol
and any parameters in a hash. Second, you can generate the default route by
just passing the params hash, just passing the params hash. Finally, you
can use the anonymous parameters. This allows you to specify the parameters
to a named route in the order they appear in the router.
</p>
<h4>Parameters(Named Route)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation.

</td></tr>
</table>
<h4>Parameters(Default Route)</h4>
<table>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation. This route will use the default route.

</td></tr>
</table>
<h4>Parameters(Anonymous Parameters)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Array&gt;:</td><td>An array of anonymous parameters to generate the route with. These
parameters are assigned to the route parameters in the order that they are
passed.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Named Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, :title =&gt; &quot;new_article&quot;)
</p>
<p>
Default Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  default_routes
</pre>
<p>
end
</p>
<p>
url(:controller =&gt; &quot;articles&quot;, :action =&gt; &quot;new&quot;)
</p>
<p>
Anonymous Parameters
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:year/:month/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, 2008, 10, &quot;test_article&quot;)
</p>
<hr size="1"></hr><p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router.rb, line 221</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">name</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Route</span>)
          <span class="ruby-identifier">route</span> = <span class="ruby-identifier">name</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">name</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Symbol</span>)
            <span class="ruby-identifier">args</span>.<span class="ruby-identifier">unshift</span>(<span class="ruby-identifier">name</span>)
            <span class="ruby-identifier">name</span> = <span class="ruby-identifier">:default</span>
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">route</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">named_routes</span>[<span class="ruby-identifier">name</span>]
            <span class="ruby-identifier">raise</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span><span class="ruby-operator">::</span><span class="ruby-constant">GenerationError</span>, <span class="ruby-node">&quot;Named route not found: #{name}&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">defaults</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">pop</span>
        
        <span class="ruby-identifier">route</span>.<span class="ruby-identifier">generate</span>(<span class="ruby-identifier">args</span>, <span class="ruby-identifier">defaults</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Merb::Router::Resources" id="Merb::Router::Resources">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37resources.rb">lib/merb-core/dispatch/router/resources.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="resource" type="Public" category="Instance" id="M000534">
          <parameters>(name, *args, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Behavior#<tt>resource</tt> is a route helper for defining a singular
RESTful resource. It yields to a block for child routes.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;<a href="#String">String</a>, Symbol&gt;:</td><td>The name of the resource.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Overrides and parameters to be associated with the route.

</td></tr>
</table>
<h4>Options (options)</h4>
<p>
:namespace&lt;~to_s&gt;: The namespace for this route.
:name_prefix&lt;~to_s&gt;:
</p>
<pre>
  A prefix for the named routes. If a namespace is passed and there
  isn't a name prefix, the namespace will become the prefix.
</pre>
<p>
:controller&lt;~to_s&gt;: The controller for this route
</p>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">next_level&lt;Behavior&gt;:</td><td>The child behavior.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array:</td><td>Routes which define a RESTful single resource.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
 r.resource :account # will result in the typical RESTful CRUD
   # shows new resource form
   # GET     /account/new                :action =&gt; &quot;new&quot;

   # creates resource
   # POST    /account/?(\.:format)?,     :action =&gt; &quot;create&quot;

   # shows resource
   # GET     /account/(\.:format)?       :action =&gt; &quot;show&quot;

   # shows edit form
   # GET     /account//edit           :action =&gt; &quot;edit&quot;

   # updates resource
   # PUT     /account/(\.:format)?       :action =&gt; &quot;update&quot;

   # shows deletion confirmation page
   # GET     /account//delete         :action =&gt; &quot;delete&quot;

   # destroys resources
   # DELETE  /account/(\.:format)?       :action =&gt; &quot;destroy&quot;
</pre>
<p>
You can optionally pass :namespace and :controller to refine the routing or
pass a block to nest resources.
</p>
<pre>
  r.resource :account, :namespace =&gt; &quot;admin&quot; do |account|
    account.resources :preferences, :controller =&gt; &quot;settings&quot;
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/resources.rb, line 227</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">name</span>    = <span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_s</span>
        <span class="ruby-identifier">options</span> = <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">args</span>) <span class="ruby-operator">||</span> {}
        <span class="ruby-identifier">params</span>  = { <span class="ruby-identifier">:controller</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:controller</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">name</span>.<span class="ruby-identifier">pluralize</span> }
        <span class="ruby-identifier">member</span>  = { <span class="ruby-identifier">:new</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>, <span class="ruby-identifier">:edit</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>, <span class="ruby-identifier">:delete</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span> }.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:member</span>) <span class="ruby-operator">||</span> {})

        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:name_prefix</span>]       <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-comment cmt"># Don't use a name_prefix if not needed</span>
        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:resource_prefix</span>]   <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-comment cmt"># Don't use a resource_prefix if not needed</span>
        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:controller_prefix</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:namespace</span>)

        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">namespace</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">options</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">params</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">resource</span><span class="ruby-operator">|</span>
          <span class="ruby-comment cmt"># =&gt; show</span>
          
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;show&quot;</span>).
            <span class="ruby-identifier">name</span>(<span class="ruby-identifier">name</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>)
            
          <span class="ruby-comment cmt"># =&gt; create</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:post</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;create&quot;</span>)
            
          <span class="ruby-comment cmt"># =&gt; update</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:put</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;update&quot;</span>)
            
          <span class="ruby-comment cmt"># =&gt; destroy</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:delete</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;destroy&quot;</span>)
          
          <span class="ruby-identifier">member</span>.<span class="ruby-identifier">each_pair</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">action</span>, <span class="ruby-identifier">method</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">action</span> = <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>
            <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{action}(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">method</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">action</span>).
              <span class="ruby-identifier">name</span>(<span class="ruby-identifier">action</span>, <span class="ruby-identifier">name</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">action</span>)
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
            <span class="ruby-identifier">builders</span> = {}
            
            <span class="ruby-identifier">builders</span>[<span class="ruby-identifier">:member</span>] = <span class="ruby-identifier">lambda</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">action</span>, <span class="ruby-identifier">to</span>, <span class="ruby-identifier">method</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{action}(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">method</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">to</span>).
                <span class="ruby-identifier">name</span>(<span class="ruby-identifier">action</span>, <span class="ruby-identifier">name</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">action</span>)
            <span class="ruby-keyword kw">end</span>
            
            <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">options</span>(<span class="ruby-identifier">:name_prefix</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">name</span>, <span class="ruby-identifier">:resource_prefix</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">name</span>).
              <span class="ruby-identifier">resource_block</span>(<span class="ruby-identifier">builders</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="resources" type="Public" category="Instance" id="M000533">
          <parameters>(name, *args, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Behavior#<tt>resources</tt> is a route helper for defining a collection of
RESTful resources. It yields to a block for child routes.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name&lt;<a href="#String">String</a>, Symbol&gt;:</td><td>The name of the resources

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Overrides and parameters to be associated with the route

</td></tr>
</table>
<h4>Options (options)</h4>
<p>
:namespace&lt;~to_s&gt;: The namespace for this route.
:name_prefix&lt;~to_s&gt;:
</p>
<pre>
  A prefix for the named routes. If a namespace is passed and there
  isn't a name prefix, the namespace will become the prefix.
</pre>
<p>
:controller&lt;~to_s&gt;: The controller for this route
:collection&lt;~to_s&gt;: Special settings for the collections routes
:member&lt;Hash&gt;:
</p>
<pre>
  Special settings and resources related to a specific member of this
  resource.
</pre>
<p>
:identify&lt;Symbol|Array&gt;: The method(s) that should be called on the
object
</p>
<pre>
  before inserting it into an URL.
</pre>
<p>
:keys&lt;Array&gt;:
</p>
<pre>
  A list of the keys to be used instead of :id with the resource in the order of the url.
</pre>
<p>
:singular&lt;Symbol&gt;
</p>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">next_level&lt;Behavior&gt;:</td><td>The child behavior.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array:</td><td>Routes which will define the specified RESTful collection of resources

</td></tr>
</table>
<h4>Examples</h4>
<pre>
 r.resources :posts # will result in the typical RESTful CRUD
   # lists resources
   # GET     /posts/?(\.:format)?      :action =&gt; &quot;index&quot;
   # GET     /posts/index(\.:format)?  :action =&gt; &quot;index&quot;

   # shows new resource form
   # GET     /posts/new                :action =&gt; &quot;new&quot;

   # creates resource
   # POST    /posts/?(\.:format)?,     :action =&gt; &quot;create&quot;

   # shows resource
   # GET     /posts/:id(\.:format)?    :action =&gt; &quot;show&quot;

   # shows edit form
   # GET     /posts/:id/edit        :action =&gt; &quot;edit&quot;

   # updates resource
   # PUT     /posts/:id(\.:format)?    :action =&gt; &quot;update&quot;

   # shows deletion confirmation page
   # GET     /posts/:id/delete      :action =&gt; &quot;delete&quot;

   # destroys resources
   # DELETE  /posts/:id(\.:format)?    :action =&gt; &quot;destroy&quot;

 # Nesting resources
 r.resources :posts do |posts|
   posts.resources :comments
 end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/resources.rb, line 70</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resources</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">name</span>       = <span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_s</span>
        <span class="ruby-identifier">options</span>    = <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">args</span>) <span class="ruby-operator">||</span> {}
        <span class="ruby-identifier">match_opts</span> = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">except</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">resource_options</span>)
        <span class="ruby-identifier">options</span>    = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">only</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">resource_options</span>)
        <span class="ruby-identifier">singular</span>   = <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:singular</span>] <span class="ruby-operator">?</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:singular</span>].<span class="ruby-identifier">to_s</span> <span class="ruby-operator">:</span> <span class="ruby-constant">Extlib</span><span class="ruby-operator">::</span><span class="ruby-constant">Inflection</span>.<span class="ruby-identifier">singularize</span>(<span class="ruby-identifier">name</span>)
        <span class="ruby-identifier">klass_name</span> = <span class="ruby-identifier">args</span>.<span class="ruby-identifier">first</span> <span class="ruby-value">? </span><span class="ruby-identifier">args</span>.<span class="ruby-identifier">first</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">singular</span>.<span class="ruby-identifier">to_const_string</span>
        <span class="ruby-identifier">keys</span>       = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:keys</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:key</span>)
        <span class="ruby-identifier">params</span>     = { <span class="ruby-identifier">:controller</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:controller</span>) <span class="ruby-operator">||</span> <span class="ruby-identifier">name</span> }
        <span class="ruby-identifier">collection</span> = <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:collection</span>) <span class="ruby-operator">||</span> {}
        <span class="ruby-identifier">member</span>     = { <span class="ruby-identifier">:edit</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>, <span class="ruby-identifier">:delete</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span> }.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:member</span>) <span class="ruby-operator">||</span> {})
        
        <span class="ruby-comment cmt"># Use the identifier for the class as a default</span>
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">klass</span> = <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">klass_name</span>)
            <span class="ruby-identifier">keys</span> <span class="ruby-operator">||=</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:identify</span>]
            <span class="ruby-identifier">keys</span> <span class="ruby-operator">||=</span> <span class="ruby-ivar">@identifiers</span>[<span class="ruby-identifier">klass</span>]
          <span class="ruby-keyword kw">elsif</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:identify</span>]
            <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-node">&quot;The constant #{klass_name} does not exist, please specify the constant for this resource&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">NameError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-node">&quot;Could not find resource model #{klass_name}&quot;</span>)
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">keys</span> = [ <span class="ruby-identifier">keys</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">:id</span> ].<span class="ruby-identifier">flatten</span>
        

        <span class="ruby-comment cmt"># Try pulling :namespace out of options for backwards compatibility</span>
        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:name_prefix</span>]       <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-comment cmt"># Don't use a name_prefix if not needed</span>
        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:resource_prefix</span>]   <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">nil</span> <span class="ruby-comment cmt"># Don't use a resource_prefix if not needed</span>
        <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:controller_prefix</span>] <span class="ruby-operator">||=</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:namespace</span>)

        <span class="ruby-identifier">context</span> = <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:identify</span>]
        <span class="ruby-identifier">context</span> = <span class="ruby-identifier">klass</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:identify</span>] <span class="ruby-operator">?</span> <span class="ruby-identifier">identify</span>(<span class="ruby-identifier">klass</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">options</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">:identify</span>)) <span class="ruby-operator">:</span> <span class="ruby-keyword kw">self</span>
        <span class="ruby-identifier">context</span>.<span class="ruby-identifier">namespace</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">options</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">params</span>) <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">resource</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">root_keys</span> = <span class="ruby-identifier">keys</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;:#{k}&quot;</span> }.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;/&quot;</span>)
          
          <span class="ruby-comment cmt"># =&gt; index</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;(/index)(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;index&quot;</span>).
            <span class="ruby-identifier">name</span>(<span class="ruby-identifier">name</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>)
            
          <span class="ruby-comment cmt"># =&gt; create</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:post</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;create&quot;</span>)
          
          <span class="ruby-comment cmt"># =&gt; new</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;/new(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;new&quot;</span>).
            <span class="ruby-identifier">name</span>(<span class="ruby-value str">&quot;new&quot;</span>, <span class="ruby-identifier">singular</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>, <span class="ruby-value str">&quot;new&quot;</span>)

          <span class="ruby-comment cmt"># =&gt; user defined collection routes</span>
          <span class="ruby-identifier">collection</span>.<span class="ruby-identifier">each_pair</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">action</span>, <span class="ruby-identifier">method</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">action</span> = <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>
            <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{action}(.:format)&quot;</span>, <span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">method</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-node">&quot;#{action}&quot;</span>).
              <span class="ruby-identifier">name</span>(<span class="ruby-identifier">action</span>, <span class="ruby-identifier">name</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">action</span>)
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-comment cmt"># =&gt; show</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{root_keys}(.:format)&quot;</span>, <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:get</span>)).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;show&quot;</span>).
            <span class="ruby-identifier">name</span>(<span class="ruby-identifier">singular</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">klass_name</span>, <span class="ruby-identifier">:identifiers</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">keys</span>)

          <span class="ruby-comment cmt"># =&gt; user defined member routes</span>
          <span class="ruby-identifier">member</span>.<span class="ruby-identifier">each_pair</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">action</span>, <span class="ruby-identifier">method</span><span class="ruby-operator">|</span>
            <span class="ruby-identifier">action</span> = <span class="ruby-identifier">action</span>.<span class="ruby-identifier">to_s</span>
            <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{root_keys}/#{action}(.:format)&quot;</span>, <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">method</span>)).
              <span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-node">&quot;#{action}&quot;</span>).<span class="ruby-identifier">name</span>(<span class="ruby-identifier">action</span>, <span class="ruby-identifier">singular</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">klass_name</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">:identifiers</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">keys</span>)
          <span class="ruby-keyword kw">end</span>

          <span class="ruby-comment cmt"># =&gt; update</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{root_keys}(.:format)&quot;</span>, <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:put</span>)).
            <span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;update&quot;</span>)
            
          <span class="ruby-comment cmt"># =&gt; destroy</span>
          <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{root_keys}(.:format)&quot;</span>, <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">:delete</span>)).
            <span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;destroy&quot;</span>)

          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
            <span class="ruby-identifier">parent_keys</span> = <span class="ruby-identifier">keys</span>.<span class="ruby-identifier">map</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">k</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">k</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:id</span> <span class="ruby-operator">?</span> <span class="ruby-node">&quot;#{singular}_id&quot;</span>.<span class="ruby-identifier">to_sym</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">k</span>
            <span class="ruby-keyword kw">end</span>
            
            <span class="ruby-identifier">nested_keys</span> = <span class="ruby-identifier">parent_keys</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;:#{k}&quot;</span> }.<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;/&quot;</span>)

            <span class="ruby-identifier">nested_match_opts</span> = <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">except</span>(<span class="ruby-identifier">:id</span>)
            <span class="ruby-identifier">nested_match_opts</span>[<span class="ruby-node">&quot;#{singular}_id&quot;</span>.<span class="ruby-identifier">to_sym</span>] = <span class="ruby-identifier">match_opts</span>[<span class="ruby-identifier">:id</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">match_opts</span>[<span class="ruby-identifier">:id</span>]
            
            <span class="ruby-comment cmt"># Procs for building the extra collection/member resource routes</span>
            <span class="ruby-identifier">placeholder</span> = <span class="ruby-constant">Router</span>.<span class="ruby-identifier">resource_routes</span>[ [<span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:resource_prefix</span>], <span class="ruby-identifier">klass_name</span>].<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">compact</span> ]
            <span class="ruby-identifier">builders</span>    = {}
            
            <span class="ruby-identifier">builders</span>[<span class="ruby-identifier">:collection</span>] = <span class="ruby-identifier">lambda</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">action</span>, <span class="ruby-identifier">to</span>, <span class="ruby-identifier">method</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">before</span>(<span class="ruby-identifier">placeholder</span>).<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{action}(.:format)&quot;</span>, <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">method</span>)).
                <span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">to</span>).<span class="ruby-identifier">name</span>(<span class="ruby-identifier">action</span>, <span class="ruby-identifier">name</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">action</span>)
            <span class="ruby-keyword kw">end</span>
            
            <span class="ruby-identifier">builders</span>[<span class="ruby-identifier">:member</span>] = <span class="ruby-identifier">lambda</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">action</span>, <span class="ruby-identifier">to</span>, <span class="ruby-identifier">method</span><span class="ruby-operator">|</span>
              <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{root_keys}/#{action}(.:format)&quot;</span>, <span class="ruby-identifier">match_opts</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">:method</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">method</span>)).
                <span class="ruby-identifier">to</span>(<span class="ruby-identifier">:action</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">to</span>).<span class="ruby-identifier">name</span>(<span class="ruby-identifier">action</span>, <span class="ruby-identifier">singular</span>).<span class="ruby-identifier">register_resource</span>(<span class="ruby-identifier">klass_name</span>, <span class="ruby-identifier">action</span>, <span class="ruby-identifier">:identifiers</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">keys</span>)
            <span class="ruby-keyword kw">end</span>
            
            <span class="ruby-identifier">resource</span>.<span class="ruby-identifier">options</span>(<span class="ruby-identifier">:name_prefix</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">singular</span>, <span class="ruby-identifier">:resource_prefix</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">klass_name</span>, <span class="ruby-identifier">:parent_keys</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">parent_keys</span>).
              <span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{nested_keys}&quot;</span>, <span class="ruby-identifier">nested_match_opts</span>).<span class="ruby-identifier">resource_block</span>(<span class="ruby-identifier">builders</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span> <span class="ruby-comment cmt"># namespace</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Protected" category="Instance">


        <method name="register_resource" type="Protected" category="Instance" id="M000535">
          <parameters>(*key)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/resources.rb, line 275</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">register_resource</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">key</span>)
        <span class="ruby-identifier">options</span>     = <span class="ruby-identifier">extract_options_from_args!</span>(<span class="ruby-identifier">key</span>) <span class="ruby-operator">||</span> {}
        <span class="ruby-identifier">key</span>         = [ <span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:resource_prefix</span>], <span class="ruby-identifier">key</span> ].<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">compact</span>
        <span class="ruby-identifier">identifiers</span> = [ <span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:parent_keys</span>], <span class="ruby-identifier">options</span>[<span class="ruby-identifier">:identifiers</span>] ]
        <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">resource</span> = <span class="ruby-identifier">key</span>
        <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">resource_identifiers</span> = <span class="ruby-identifier">identifiers</span>.<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">id</span><span class="ruby-operator">|</span> <span class="ruby-identifier">id</span>.<span class="ruby-identifier">to_sym</span> }
        <span class="ruby-keyword kw">self</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="resource_block" type="Protected" category="Instance" id="M000536">
          <parameters>(builders, &amp;block)</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/resources.rb, line 285</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource_block</span>(<span class="ruby-identifier">builders</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">ResourceBehavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">builders</span>, <span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="resource_options" type="Protected" category="Instance" id="M000537">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/resources.rb, line 290</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">resource_options</span>
        [<span class="ruby-identifier">:singular</span>, <span class="ruby-identifier">:keys</span>, <span class="ruby-identifier">:key</span>, <span class="ruby-identifier">:controller</span>, <span class="ruby-identifier">:member</span>, <span class="ruby-identifier">:collection</span>, <span class="ruby-identifier">:identify</span>,
          <span class="ruby-identifier">:name_prefix</span>, <span class="ruby-identifier">:resource_prefix</span>, <span class="ruby-identifier">:controller_prefix</span>, <span class="ruby-identifier">:namespace</span>, <span class="ruby-identifier">:path</span>]
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

  <Class name="Merb::Router::Behavior" id="Merb::Router::Behavior">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37behavior.rb">lib/merb-core/dispatch/router/behavior.rb</a></infile>

        <infile><a href="#lib37merb-core37dispatch37router37resources.rb">lib/merb-core/dispatch/router/resources.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="_with_proxy" type="Public" category="Instance" id="M000556">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Proxies routes with the default behaviors.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>defines routes within the provided context.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 664</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_with_proxy</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">proxy</span> = <span class="ruby-constant">Proxy</span>.<span class="ruby-identifier">new</span>
        <span class="ruby-identifier">proxy</span>.<span class="ruby-identifier">push</span> <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">proxy</span>.<span class="ruby-identifier">instance_eval</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">proxy</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="capture" type="Public" category="Instance" id="M000555">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Captures any new routes that have been added within the block.
</p>
<p>
This utility method lets you track routes that have been added; it
doesn&#8217;t affect how/which routes are added.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>A context in which routes are generated.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 642</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">capture</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">captured_routes</span> = {}
        <span class="ruby-identifier">name_prefix</span>     = [<span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:name_prefix</span>]].<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">p</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;#{p}_&quot;</span>}
        <span class="ruby-identifier">current_names</span>   = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">named_routes</span>.<span class="ruby-identifier">keys</span>
        
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">named_routes</span>.<span class="ruby-identifier">reject</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>,<span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-identifier">current_names</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">k</span>) }.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span>, <span class="ruby-identifier">route</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">name</span> = <span class="ruby-identifier">route</span>.<span class="ruby-identifier">name</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">sub</span>(<span class="ruby-node">&quot;#{name_prefix}&quot;</span>, <span class="ruby-value str">''</span>).<span class="ruby-identifier">to_sym</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">name_prefix</span>.<span class="ruby-identifier">empty?</span>
          <span class="ruby-identifier">captured_routes</span>[<span class="ruby-identifier">name</span>] = <span class="ruby-identifier">route</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">captured_routes</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="default" type="Public" category="Instance" id="M000542">
          <parameters>(defaults = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Sets default values for route parameters. If no value for the key can be
extracted from the request, then the value provided here will be used.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">defaults&lt;Hash&gt;:</td><td>The default values for named segments.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>All routes defined in the block will be scoped to the defaults defined by
the <a href="#M000542">default</a> method.

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">r&lt;Behavior&gt;:</td><td><tt>optional</tt> - The defaults behavior object.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 365</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default</span>(<span class="ruby-identifier">defaults</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">defaults</span>), <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="default_routes" type="Public" category="Instance" id="M000548">
          <parameters>(params = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Creates the most common routes /:controller/:action/:id.format when called
with no arguments. You can pass a hash or a block to add parameters or
override the default behavior.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>This optional hash can be used to augment the default settings

</td></tr>
<tr><td valign="top">&amp;block:</td><td>When passing a block a new behavior is yielded and more refinement is
possible.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Route:</td><td>the default route

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  # Passing an extra parameter &quot;mode&quot; to all matches
  r.default_routes :mode =&gt; &quot;default&quot;

  # specifying exceptions within a block
  r.default_routes do |nr|
    nr.defer_to do |request, params|
      nr.match(:protocol =&gt; &quot;http://&quot;).to(:controller =&gt; &quot;login&quot;,
        :action =&gt; &quot;new&quot;) if request.env[&quot;REQUEST_URI&quot;] =~ /\/private\//
    end
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 515</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default_routes</span>(<span class="ruby-identifier">params</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">match</span>(<span class="ruby-value str">&quot;/:controller(/:action(/:id))(.:format)&quot;</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">params</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>).<span class="ruby-identifier">name</span>(<span class="ruby-identifier">:default</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="defaults" type="Public" category="Instance" id="M000543">
          <parameters>(defaults = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000542">default</a>
</p>
          ]]></description>


        </method>

        <method name="defer" type="Public" category="Instance" id="M000550">
          <parameters>(deferred_block, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Takes a Proc as a parameter and applies it as a deferred proc for all the
routes defined in the block. This is mostly interesting for plugin
developers.
</p>
<h4>Examples</h4>
<pre>
  defered_block = proc do |r, p|
    p.merge :controller =&gt; 'api/comments' if request.xhr?
  end
  defer(defered_block) do
    resources :comments
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 555</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">defer</span>(<span class="ruby-identifier">deferred_block</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">blocks</span> = <span class="ruby-ivar">@blocks</span> <span class="ruby-operator">+</span> [<span class="ruby-constant">CachedProc</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">deferred_block</span>)]
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-identifier">blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="defer_to" type="Public" category="Instance" id="M000549">
          <parameters>(params = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Takes a block and stores it for deferred conditional routes. The block
takes the <tt>request</tt> object and the <tt>params</tt> hash as
parameters.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>Parameters and conditions associated with this behavior.

</td></tr>
<tr><td valign="top">&amp;conditional_block:</td><td>A block with the conditions to be met for the behavior to take effect.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Route :</td><td>The default route.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  defer_to do |request, params|
    params.merge :controller =&gt; 'here',
      :action =&gt; 'there' if request.xhr?
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 538</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">defer_to</span>(<span class="ruby-identifier">params</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">defer</span>(<span class="ruby-identifier">block</span>).<span class="ruby-identifier">to</span>(<span class="ruby-identifier">params</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="fixatable" type="Public" category="Instance" id="M000553">
          <parameters>(enable = true)</parameters>

          <description><![CDATA[
            <p>
Specifies that a route can be fixatable.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">enabled&lt;Boolean&gt;:</td><td>True enables fixation on the route.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 605</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">fixatable</span>(<span class="ruby-identifier">enable</span> = <span class="ruby-keyword kw">true</span>)
        <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">fixation</span> = <span class="ruby-identifier">enable</span>
        <span class="ruby-keyword kw">self</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="full_name" type="Public" category="Instance" id="M000552">
          <parameters>(name)</parameters>

          <description><![CDATA[
            <p>
Names this route in <a href="#Merb::Router">Router</a>. Name must be a
Symbol. The current name_prefix is ignored.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">symbol&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>symbol is not a Symbol.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 588</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">full_name</span>(<span class="ruby-identifier">name</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-value str">&quot;:this is reserved. Please pick another name.&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">name</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:this</span>
        
        <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route</span>
          <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">name</span> = <span class="ruby-identifier">name</span>
          <span class="ruby-keyword kw">self</span>
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">register</span>.<span class="ruby-identifier">full_name</span>(<span class="ruby-identifier">name</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="identify" type="Public" category="Instance" id="M000547">
          <parameters>(identifiers = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Sets a method for instances of specified Classes to be called before
insertion into a route. This is useful when using models and want a
specific method to be called on it (For example, for ActiveRecord::Base it
would be to_param).
</p>
<p>
The default method called on objects is to_s.
</p>
<h4>Paramters</h4>
<table>
<tr><td valign="top">identifiers&lt;Hash&gt;:</td><td>The keys are Classes and the values are the method that instances of the
specified class should have called on.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>All routes defined in the block will be call the specified methods during
generation.

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">r&lt;Behavior&gt;:</td><td>The identify behavior object. This is optional

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 475</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">identify</span>(<span class="ruby-identifier">identifiers</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">identifiers</span> = <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Hash</span> <span class="ruby-operator">===</span> <span class="ruby-identifier">identifiers</span>
          <span class="ruby-ivar">@identifiers</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">identifiers</span>)
        <span class="ruby-keyword kw">else</span>
          { <span class="ruby-constant">Object</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">identifiers</span> }
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-identifier">identifiers</span>.<span class="ruby-identifier">freeze</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="match" type="Public" category="Instance" id="M000538">
          <parameters>(path = {}, conditions = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Defines the <tt>conditions</tt> that are required to match a <a
href="#Merb::Request">Request</a>. Each <tt>condition</tt> is applied to a
method of the <a href="#Merb::Request">Request</a> object. Conditions can
also be applied to segments of the <tt>path</tt>.
</p>
<p>
If <a href="#M000538">match</a> is passed a block, it will create a new
route scope with the conditions passed to it and yield to the block such
that all routes that are defined in the block have the conditions applied
to them.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;<a href="#String">String</a>, Regexp&gt;:</td><td>The pattern against which <a href="#Merb::Request">Merb::Request</a> path
is matched.

<p>
When <tt>path</tt> is a <a href="#String">String</a>, any substring that is
wrapped in parenthesis is considered optional and any segment that begins
with a colon, ex.: &quot;:login&quot;, defines both a capture and a named
param. Extra conditions can then be applied each named param individually.
</p>
<p>
When <tt>path</tt> is a Regexp, the pattern is left untouched and the <a
href="#Merb::Request">Merb::Request</a> path is matched against it as is.
</p>
<p>
<tt>path</tt> is optional.
</p>
</td></tr>
<tr><td valign="top">conditions&lt;Hash&gt;:</td><td>Additional conditions that the request must meet in order to match. The
keys must be the names of previously defined path segments or be methods
that the <a href="#Merb::Request">Merb::Request</a> instance will respond
to. The value is the string or regexp that matched the returned value.
Conditions are inherited by child routes.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>All routes defined in the block will be scoped to the conditions defined by
the <a href="#M000538">match</a> method.

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">r&lt;Behavior&gt;:</td><td><tt>optional</tt> - The match behavior object.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Behavior:</td><td>A new instance of <a href="#Merb::Router::Behavior">Behavior</a> with the
specified path and conditions.

</td></tr>
</table>
<p>
<tt>Tip</tt>: When nesting always make sure the most inner sub-match
registers a Route and doesn&#8217;t just return new Behaviors.
</p>
<h4>Examples</h4>
<pre>
  # registers /foo/bar to controller =&gt; &quot;foo&quot;, :action =&gt; &quot;bar&quot;
  # and /foo/baz to controller =&gt; &quot;foo&quot;, :action =&gt; &quot;baz&quot;
  match(&quot;/foo&quot;) do
    match(&quot;/bar&quot;).to(:controller =&gt; &quot;foo&quot;, :action =&gt; &quot;bar&quot;)
    match(&quot;/baz&quot;).to(:controller =&gt; &quot;foo&quot;, :action =&gt; &quot;caz&quot;)
  end

  # Checks the format of the segments against the specified Regexp
  match(&quot;/:string/:number&quot;, :string =&gt; /[a-z]+/, :number =&gt; /\d+/).
    to(:controller =&gt; &quot;string_or_numbers&quot;)

  # Equivalent to the default_route
  match(&quot;/:controller(/:action(:id))(.:format)&quot;).register

  #match only if the browser string contains MSIE or Gecko
  match(&quot;/foo&quot;, :user_agent =&gt; /(MSIE|Gecko)/ )
       .to(:controller =&gt; 'foo', :action =&gt; 'popular')

  # Route GET and POST requests to different actions (see also #resources)
  r.match('/foo', :method =&gt; :get).to(:action =&gt; 'show')
  r.match('/foo', :method =&gt; :post).to(:action =&gt; 'create')

  # match also takes regular expressions

  r.match(%r[/account/([a-z]{4,6})]).to(:controller =&gt; &quot;account&quot;,
     :action =&gt; &quot;show&quot;, :id =&gt; &quot;[1]&quot;)

  r.match(%r{/?(en|es|fr|be|nl)?}).to(:language =&gt; &quot;[1]&quot;) do
    match(&quot;/guides/:action/:id&quot;).to(:controller =&gt; &quot;tour_guides&quot;)
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 280</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">match</span>(<span class="ruby-identifier">path</span> = {}, <span class="ruby-identifier">conditions</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">path</span>, <span class="ruby-identifier">conditions</span> = <span class="ruby-identifier">path</span>[<span class="ruby-identifier">:path</span>], <span class="ruby-identifier">path</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">path</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hash</span>)
        
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-value str">&quot;The route has already been committed. Further conditions cannot be specified&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route</span>
        
        <span class="ruby-identifier">conditions</span>.<span class="ruby-identifier">delete_if</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">k</span>, <span class="ruby-identifier">v</span><span class="ruby-operator">|</span> <span class="ruby-identifier">v</span>.<span class="ruby-identifier">nil?</span> }
        <span class="ruby-identifier">conditions</span>[<span class="ruby-identifier">:path</span>] = <span class="ruby-identifier">merge_paths</span>(<span class="ruby-identifier">path</span>)
        
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">conditions</span>), <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="name" type="Public" category="Instance" id="M000551">
          <parameters>(prefix, name = nil)</parameters>

          <description><![CDATA[
            <p>
Registers the route as a named route with the name given.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">symbol&lt;Symbol&gt;:</td><td>the name of the route.

</td></tr>
</table>
<h4>Raises</h4>
<table>
<tr><td valign="top">ArgumentError:</td><td>symbol is not a Symbol.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 570</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">name</span>(<span class="ruby-identifier">prefix</span>, <span class="ruby-identifier">name</span> = <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">name</span>
          <span class="ruby-identifier">name</span>, <span class="ruby-identifier">prefix</span> = <span class="ruby-identifier">prefix</span>, <span class="ruby-keyword kw">nil</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">full_name</span>([<span class="ruby-identifier">prefix</span>, <span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:name_prefix</span>], <span class="ruby-identifier">name</span>].<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">join</span>(<span class="ruby-value str">'_'</span>))
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="namespace" type="Public" category="Instance" id="M000546">
          <parameters>(name_or_path, opts = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Creates a namespace for a route. This way you can have logical separation
to your routes.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">name_or_path&lt;<a href="#String">String</a>, Symbol&gt;:</td><td>The name or path of the namespace.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Optional hash (see below)

</td></tr>
<tr><td valign="top">&amp;block:</td><td>All routes defined in the block will be scoped to the namespace defined by
the <a href="#M000546">namespace</a> method.

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:path&lt;String&gt;:</td><td>match against this url

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">r&lt;Behavior&gt;:</td><td>The namespace behavior object. This is optional

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  namespace :admin do
    resources :accounts
    resource :email
  end

  # /super_admin/accounts
  namespace(:admin, :path=&gt;&quot;super_admin&quot;) do
    resources :accounts
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 439</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">namespace</span>(<span class="ruby-identifier">name_or_path</span>, <span class="ruby-identifier">opts</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">name</span> = <span class="ruby-identifier">name_or_path</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-comment cmt"># We don't want this modified ever</span>
        <span class="ruby-identifier">path</span> = <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">:path</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:path</span>] <span class="ruby-operator">:</span> <span class="ruby-identifier">name</span>
        
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-value str">&quot;The route has already been committed. Further options cannot be specified&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route</span>
        
        <span class="ruby-comment cmt"># option keys could be nil</span>
        <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:controller_prefix</span>] = <span class="ruby-identifier">name</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">:controller_prefix</span>)
        <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:name_prefix</span>]       = <span class="ruby-identifier">name</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">:name_prefix</span>)
        <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:resource_prefix</span>]   = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:name_prefix</span>] <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">has_key?</span>(<span class="ruby-identifier">:resource_prefix</span>)
        
        <span class="ruby-identifier">behavior</span> = <span class="ruby-keyword kw">self</span>
        <span class="ruby-identifier">behavior</span> = <span class="ruby-identifier">behavior</span>.<span class="ruby-identifier">match</span>(<span class="ruby-node">&quot;/#{path}&quot;</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">path</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">path</span>.<span class="ruby-identifier">empty?</span>
        <span class="ruby-identifier">behavior</span>.<span class="ruby-identifier">options</span>(<span class="ruby-identifier">opts</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="options" type="Public" category="Instance" id="M000545">
          <parameters>(opts = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000544">options</a>
</p>
          ]]></description>


        </method>

        <method name="options" type="Public" category="Instance" id="M000544">
          <parameters>(opts = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Allows the fine tuning of certain router options.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>The options to set for all routes defined in the scope. The currently
supported options are:

<ul>
<li>:controller_prefix - The module that the controller is included in.

</li>
<li>:name_prefix - The prefix added to all routes named with <a
href="#M000551">name</a>

</li>
</ul>
</td></tr>
<tr><td valign="top">&amp;block:</td><td>All routes defined in the block will be scoped to the options defined by
the <a href="#M000544">options</a> method.

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">r&lt;Behavior&gt;:</td><td>The options behavior object. This is optional

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  # If :group is not matched in the path, it will be &quot;registered&quot; instead
  # of nil.
  match(&quot;/users(/:group)&quot;).default(:group =&gt; &quot;registered&quot;)
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 394</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">options</span>(<span class="ruby-identifier">opts</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">options</span> = <span class="ruby-ivar">@options</span>.<span class="ruby-identifier">dup</span>
        
        <span class="ruby-identifier">opts</span>.<span class="ruby-identifier">each_pair</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">key</span>, <span class="ruby-identifier">value</span><span class="ruby-operator">|</span>
          <span class="ruby-identifier">options</span>[<span class="ruby-identifier">key</span>] = (<span class="ruby-identifier">options</span>[<span class="ruby-identifier">key</span>] <span class="ruby-operator">||</span> []) <span class="ruby-operator">+</span> [<span class="ruby-identifier">value</span>.<span class="ruby-identifier">freeze</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">value</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-identifier">options</span>, <span class="ruby-ivar">@blocks</span>)
        <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="redirect" type="Public" category="Instance" id="M000554">
          <parameters>(url, opts = {})</parameters>

          <description><![CDATA[
            <p>
Redirects the current route.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">path&lt;String&gt;:</td><td>The path to redirect to.

</td></tr>
<tr><td valign="top">options&lt;Hash&gt;:</td><td>Options (see below)

</td></tr>
</table>
<h4>Options (opts)</h4>
<table>
<tr><td valign="top">:permanent&lt;Boolean&gt;:</td><td>Whether or not the redirect should be permanent. The default value is
false.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 624</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">redirect</span>(<span class="ruby-identifier">url</span>, <span class="ruby-identifier">opts</span> = {})
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-value str">&quot;The route has already been committed.&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route</span>
        
        <span class="ruby-identifier">status</span> = <span class="ruby-identifier">opts</span>[<span class="ruby-identifier">:permanent</span>] <span class="ruby-operator">?</span> <span class="ruby-value">301</span> <span class="ruby-operator">:</span> <span class="ruby-value">302</span>
        <span class="ruby-ivar">@route</span> = <span class="ruby-constant">Route</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@conditions</span>, {<span class="ruby-identifier">:url</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">url</span>.<span class="ruby-identifier">freeze</span>, <span class="ruby-identifier">:status</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">status</span>.<span class="ruby-identifier">freeze</span>}, <span class="ruby-ivar">@blocks</span>, <span class="ruby-identifier">:redirects</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-keyword kw">true</span>)
        <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">register</span>
        <span class="ruby-keyword kw">self</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="register" type="Public" category="Instance" id="M000541">
          <parameters>(params = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000539">to</a>
</p>
          ]]></description>


        </method>

        <method name="to" type="Public" category="Instance" id="M000539">
          <parameters>(params = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Creates a Route from one or more <a
href="#Merb::Router::Behavior">Behavior</a> objects, unless a
<tt>block</tt> is passed in.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">params&lt;Hash&gt;:</td><td>The parameters the route maps to.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>All routes defined in the block will be scoped to the params defined by the
<a href="#M000539">to</a> method.

</td></tr>
</table>
<h4>Block parameters</h4>
<table>
<tr><td valign="top">r&lt;Behavior&gt;:</td><td><tt>optional</tt> - The to behavior object.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Route:</td><td>It registers a new route and returns it.

</td></tr>
</table>
<h4>Examples</h4>
<pre>
  match('/:controller/:id).to(:action =&gt; 'show')

  to(:controller =&gt; 'simple') do
    match('/test').to(:action =&gt; 'index')
    match('/other').to(:action =&gt; 'other')
  end
</pre>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 317</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to</span>(<span class="ruby-identifier">params</span> = {}, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-value str">&quot;The route has already been committed. Further params cannot be specified&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route</span>
        
        <span class="ruby-identifier">behavior</span> = <span class="ruby-constant">Behavior</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@proxy</span>, <span class="ruby-ivar">@conditions</span>, <span class="ruby-ivar">@params</span>.<span class="ruby-identifier">merge</span>(<span class="ruby-identifier">params</span>), <span class="ruby-ivar">@defaults</span>, <span class="ruby-ivar">@identifiers</span>, <span class="ruby-ivar">@options</span>, <span class="ruby-ivar">@blocks</span>)
        
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
          <span class="ruby-identifier">with_behavior_context</span>(<span class="ruby-identifier">behavior</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-identifier">behavior</span>.<span class="ruby-identifier">to_route</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="with" type="Public" category="Instance" id="M000540">
          <parameters>(params = {}, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000539">to</a>
</p>
          ]]></description>


        </method>


      </method-list>

        <method-list type="Protected" category="Instance">


        <method name="_route" type="Protected" category="Instance" id="M000557">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Returns the current route.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Route:</td><td>the route.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 679</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">_route</span>
        <span class="ruby-ivar">@route</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="before" type="Protected" category="Instance" id="M000559">
          <parameters>(route, &amp;block)</parameters>

          <description><![CDATA[
            <p>
Allows to insert the route at a certain spot in the list of routes instead
of appending to the list.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">route&lt;Route&gt;:</td><td>the route to insert before.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>the route definition to insert.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 728</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">before</span>(<span class="ruby-identifier">route</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">options</span>(<span class="ruby-identifier">:before</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">route</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="to_route" type="Protected" category="Instance" id="M000558">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Turns a route definition into a Route object.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Route:</td><td>the route generated.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 689</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_route</span>
        <span class="ruby-identifier">raise</span> <span class="ruby-constant">Error</span>, <span class="ruby-value str">&quot;The route has already been committed.&quot;</span> <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@route</span>
        
        <span class="ruby-identifier">controller</span> = <span class="ruby-ivar">@params</span>[<span class="ruby-identifier">:controller</span>]
        
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">prefixes</span> = <span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:controller_prefix</span>]
          <span class="ruby-identifier">controller</span> <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;:controller&quot;</span>
          
          <span class="ruby-identifier">prefixes</span>.<span class="ruby-identifier">reverse_each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">prefix</span><span class="ruby-operator">|</span>
            <span class="ruby-keyword kw">break</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">controller</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">%r{^/(.*)}</span> <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">controller</span> = <span class="ruby-identifier">$1</span>
            <span class="ruby-identifier">controller</span> = <span class="ruby-node">&quot;#{prefix}/#{controller}&quot;</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
        
        <span class="ruby-ivar">@params</span>.<span class="ruby-identifier">merge!</span>(<span class="ruby-identifier">:controller</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">controller</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">gsub</span>(<span class="ruby-regexp re">%r{^/}</span>, <span class="ruby-value str">''</span>)) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">controller</span>
        
        <span class="ruby-comment cmt"># Sorts the identifiers so that modules that are at the bottom of the</span>
        <span class="ruby-comment cmt"># inheritance chain come first (more specific modules first). Object</span>
        <span class="ruby-comment cmt"># should always be last.</span>
        <span class="ruby-identifier">identifiers</span> = <span class="ruby-ivar">@identifiers</span>.<span class="ruby-identifier">sort</span> { <span class="ruby-operator">|</span>(<span class="ruby-identifier">first</span>,<span class="ruby-identifier">_</span>),(<span class="ruby-identifier">sec</span>,<span class="ruby-identifier">_</span>)<span class="ruby-operator">|</span> <span class="ruby-identifier">first</span> <span class="ruby-operator">&lt;=&gt;</span> <span class="ruby-identifier">sec</span> <span class="ruby-operator">||</span> <span class="ruby-value">1</span> }
        
        <span class="ruby-ivar">@route</span> = <span class="ruby-constant">Route</span>.<span class="ruby-identifier">new</span>(<span class="ruby-ivar">@conditions</span>.<span class="ruby-identifier">dup</span>,<span class="ruby-ivar">@params</span>, <span class="ruby-ivar">@blocks</span>, <span class="ruby-identifier">:defaults</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-ivar">@defaults</span>.<span class="ruby-identifier">dup</span>, <span class="ruby-identifier">:identifiers</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">identifiers</span>)
        
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">before</span> = <span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:before</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-ivar">@options</span>[<span class="ruby-identifier">:before</span>].<span class="ruby-identifier">last</span>
          <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">register_at</span>(<span class="ruby-constant">Router</span>.<span class="ruby-identifier">routes</span>.<span class="ruby-identifier">index</span>(<span class="ruby-identifier">before</span>))
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-ivar">@route</span>.<span class="ruby-identifier">register</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">self</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





      <included-module-list>

        <included-module name="Resources"

                         href="Merb::Router::Resources"

        />

      </included-module-list>

    </contents>

  </Class>

  <Class name="Merb::Router::Behavior::Proxy" id="Merb::Router::Behavior::Proxy">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37behavior.rb">lib/merb-core/dispatch/router/behavior.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a href="#Merb::Router::Behavior::Proxy">Proxy</a> catches any methods and
proxies them to the current behavior. This allows building routes without
constantly having to catching the yielded behavior object
</p>
<p>
:api: private
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000560">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 21</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>
          <span class="ruby-ivar">@behaviors</span> = []
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="pop" type="Public" category="Instance" id="M000562">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Removes the top-most behavior.
</p>
<h4>Notes</h4>
<p>
This occurs at the end of a nested scope (namespace, etc).
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 41</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">pop</span>
          <span class="ruby-ivar">@behaviors</span>.<span class="ruby-identifier">pop</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="push" type="Public" category="Instance" id="M000561">
          <parameters>(behavior)</parameters>

          <description><![CDATA[
            <p>
Puts a behavior on the bottom of the stack.
</p>
<h4>Notes</h4>
<p>
The behaviors keep track of nested scopes.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 31</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">push</span>(<span class="ruby-identifier">behavior</span>)
          <span class="ruby-ivar">@behaviors</span>.<span class="ruby-identifier">push</span>(<span class="ruby-identifier">behavior</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="redirect" type="Public" category="Instance" id="M000565">
          <parameters>(url, opts = {})</parameters>

          <description><![CDATA[
            <p>
Generates a <a href="#Merb::Rack">Rack</a> redirection response.
</p>
<h4>Notes</h4>
<p>
Refer to <a href="#M000119">Merb::Rack::Helpers.redirect</a> for
documentation.
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 139</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">redirect</span>(<span class="ruby-identifier">url</span>, <span class="ruby-identifier">opts</span> = {})
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Helpers</span>.<span class="ruby-identifier">redirect</span>(<span class="ruby-identifier">url</span>, <span class="ruby-identifier">opts</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="respond_to?" type="Public" category="Instance" id="M000563">
          <parameters>(*args)</parameters>

          <description><![CDATA[
            <p>
Tests whether the top-most behavior responds to the arguments.
</p>
<h4>Notes</h4>
<p>
Behaviors contain the actual functionality of the proxy.
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 51</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">respond_to?</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
          <span class="ruby-keyword kw">super</span> <span class="ruby-operator">||</span> <span class="ruby-ivar">@behaviors</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="url" type="Public" category="Instance" id="M000564">
          <parameters>(name, *args)</parameters>

          <description><![CDATA[
            <p>
There are three possible ways to use this method. First, if you have a
named route, you can specify the route as the first parameter as a symbol
and any parameters in a hash. Second, you can generate the default route by
just passing the params hash, just passing the params hash. Finally, you
can use the anonymous parameters. This allows you to specify the parameters
to a named route in the order they appear in the router.
</p>
<h4>Parameters(Named Route)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation.

</td></tr>
</table>
<h4>Parameters(Default Route)</h4>
<table>
<tr><td valign="top">args&lt;Hash&gt;:</td><td>Parameters for the route generation. This route will use the default route.

</td></tr>
</table>
<h4>Parameters(Anonymous Parameters)</h4>
<table>
<tr><td valign="top">name&lt;Symbol&gt;:</td><td>The name of the route.

</td></tr>
<tr><td valign="top">args&lt;Array&gt;:</td><td>An array of anonymous parameters to generate the route with. These
parameters are assigned to the route parameters in the order that they are
passed.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The generated URL.

</td></tr>
</table>
<h4>Examples</h4>
<p>
Named Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, :title =&gt; &quot;new_article&quot;)
</p>
<p>
Default Route
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  default_routes
</pre>
<p>
end
</p>
<p>
url(:controller =&gt; &quot;articles&quot;, :action =&gt; &quot;new&quot;)
</p>
<p>
Anonymous Parameters
</p>
<p>
<a href="#M000527">Merb::Router.prepare</a> do
</p>
<pre>
  match(&quot;/articles/:year/:month/:title&quot;).to(:controller =&gt; :articles, :action =&gt; :show).name(&quot;articles&quot;)
</pre>
<p>
end
</p>
<p>
url(:articles, 2008, 10, &quot;test_article&quot;)
</p>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/behavior.rb, line 128</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
          <span class="ruby-identifier">args</span> <span class="ruby-operator">&lt;&lt;</span> {}
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Router</span>.<span class="ruby-identifier">url</span>(<span class="ruby-identifier">name</span>, <span class="ruby-operator">*</span><span class="ruby-identifier">args</span>)
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Router::Behavior::Error" id="Merb::Router::Behavior::Error">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37behavior.rb">lib/merb-core/dispatch/router/behavior.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::Router::RouteNotFound" id="Merb::Router::RouteNotFound">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router.rb">lib/merb-core/dispatch/router.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Raised when route lookup fails.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::Router::NotCompiledError" id="Merb::Router::NotCompiledError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router.rb">lib/merb-core/dispatch/router.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::Router::ResourceBehavior" id="Merb::Router::ResourceBehavior">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37resources.rb">lib/merb-core/dispatch/router/resources.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::Router::Behavior">Merb::Router::Behavior</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Adding the collection and member methods to behavior
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::Router::CachedProc" id="Merb::Router::CachedProc">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37cached_proc.rb">lib/merb-core/dispatch/router/cached_proc.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Cache procs for future reference in eval statement :api: private
</p>

    ]]></description>

    <contents>





      <attribute-list>

        <attribute name="cache">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

        <attribute name="index">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[
:api: private

]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="[]" type="Public" category="Class" id="M000570">
          <parameters>(index)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">index&lt;Fixnum&gt;:</td><td>The index of the cached code to retrieve.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">CachedProc:</td><td>The cached code at index.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/cached_proc.rb, line 60</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-operator">[]</span>(<span class="ruby-identifier">index</span>) <span class="ruby-ivar">@@list</span>[<span class="ruby-identifier">index</span>] <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="[]=" type="Public" category="Class" id="M000569">
          <parameters>(index, code)</parameters>

          <description><![CDATA[
            <p>
Sets the cached code for a specific index.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">index&lt;Fixnum&gt;:</td><td>The index of the cached code to set.

</td></tr>
<tr><td valign="top">code&lt;CachedProc&gt;:</td><td>The cached code to set.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/cached_proc.rb, line 51</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-operator">[]=</span>(<span class="ruby-identifier">index</span>, <span class="ruby-identifier">code</span>) <span class="ruby-ivar">@@list</span>[<span class="ruby-identifier">index</span>] = <span class="ruby-identifier">code</span> <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="new" type="Public" category="Class" id="M000566">
          <parameters>(cache)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">cache&lt;Proc&gt;:</td><td>The block of code to cache.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/cached_proc.rb, line 17</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>(<span class="ruby-identifier">cache</span>)
        <span class="ruby-ivar">@cache</span>, <span class="ruby-ivar">@index</span> = <span class="ruby-identifier">cache</span>, <span class="ruby-constant">CachedProc</span>.<span class="ruby-identifier">register</span>(<span class="ruby-keyword kw">self</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="register" type="Public" category="Class" id="M000568">
          <parameters>(cached_code)</parameters>

          <description><![CDATA[
            <h4>Parameters</h4>
<table>
<tr><td valign="top">cached_code&lt;CachedProc&gt;:</td><td>The cached code to register.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Fixnum:</td><td>The index of the newly registered <a
href="#Merb::Router::CachedProc">CachedProc</a>.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/cached_proc.rb, line 38</span>
        <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">register</span>(<span class="ruby-identifier">cached_code</span>)
          <span class="ruby-constant">CachedProc</span>[<span class="ruby-ivar">@@index</span>] = <span class="ruby-identifier">cached_code</span>
          <span class="ruby-ivar">@@index</span> <span class="ruby-operator">+=</span> <span class="ruby-value">1</span>
          <span class="ruby-ivar">@@index</span> <span class="ruby-operator">-</span> <span class="ruby-value">1</span>
        <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="to_s" type="Public" category="Instance" id="M000567">
          <parameters>()</parameters>

          <description><![CDATA[
            <h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The <a href="#Merb::Router::CachedProc">CachedProc</a> object in a format
embeddable within a string.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/router/cached_proc.rb, line 25</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">to_s</span>
        <span class="ruby-node">&quot;CachedProc[#{@index}].cache&quot;</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Router::GenerationError" id="Merb::Router::GenerationError">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router.rb">lib/merb-core/dispatch/router.rb</a></infile>

      </infiles>


     <superclass>StandardError</superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Raised when parameters given to generation method do not match route
parameters.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::Router::Route" id="Merb::Router::Route">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37route.rb">lib/merb-core/dispatch/router/route.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
This entire class is private and should never be accessed outside of <a
href="#Merb::Router">Merb::Router</a> and <a
href="#Merb::Router::Behavior">Behavior</a>
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::Router::Route::Generator" id="Merb::Router::Route::Generator">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37router37route.rb">lib/merb-core/dispatch/router/route.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
The Generator class handles compiling the route down to a lambda that can
generate the URL from a params hash and a default params hash.
</p>

    ]]></description>

    <contents>









    </contents>

  </Class>

  <Class name="Merb::BootLoader" id="Merb::BootLoader">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="after" type="Public" category="Class" id="M000572">
          <parameters>(klass)</parameters>

          <description><![CDATA[
            <p>
Execute this boot loader after the specified boot loader.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;~to_s&gt;:</td><td>The boot loader class after which this boot loader should be run.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 42</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">after</span>(<span class="ruby-identifier">klass</span>)
        <span class="ruby-identifier">move_klass</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-value">1</span>)
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="after_app_loads" type="Public" category="Class" id="M000578">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Execute a block of code after the app loads.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>A block to be added to the callbacks that will be executed after the app
loads.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 157</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">after_app_loads</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">after_load_callbacks</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">block</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="before" type="Public" category="Class" id="M000573">
          <parameters>(klass)</parameters>

          <description><![CDATA[
            <p>
Execute this boot loader before the specified boot loader.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;~to_s&gt;:</td><td>The boot loader class before which this boot loader should be run.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 57</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">before</span>(<span class="ruby-identifier">klass</span>)
        <span class="ruby-identifier">move_klass</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-value">0</span>)
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="before_app_loads" type="Public" category="Class" id="M000579">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Execute a block of code before the app loads but after dependencies load.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>A block to be added to the callbacks that will be executed before the app
loads.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 169</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">before_app_loads</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">before_load_callbacks</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">block</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="before_master_shutdown" type="Public" category="Class" id="M000580">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Execute a block of code before master process is shut down. Only makes
sense on platforms where <a href="#Merb">Merb</a> server can use forking.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>A block to be added to the callbacks that will be executed before master
process is shut down.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 182</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">before_master_shutdown</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">before_master_shutdown_callbacks</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">block</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="before_worker_shutdown" type="Public" category="Class" id="M000581">
          <parameters>(&amp;block)</parameters>

          <description><![CDATA[
            <p>
Execute a block of code before worker process is shut down. Only makes
sense on platforms where <a href="#Merb">Merb</a> server can use forking.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">&amp;block:</td><td>A block to be added to the callbacks that will be executed before worker
process is shut down.

</td></tr>
</table>
<p>
:api: public
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 195</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">before_worker_shutdown</span>(<span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
        <span class="ruby-identifier">before_worker_shutdown_callbacks</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">block</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="default_framework" type="Public" category="Class" id="M000577">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Set up the default framework
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 129</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">default_framework</span>
        <span class="ruby-node">%w[view model helper controller mailer part]</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">component</span><span class="ruby-operator">|</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">component</span>.<span class="ruby-identifier">to_sym</span>, <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root_path</span>(<span class="ruby-node">&quot;app/#{component}s&quot;</span>))
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:application</span>,  <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root_path</span>(<span class="ruby-value str">&quot;app&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;controllers&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;application.rb&quot;</span>))
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:config</span>,       <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root_path</span>(<span class="ruby-value str">&quot;config&quot;</span>), <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:router</span>,       <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:config</span>), (<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:router_file</span>] <span class="ruby-operator">||</span> <span class="ruby-value str">&quot;router.rb&quot;</span>))
        <span class="ruby-comment cmt"># IMPORTANT! Enabling autoload here for lib breaks most of Rake tasks</span>
        <span class="ruby-comment cmt"># in Merb repository. If you want to enable autoload by default,</span>
        <span class="ruby-comment cmt"># do it in the generated init.rb file: Merb.push_path(Merb.root_path(&quot;lib&quot;), &quot;*/*.rb&quot;)</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:lib</span>,          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root_path</span>(<span class="ruby-value str">&quot;lib&quot;</span>), <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:merb_session</span>, <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root_path</span>(<span class="ruby-value str">&quot;merb&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;session&quot;</span>))
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:log</span>,          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">log_path</span>, <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:public</span>,       <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root_path</span>(<span class="ruby-value str">&quot;public&quot;</span>), <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:stylesheet</span>,   <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:public</span>) <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;stylesheets&quot;</span>, <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:javascript</span>,   <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:public</span>) <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;javascripts&quot;</span>, <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">:image</span>,        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:public</span>) <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;images&quot;</span>, <span class="ruby-keyword kw">nil</span>)
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="finished?" type="Public" category="Class" id="M000576">
          <parameters>(bootloader)</parameters>

          <description><![CDATA[
            <p>
Determines whether or not a specific bootloader has finished yet.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">bootloader&lt;<a href="#String">String</a>, Class&gt;:</td><td>The name of the bootloader to check.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Boolean:</td><td>Whether or not the bootloader has finished.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 118</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">finished?</span>(<span class="ruby-identifier">bootloader</span>)
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">finished</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">bootloader</span>.<span class="ruby-identifier">to_s</span>)
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="inherited" type="Public" category="Class" id="M000571">
          <parameters>(klass)</parameters>

          <description><![CDATA[
            <p>
Adds the inheriting class to the list of subclasses in a position specified
by the before and after methods.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;Class&gt;:</td><td>The class inheriting from <a href="#Merb::BootLoader">Merb::BootLoader</a>.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 27</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">inherited</span>(<span class="ruby-identifier">klass</span>)
        <span class="ruby-identifier">subclasses</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span>
        <span class="ruby-keyword kw">super</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="move_klass" type="Public" category="Class" id="M000574">
          <parameters>(klass, where)</parameters>

          <description><![CDATA[
            <p>
Move a class that is inside the bootloader to some place in the Array,
relative to another class.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">klass&lt;~to_s&gt;:</td><td>The klass to move the bootloader relative to

</td></tr>
<tr><td valign="top">where&lt;Integer&gt;:</td><td>0 means insert it before; 1 means insert it after

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 75</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">move_klass</span>(<span class="ruby-identifier">klass</span>, <span class="ruby-identifier">where</span>)
        <span class="ruby-identifier">index</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">index</span>(<span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span>)
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">index</span>
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">to_s</span>)
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">insert</span>(<span class="ruby-identifier">index</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">where</span>, <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">to_s</span>)
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000575">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Runs all boot loader classes by calling their run methods.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 90</span>
      <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">started</span> = <span class="ruby-keyword kw">true</span>
        <span class="ruby-identifier">subklasses</span> = <span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">dup</span>
        <span class="ruby-keyword kw">until</span> <span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">empty?</span>
          <span class="ruby-identifier">time</span> = <span class="ruby-constant">Time</span>.<span class="ruby-identifier">now</span>.<span class="ruby-identifier">to_i</span>
          <span class="ruby-identifier">bootloader</span> = <span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">shift</span>
          <span class="ruby-keyword kw">if</span> (<span class="ruby-constant">ENV</span>[<span class="ruby-value str">'DEBUG'</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">$DEBUG</span> <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-node">&quot;Loading: #{bootloader}&quot;</span>)
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">bootloader</span>).<span class="ruby-identifier">run</span>
          <span class="ruby-keyword kw">if</span> (<span class="ruby-constant">ENV</span>[<span class="ruby-value str">'DEBUG'</span>] <span class="ruby-operator">||</span> <span class="ruby-identifier">$DEBUG</span> <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:verbose</span>]) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug!</span>(<span class="ruby-node">&quot;It took: #{Time.now.to_i - time}&quot;</span>)
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">finished</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">bootloader</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">subclasses</span> = <span class="ruby-identifier">subklasses</span>
        <span class="ruby-keyword kw">nil</span>
      <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::LoadClasses" id="Merb::BootLoader::LoadClasses">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Load all classes inside the load paths.
</p>
<p>
This is used in conjunction with <a
href="#Merb::BootLoader::ReloadClasses">Merb::BootLoader::ReloadClasses</a>
to track files that need to be reloaded, and which constants need to be
removed in order to reload a file.
</p>
<p>
This also adds the model, controller, and lib directories to the load path,
so they can be required in order to avoid load-order issues.
</p>

    ]]></description>

    <contents>




      <constant-list>

        <constant name="LOADED_CLASSES">

          <value>{}</value>

          <description><![CDATA[]]></description>
        </constant>

        <constant name="MTIMES">

          <value>{}</value>

          <description><![CDATA[]]></description>
        </constant>

      </constant-list>




        <method-list type="Public" category="Class">


        <method name="exit_gracefully" type="Public" category="Class" id="M000583">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Wait for any children to exit, remove the &quot;main&quot; PID, and exit.
</p>
<h4>Returns</h4>
<p>
(Does not return.)
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 655</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">exit_gracefully</span>
      <span class="ruby-comment cmt"># wait all workers to exit</span>
      <span class="ruby-constant">Process</span>.<span class="ruby-identifier">waitall</span>
      <span class="ruby-comment cmt"># remove master process pid</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">remove_pid</span>(<span class="ruby-value str">&quot;main&quot;</span>)
      <span class="ruby-comment cmt"># terminate, workers remove their own pids</span>
      <span class="ruby-comment cmt"># in on exit hook</span>

      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">before_master_shutdown_callbacks</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">cb</span><span class="ruby-operator">|</span>
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">cb</span>.<span class="ruby-identifier">call</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Exception</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal</span> <span class="ruby-node">&quot;before_master_shutdown callback crashed: #{e.message}&quot;</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">exit</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="load_classes" type="Public" category="Class" id="M000588">
          <parameters>(*paths)</parameters>

          <description><![CDATA[
            <p>
Loads classes from given paths - using path/glob pattern.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">*paths&lt;Array&gt;:</td><td>Array of paths to load classes from - may contain glob pattern

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 872</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">load_classes</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">paths</span>)
      <span class="ruby-identifier">orphaned_classes</span> = []
      <span class="ruby-identifier">paths</span>.<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">path</span><span class="ruby-operator">|</span>
        <span class="ruby-constant">Dir</span>[<span class="ruby-identifier">path</span>].<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">file</span><span class="ruby-operator">|</span>
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-identifier">load_file</span> <span class="ruby-identifier">file</span>
          <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">NameError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">ne</span>
            <span class="ruby-identifier">orphaned_classes</span>.<span class="ruby-identifier">unshift</span>(<span class="ruby-identifier">file</span>)
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">load_classes_with_requirements</span>(<span class="ruby-identifier">orphaned_classes</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="load_file" type="Public" category="Class" id="M000587">
          <parameters>(file)</parameters>

          <description><![CDATA[
            <p>
Loads a file, tracking its modified time and, if necessary, the classes it
declared.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">file&lt;String&gt;:</td><td>The file to load.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 836</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">load_file</span>(<span class="ruby-identifier">file</span>)
      <span class="ruby-comment cmt"># Don't do this expensive operation unless we need to</span>
      <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:fork_for_class_load</span>]
        <span class="ruby-identifier">klasses</span> = <span class="ruby-constant">ObjectSpace</span>.<span class="ruby-identifier">classes</span>.<span class="ruby-identifier">dup</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-comment cmt"># Ignore the file for syntax errors. The next time</span>
      <span class="ruby-comment cmt"># the file is changed, it'll be reloaded again</span>
      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-identifier">require</span> <span class="ruby-identifier">file</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">SyntaxError</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">error</span> <span class="ruby-node">&quot;Cannot load #{file} because of syntax error: #{e.message}&quot;</span>
      <span class="ruby-keyword kw">ensure</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:reload_classes</span>]
          <span class="ruby-constant">MTIMES</span>[<span class="ruby-identifier">file</span>] = <span class="ruby-constant">File</span>.<span class="ruby-identifier">mtime</span>(<span class="ruby-identifier">file</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-comment cmt"># Don't do this expensive operation unless we need to</span>
      <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:fork_for_class_load</span>]
        <span class="ruby-constant">LOADED_CLASSES</span>[<span class="ruby-identifier">file</span>] = <span class="ruby-constant">ObjectSpace</span>.<span class="ruby-identifier">classes</span> <span class="ruby-operator">-</span> <span class="ruby-identifier">klasses</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reap_workers" type="Public" category="Class" id="M000586">
          <parameters>(status = 0, sig = reap_workers_signal)</parameters>

          <description><![CDATA[
            <p>
Reap any workers of the spawner process and exit with an appropriate status
code.
</p>
<p>
Note that exiting the spawner process with a status code of 128 when a
master process exists will cause the spawner process to be recreated, and
the app code reloaded.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">status&lt;Integer&gt;:</td><td>The status code to exit with. <a
href="#Merb::BootLoader::Defaults">Defaults</a> to 0.

</td></tr>
<tr><td valign="top">sig&lt;String&gt;:</td><td>The signal to send to workers

</td></tr>
</table>
<h4>Returns</h4>
<p>
(Does not return.)
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 794</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reap_workers</span>(<span class="ruby-identifier">status</span> = <span class="ruby-value">0</span>, <span class="ruby-identifier">sig</span> = <span class="ruby-identifier">reap_workers_signal</span>)
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">info</span> <span class="ruby-value str">&quot;Executed all before worker shutdown callbacks...&quot;</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">before_worker_shutdown_callbacks</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">cb</span><span class="ruby-operator">|</span>
        <span class="ruby-keyword kw">begin</span>
          <span class="ruby-identifier">cb</span>.<span class="ruby-identifier">call</span>
        <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">Exception</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-identifier">e</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal</span> <span class="ruby-node">&quot;before worker shutdown callback crashed: #{e.message}&quot;</span>
        <span class="ruby-keyword kw">end</span>

      <span class="ruby-keyword kw">end</span>

      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">exiting</span> = <span class="ruby-keyword kw">true</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">status</span> <span class="ruby-operator">==</span> <span class="ruby-value">128</span>

      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-ivar">@writer</span>.<span class="ruby-identifier">puts</span>(<span class="ruby-identifier">status</span>.<span class="ruby-identifier">to_s</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@writer</span>
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">SystemCallError</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-identifier">threads</span> = []

      (<span class="ruby-identifier">$WORKERS</span> <span class="ruby-operator">||</span> []).<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">p</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">threads</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-keyword kw">begin</span>
            <span class="ruby-constant">Process</span>.<span class="ruby-identifier">kill</span>(<span class="ruby-identifier">sig</span>, <span class="ruby-identifier">p</span>)
            <span class="ruby-constant">Process</span>.<span class="ruby-identifier">wait2</span>(<span class="ruby-identifier">p</span>)
          <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">SystemCallError</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">threads</span>.<span class="ruby-identifier">each</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">t</span><span class="ruby-operator">|</span> <span class="ruby-identifier">t</span>.<span class="ruby-identifier">join</span> }
      <span class="ruby-identifier">exit</span>(<span class="ruby-identifier">status</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reap_workers_signal" type="Public" category="Class" id="M000585">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 775</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reap_workers_signal</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:reap_workers_quickly</span>] <span class="ruby-operator">?</span> <span class="ruby-value str">&quot;KILL&quot;</span> <span class="ruby-operator">:</span> <span class="ruby-value str">&quot;ABRT&quot;</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="reload" type="Public" category="Class" id="M000589">
          <parameters>(file)</parameters>

          <description><![CDATA[
            <p>
Reloads the classes in the specified file. If fork-based loading is used,
this causes the current processes to be killed and all classes to be
reloaded. If class-based loading is not in use, the classes declared in
that file are removed and the file is reloaded.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">file&lt;String&gt;:</td><td>The file to reload.

</td></tr>
</table>
<h4>Returns</h4>
<p>
When fork-based loading is used:
</p>
<pre>
  (Does not return.)
</pre>
<p>
When fork-based loading is not in use:
</p>
<pre>
  nil
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 901</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">reload</span>(<span class="ruby-identifier">file</span>)
      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:fork_for_class_load</span>]
        <span class="ruby-identifier">reap_workers</span>(<span class="ruby-value">128</span>)
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">remove_classes_in_file</span>(<span class="ruby-identifier">file</span>) { <span class="ruby-operator">|</span><span class="ruby-identifier">f</span><span class="ruby-operator">|</span> <span class="ruby-identifier">load_file</span>(<span class="ruby-identifier">f</span>) }
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="remove_classes_in_file" type="Public" category="Class" id="M000590">
          <parameters>(file) {|file if block_given?| ...}</parameters>

          <description><![CDATA[
            <p>
Removes all classes declared in the specified file. Any hashes which use
classes as keys will be protected provided they have been added to
Merb.klass_hashes. These hashes have their keys substituted with
placeholders before the file&#8217;s classes are unloaded. If a block is
provided, it is called before the substituted keys are reconstituted.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">file&lt;String&gt;:</td><td>The file to remove classes for.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>A block to call with the file that has been removed before klass_hashes are
updated

</td></tr>
</table>
<p>
to use the current values of the constants they used as keys.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 923</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">remove_classes_in_file</span>(<span class="ruby-identifier">file</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">klass_hashes</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">x</span><span class="ruby-operator">|</span> <span class="ruby-identifier">x</span>.<span class="ruby-identifier">protect_keys!</span> }
      <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">klasses</span> = <span class="ruby-constant">LOADED_CLASSES</span>.<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">file</span>)
        <span class="ruby-identifier">klasses</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">klass</span><span class="ruby-operator">|</span> <span class="ruby-identifier">remove_constant</span>(<span class="ruby-identifier">klass</span>) <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/Router/</span> }
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">yield</span> <span class="ruby-identifier">file</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">block_given?</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">klass_hashes</span>.<span class="ruby-identifier">each</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">x</span><span class="ruby-operator">|</span> <span class="ruby-identifier">x</span>.<span class="ruby-identifier">unprotect_keys!</span>}
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="remove_constant" type="Public" category="Class" id="M000591">
          <parameters>(const)</parameters>

          <description><![CDATA[
            <p>
Removes the specified class.
</p>
<p>
Additionally, removes the specified class from the subclass list of every
superclass that tracks it&#8217;s subclasses in an array returned by
_subclasses_list. Classes that wish to use this functionality are required
to alias the reader for their list of subclasses to _subclasses_list. <a
href="#Merb::Plugins">Plugins</a> for ORMs and other libraries should keep
this in mind.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">const&lt;Class&gt;:</td><td>The class to remove.

</td></tr>
</table>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 947</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">remove_constant</span>(<span class="ruby-identifier">const</span>)
      <span class="ruby-comment cmt"># This is to support superclasses (like AbstractController) that track</span>
      <span class="ruby-comment cmt"># their subclasses in a class variable.</span>
      <span class="ruby-identifier">superklass</span> = <span class="ruby-identifier">const</span>
      <span class="ruby-keyword kw">until</span> (<span class="ruby-identifier">superklass</span> = <span class="ruby-identifier">superklass</span>.<span class="ruby-identifier">superclass</span>).<span class="ruby-identifier">nil?</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">superklass</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:_subclasses_list</span>)
          <span class="ruby-identifier">superklass</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:_subclasses_list</span>).<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">klass</span>)
          <span class="ruby-identifier">superklass</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:_subclasses_list</span>).<span class="ruby-identifier">delete</span>(<span class="ruby-identifier">klass</span>.<span class="ruby-identifier">to_s</span>)
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-identifier">parts</span> = <span class="ruby-identifier">const</span>.<span class="ruby-identifier">to_s</span>.<span class="ruby-identifier">split</span>(<span class="ruby-value str">&quot;::&quot;</span>)
      <span class="ruby-identifier">base</span> = <span class="ruby-identifier">parts</span>.<span class="ruby-identifier">size</span> <span class="ruby-operator">==</span> <span class="ruby-value">1</span> <span class="ruby-operator">?</span> <span class="ruby-constant">Object</span> <span class="ruby-operator">:</span> <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">parts</span>[<span class="ruby-value">0</span><span class="ruby-operator">..</span><span class="ruby-value">-2</span>].<span class="ruby-identifier">join</span>(<span class="ruby-value str">&quot;::&quot;</span>))
      <span class="ruby-identifier">object</span> = <span class="ruby-identifier">parts</span>[<span class="ruby-value">-1</span>].<span class="ruby-identifier">to_s</span>
      <span class="ruby-keyword kw">begin</span>
        <span class="ruby-identifier">base</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:remove_const</span>, <span class="ruby-identifier">object</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug</span>(<span class="ruby-node">&quot;Removed constant #{object} from #{base}&quot;</span>)
      <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">NameError</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">debug</span>(<span class="ruby-node">&quot;Failed to remove constant #{object} from #{base}&quot;</span>)
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000582">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Load all classes from Merb&#8217;s native load paths.
</p>
<p>
If fork-based loading is used, every time classes are loaded this will
return in a new spawner process and boot loading will continue from this
point in the boot loading process.
</p>
<p>
If fork-based loading is not in use, this only returns once and does not
fork a new process.
</p>
<h4>Returns</h4>
<p>
Returns at least once:
</p>
<pre>
  nil
</pre>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 615</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run</span>
      <span class="ruby-comment cmt"># process name you see in ps output</span>
      <span class="ruby-identifier">$0</span> = <span class="ruby-node">&quot;merb#{&quot; : &quot; + Merb::Config[:name] if Merb::Config[:name]} : master&quot;</span>

      <span class="ruby-comment cmt"># Log the process configuration user defined signal 1 (SIGUSR1) is received.</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">&quot;USR1&quot;</span>) <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">require</span> <span class="ruby-value str">&quot;yaml&quot;</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-node">&quot;Configuration:\n#{Merb::Config.to_hash.merge(:pid =&gt; $$).to_yaml}\n\n&quot;</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:fork_for_class_load</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-operator">!</span><span class="ruby-constant">Merb</span>.<span class="ruby-identifier">testing?</span>
        <span class="ruby-identifier">start_transaction</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'INT'</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Reaping Workers&quot;</span>
          <span class="ruby-identifier">reap_workers</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-comment cmt"># Load application file if it exists - for flat applications</span>
      <span class="ruby-identifier">load_file</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:application</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">file?</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:application</span>))

      <span class="ruby-comment cmt"># Load classes and their requirements</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">load_paths</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">component</span>, <span class="ruby-identifier">path</span><span class="ruby-operator">|</span>
        <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">path</span>.<span class="ruby-identifier">last</span>.<span class="ruby-identifier">blank?</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">component</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:application</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">component</span> <span class="ruby-operator">==</span> <span class="ruby-identifier">:router</span>
        <span class="ruby-identifier">load_classes</span>(<span class="ruby-identifier">path</span>.<span class="ruby-identifier">first</span> <span class="ruby-operator">/</span> <span class="ruby-identifier">path</span>.<span class="ruby-identifier">last</span>)
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Controller</span>.<span class="ruby-identifier">send</span> <span class="ruby-identifier">:include</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">GlobalHelpers</span>

      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="start_transaction" type="Public" category="Class" id="M000584">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Set up the BEGIN point for fork-based loading and sets up any signals in
the parent and child. This is done by forking the app. The child process
continues on to run the app. The parent process waits for the child process
to finish and either forks again
</p>
<h4>Returns</h4>
<p>
Parent Process:
</p>
<pre>
  (Does not return.)
</pre>
<p>
Child Process returns at least once:
</p>
<pre>
  nil
</pre>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 686</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">start_transaction</span>
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-node">&quot;Parent pid: #{Process.pid}&quot;</span>
      <span class="ruby-identifier">reader</span>, <span class="ruby-identifier">writer</span> = <span class="ruby-keyword kw">nil</span>, <span class="ruby-keyword kw">nil</span>

      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">GC</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-identifier">:copy_on_write_friendly=</span>)
        <span class="ruby-constant">GC</span>.<span class="ruby-identifier">copy_on_write_friendly</span> = <span class="ruby-keyword kw">true</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-identifier">loop</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-comment cmt"># create two connected endpoints</span>
        <span class="ruby-comment cmt"># we use them for master/workers communication</span>
        <span class="ruby-identifier">reader</span>, <span class="ruby-ivar">@writer</span> = <span class="ruby-constant">IO</span>.<span class="ruby-identifier">pipe</span>
        <span class="ruby-identifier">pid</span> = <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">fork</span>

        <span class="ruby-comment cmt"># pid means we're in the parent; only stay in the loop if that is case</span>
        <span class="ruby-keyword kw">break</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">pid</span>
        <span class="ruby-comment cmt"># writer must be closed so reader can generate EOF condition</span>
        <span class="ruby-ivar">@writer</span>.<span class="ruby-identifier">close</span>

        <span class="ruby-comment cmt"># master process stores pid to merb.main.pid</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">store_pid</span>(<span class="ruby-value str">&quot;main&quot;</span>)

        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:console_trap</span>]
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">&quot;INT&quot;</span>) {}
        <span class="ruby-keyword kw">else</span>
          <span class="ruby-comment cmt"># send ABRT to worker on INT</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">&quot;INT&quot;</span>) <span class="ruby-keyword kw">do</span>
            <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Reaping Workers&quot;</span>
            <span class="ruby-keyword kw">begin</span>
              <span class="ruby-constant">Process</span>.<span class="ruby-identifier">kill</span>(<span class="ruby-identifier">reap_workers_signal</span>, <span class="ruby-identifier">pid</span>)
            <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">SystemCallError</span>
            <span class="ruby-keyword kw">end</span>
            <span class="ruby-identifier">exit_gracefully</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">&quot;HUP&quot;</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span> <span class="ruby-value str">&quot;Doing a fast deploy\n&quot;</span>
          <span class="ruby-constant">Process</span>.<span class="ruby-identifier">kill</span>(<span class="ruby-value str">&quot;HUP&quot;</span>, <span class="ruby-identifier">pid</span>)
        <span class="ruby-keyword kw">end</span>

        <span class="ruby-identifier">reader_ary</span> = [<span class="ruby-identifier">reader</span>]
        <span class="ruby-identifier">loop</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-comment cmt"># wait for worker to exit and capture exit status</span>
          <span class="ruby-comment cmt">#</span>
          <span class="ruby-comment cmt">#</span>
          <span class="ruby-comment cmt"># WNOHANG specifies that wait2 exists without waiting</span>
          <span class="ruby-comment cmt"># if no worker processes are ready to be noticed.</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">exit_status</span> = <span class="ruby-constant">Process</span>.<span class="ruby-identifier">wait2</span>(<span class="ruby-identifier">pid</span>, <span class="ruby-constant">Process</span><span class="ruby-operator">::</span><span class="ruby-constant">WNOHANG</span>)
            <span class="ruby-comment cmt"># wait2 returns a 2-tuple of process id and exit</span>
            <span class="ruby-comment cmt"># status.</span>
            <span class="ruby-comment cmt">#</span>
            <span class="ruby-comment cmt"># We do not care about specific pid here.</span>
            <span class="ruby-identifier">exit_status</span>[<span class="ruby-value">1</span>] <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">exit_status</span>[<span class="ruby-value">1</span>].<span class="ruby-identifier">exitstatus</span> <span class="ruby-operator">==</span> <span class="ruby-value">128</span> <span class="ruby-operator">?</span> <span class="ruby-keyword kw">break</span> <span class="ruby-operator">:</span> <span class="ruby-identifier">exit</span>
          <span class="ruby-keyword kw">end</span>
          <span class="ruby-comment cmt"># wait for data to become available, timeout in 0.25 of a second</span>
          <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">select</span>(<span class="ruby-identifier">reader_ary</span>, <span class="ruby-keyword kw">nil</span>, <span class="ruby-keyword kw">nil</span>, <span class="ruby-value">0</span><span class="ruby-value">.25</span>)
            <span class="ruby-keyword kw">begin</span>
              <span class="ruby-comment cmt"># no open writers</span>
              <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">reader</span>.<span class="ruby-identifier">eof?</span>
              <span class="ruby-identifier">msg</span> = <span class="ruby-identifier">reader</span>.<span class="ruby-identifier">readline</span>
              <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">msg</span> <span class="ruby-operator">=~</span> <span class="ruby-regexp re">/128/</span>
                <span class="ruby-constant">Process</span>.<span class="ruby-identifier">detach</span>(<span class="ruby-identifier">pid</span>)
                <span class="ruby-keyword kw">break</span>
              <span class="ruby-keyword kw">else</span>
                <span class="ruby-identifier">exit_gracefully</span>
              <span class="ruby-keyword kw">end</span>
            <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">SystemCallError</span>
              <span class="ruby-identifier">exit_gracefully</span>
            <span class="ruby-keyword kw">end</span>
          <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>

      <span class="ruby-identifier">reader</span>.<span class="ruby-identifier">close</span>

      <span class="ruby-comment cmt"># add traps to the worker</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:console_trap</span>]
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">add_irb_trap</span>
        <span class="ruby-identifier">at_exit</span> { <span class="ruby-identifier">reap_workers</span> }
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'INT'</span>) <span class="ruby-keyword kw">do</span>
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">before_worker_shutdown_callbacks</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">cb</span><span class="ruby-operator">|</span> <span class="ruby-identifier">cb</span>.<span class="ruby-identifier">call</span> }
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'ABRT'</span>) { <span class="ruby-identifier">reap_workers</span> }
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">trap</span>(<span class="ruby-value str">'HUP'</span>) { <span class="ruby-identifier">reap_workers</span>(<span class="ruby-value">128</span>, <span class="ruby-value str">&quot;ABRT&quot;</span>) }
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::Defaults" id="Merb::BootLoader::Defaults">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Setup some useful defaults
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000592">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Sets up the defaults
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 275</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">http_method_overrides</span>.<span class="ruby-identifier">concat</span>([
      <span class="ruby-identifier">proc</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">params</span>[<span class="ruby-identifier">:_method</span>] },
      <span class="ruby-identifier">proc</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">c</span><span class="ruby-operator">|</span> <span class="ruby-identifier">c</span>.<span class="ruby-identifier">env</span>[<span class="ruby-value str">'HTTP_X_HTTP_METHOD_OVERRIDE'</span>] }
    ])
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::AfterAppLoads" id="Merb::BootLoader::AfterAppLoads">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000593">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Call any after_app_loads hooks that were registered via after_app_loads in
init.rb.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1235</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">after_load_callbacks</span>.<span class="ruby-identifier">each</span> {<span class="ruby-operator">|</span><span class="ruby-identifier">x</span><span class="ruby-operator">|</span> <span class="ruby-identifier">x</span>.<span class="ruby-identifier">call</span> }
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::Dependencies" id="Merb::BootLoader::Dependencies">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="enable_json_gem" type="Public" category="Class" id="M000596">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Loads json or json_pure and requires it.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 418</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">enable_json_gem</span>
    <span class="ruby-identifier">gem</span> <span class="ruby-value str">&quot;json&quot;</span>
    <span class="ruby-identifier">require</span> <span class="ruby-value str">&quot;json/ext&quot;</span>
  <span class="ruby-keyword kw">rescue</span> <span class="ruby-constant">LoadError</span>
    <span class="ruby-identifier">gem</span> <span class="ruby-value str">&quot;json_pure&quot;</span>
    <span class="ruby-identifier">require</span> <span class="ruby-value str">&quot;json/pure&quot;</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="load_dependencies" type="Public" category="Class" id="M000595">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Load each dependency that has been declared so far.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 407</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">load_dependencies</span>
    <span class="ruby-identifier">dependencies</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">dependency</span><span class="ruby-operator">|</span> <span class="ruby-constant">Kernel</span>.<span class="ruby-identifier">load_dependency</span>(<span class="ruby-identifier">dependency</span>) }
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000594">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Load the init_file specified in <a href="#Merb::Config">Merb::Config</a> or
if not specified, the init.rb file from the <a href="#Merb">Merb</a>
configuration directory, and any environment files, which register the list
of necessary dependencies and any after_app_loads hooks.
</p>
<p>
<a href="#Merb::BootLoader::Dependencies">Dependencies</a> can hook into
the bootloader process itself by using before or after insertion methods.
Since these are loaded from this bootloader (<a
href="#Merb::BootLoader::Dependencies">Dependencies</a>), they can only
adapt the bootloaders that haven&#8217;t been loaded up until this point.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 385</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-identifier">set_encoding</span>
    <span class="ruby-comment cmt"># this is crucial: load init file with all the preferences</span>
    <span class="ruby-comment cmt"># then environment init file, then start enabling specific</span>
    <span class="ruby-comment cmt"># components, load dependencies and update logger.</span>
    <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-identifier">disabled?</span>(<span class="ruby-identifier">:initfile</span>)
      <span class="ruby-identifier">load_initfile</span>
      <span class="ruby-identifier">load_env_config</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-identifier">expand_ruby_path</span>
    <span class="ruby-identifier">enable_json_gem</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-identifier">disabled?</span>(<span class="ruby-identifier">:json</span>)
    <span class="ruby-identifier">load_dependencies</span>
    <span class="ruby-identifier">update_logger</span>
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="set_encoding" type="Public" category="Class" id="M000598">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Default encoding to UTF8 if it has not already been set to something else.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 455</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">set_encoding</span>
    <span class="ruby-identifier">$KCODE</span> = <span class="ruby-value str">'UTF8'</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">$KCODE</span> <span class="ruby-operator">==</span> <span class="ruby-value str">'NONE'</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">$KCODE</span>.<span class="ruby-identifier">blank?</span>
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="update_logger" type="Public" category="Class" id="M000597">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Resets the logger and sets the log_stream to Merb::Config[:log_file] if one
is specified, falling back to STDOUT.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 433</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">update_logger</span>
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">reset_logger!</span>

    <span class="ruby-comment cmt"># If log file is given, use it and not log stream we have.</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_file</span>]
      <span class="ruby-identifier">raise</span> <span class="ruby-node">&quot;log file should be a string, got: #{Merb::Config[:log_file].inspect}&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_file</span>].<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">String</span>)
      <span class="ruby-constant">STDOUT</span>.<span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Logging to file at #{Merb::Config[:log_file]}&quot;</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">testing?</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_stream</span>] = <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_file</span>], <span class="ruby-value str">&quot;w+&quot;</span>)
    <span class="ruby-comment cmt"># but if it's not given, fallback to log stream or stdout</span>
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_stream</span>] <span class="ruby-operator">||=</span> <span class="ruby-constant">STDOUT</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::Templates" id="Merb::BootLoader::Templates">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Precompiles all non-partial templates.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000599">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Loads all non-partial templates into the <a
href="#Merb::InlineTemplates">Merb::InlineTemplates</a> module.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[String]:</td><td>The list of template files which were loaded.

</td></tr>
</table>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1072</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run</span>
      <span class="ruby-identifier">template_paths</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">path</span><span class="ruby-operator">|</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Template</span>.<span class="ruby-identifier">inline_template</span>(<span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">path</span>))
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="template_paths" type="Public" category="Class" id="M000600">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Finds a list of templates to load.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">Array[String]:</td><td>All found template files whose basename does not begin with &quot;_&quot;.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1084</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">template_paths</span>
      <span class="ruby-identifier">extension_glob</span> = <span class="ruby-node">&quot;{#{Merb::Template.template_extensions.join(',')}}&quot;</span>

      <span class="ruby-comment cmt"># This gets all templates set in the controllers template roots</span>
      <span class="ruby-comment cmt"># We separate the two maps because most of controllers will have</span>
      <span class="ruby-comment cmt"># the same _template_root, so it's silly to be globbing the same</span>
      <span class="ruby-comment cmt"># path over and over.</span>
      <span class="ruby-identifier">controller_view_paths</span> = []
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">AbstractController</span>.<span class="ruby-identifier">_abstract_subclasses</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">klass</span><span class="ruby-operator">|</span>
        <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">if</span> (<span class="ruby-identifier">const</span> = <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">klass</span>)).<span class="ruby-identifier">_template_root</span>.<span class="ruby-identifier">blank?</span>
        <span class="ruby-identifier">controller_view_paths</span> <span class="ruby-operator">+=</span> <span class="ruby-identifier">const</span>.<span class="ruby-identifier">_template_roots</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">pair</span><span class="ruby-operator">|</span> <span class="ruby-identifier">pair</span>.<span class="ruby-identifier">first</span> }
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">template_paths</span> = <span class="ruby-identifier">controller_view_paths</span>.<span class="ruby-identifier">uniq</span>.<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">path</span><span class="ruby-operator">|</span> <span class="ruby-constant">Dir</span>[<span class="ruby-node">&quot;#{path}/**/*.#{extension_glob}&quot;</span>] }

      <span class="ruby-comment cmt"># This gets the templates that might be created outside controllers</span>
      <span class="ruby-comment cmt"># template roots.  eg app/views/shared/*</span>
      <span class="ruby-identifier">template_paths</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">Dir</span>[<span class="ruby-node">&quot;#{Merb.dir_for(:view)}/**/*.#{extension_glob}&quot;</span>] <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:view</span>)

      <span class="ruby-comment cmt"># This ignores templates for partials, which need to be compiled at use time to generate</span>
      <span class="ruby-comment cmt"># a preamble that assigns local variables</span>
      <span class="ruby-identifier">template_paths</span>.<span class="ruby-identifier">flatten</span>.<span class="ruby-identifier">compact</span>.<span class="ruby-identifier">uniq</span>.<span class="ruby-identifier">grep</span>(<span class="ruby-regexp re">%r{^.*/[^_][^/]*$}</span>)
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::MixinSession" id="Merb::BootLoader::MixinSession">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000601">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Mixin the session functionality; this is done before <a
href="#Merb::BootLoader::BeforeAppLoads">BeforeAppLoads</a> so that <a
href="#Merb::SessionContainer">SessionContainer</a> and <a
href="#Merb::SessionStoreContainer">SessionStoreContainer</a> can be
subclassed by plugin session stores for example - these need to be loaded
in a before_app_loads block or a <a href="#Merb::BootLoader">BootLoader</a>
that runs after <a href="#Merb::BootLoader::MixinSession">MixinSession</a>.
</p>
<p>
Note: access to <a href="#Merb::Config">Merb::Config</a> is needed, so it
needs to run after <a
href="#Merb::BootLoader::Dependencies">Merb::BootLoader::Dependencies</a>
is done.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 565</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-identifier">require</span> <span class="ruby-value str">'merb-core/dispatch/session'</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Controller</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:include</span>, <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span>)
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:include</span>, <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">RequestMixin</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::BeforeAppLoads" id="Merb::BootLoader::BeforeAppLoads">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000602">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Call any before_app_loads hooks that were registered via before_app_loads
in any plugins.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 582</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">before_load_callbacks</span>.<span class="ruby-identifier">each</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">x</span><span class="ruby-operator">|</span> <span class="ruby-identifier">x</span>.<span class="ruby-identifier">call</span> }
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::ReloadClasses" id="Merb::BootLoader::ReloadClasses">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="reload" type="Public" category="Class" id="M000604">
          <parameters>(paths)</parameters>

          <description><![CDATA[
            <p>
Reloads all files which have been modified since they were last loaded.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1350</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">reload</span>(<span class="ruby-identifier">paths</span>)
    <span class="ruby-identifier">paths</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">file</span><span class="ruby-operator">|</span>
      <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">if</span> <span class="ruby-constant">LoadClasses</span><span class="ruby-operator">::</span><span class="ruby-constant">MTIMES</span>[<span class="ruby-identifier">file</span>] <span class="ruby-operator">&amp;&amp;</span>
        <span class="ruby-constant">LoadClasses</span><span class="ruby-operator">::</span><span class="ruby-constant">MTIMES</span>[<span class="ruby-identifier">file</span>] <span class="ruby-operator">==</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">mtime</span>(<span class="ruby-identifier">file</span>)

      <span class="ruby-constant">LoadClasses</span>.<span class="ruby-identifier">reload</span>(<span class="ruby-identifier">file</span>)
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000603">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Set up the class reloader if class reloading is enabled. This checks
periodically for modifications to files loaded by the <a
href="#Merb::BootLoader::LoadClasses">LoadClasses</a> <a
href="#Merb::BootLoader">BootLoader</a> and reloads them when they are
modified.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1320</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-keyword kw">return</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:reload_classes</span>]

    <span class="ruby-identifier">paths</span> = []
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">load_paths</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">path_name</span>, <span class="ruby-identifier">file_info</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">path</span>, <span class="ruby-identifier">glob</span> = <span class="ruby-identifier">file_info</span>
      <span class="ruby-keyword kw">next</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">glob</span>
      <span class="ruby-identifier">paths</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">Dir</span>[<span class="ruby-identifier">path</span> <span class="ruby-operator">/</span> <span class="ruby-identifier">glob</span>]
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:application</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">file?</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:application</span>))
      <span class="ruby-identifier">paths</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:application</span>)
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-identifier">paths</span>.<span class="ruby-identifier">flatten!</span>

    <span class="ruby-constant">TimedExecutor</span>.<span class="ruby-identifier">every</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:reload_time</span>] <span class="ruby-operator">||</span> <span class="ruby-value">0</span><span class="ruby-value">.5</span>) <span class="ruby-keyword kw">do</span>
      <span class="ruby-constant">GC</span>.<span class="ruby-identifier">start</span>
      <span class="ruby-identifier">reload</span>(<span class="ruby-identifier">paths</span>)
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::ReloadClasses::TimedExecutor" id="Merb::BootLoader::ReloadClasses::TimedExecutor">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="every" type="Public" category="Class" id="M000605">
          <parameters>(seconds) {|| ...}</parameters>

          <description><![CDATA[
            <p>
Executes the associated block every @seconds@ seconds in a separate thread.
</p>
<h4>Parameters</h4>
<table>
<tr><td valign="top">seconds&lt;Integer&gt;:</td><td>Number of seconds to sleep in between runs of &amp;block.

</td></tr>
<tr><td valign="top">&amp;block:</td><td>The block to execute periodically.

</td></tr>
</table>
<h4>Returns</h4>
<table>
<tr><td valign="top">Thread:</td><td>The thread executing the block periodically.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1301</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">every</span>(<span class="ruby-identifier">seconds</span>, <span class="ruby-operator">&amp;</span><span class="ruby-identifier">block</span>)
      <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">new</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">loop</span> <span class="ruby-keyword kw">do</span>
          <span class="ruby-identifier">sleep</span>( <span class="ruby-identifier">seconds</span> )
          <span class="ruby-keyword kw">yield</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-constant">Thread</span>.<span class="ruby-identifier">exit</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::ChooseAdapter" id="Merb::BootLoader::ChooseAdapter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000606">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Choose the <a href="#Merb::Rack">Rack</a> adapter/server to use and set
Merb.adapter.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1249</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">adapter</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Adapter</span>.<span class="ruby-identifier">get</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:adapter</span>])
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::DropPidFile" id="Merb::BootLoader::DropPidFile">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Stores pid file.
</p>
<p>
Only run if daemonization or clustering options specified on start. Port is
taken from <a href="#Merb::Config">Merb::Config</a> and must be already set
at this point.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000607">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Stores a PID file if <a href="#Merb">Merb</a> is running daemonized or
clustered.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 260</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Server</span>.<span class="ruby-identifier">store_pid</span>(<span class="ruby-value str">&quot;main&quot;</span>) <span class="ruby-comment cmt">#if Merb::Config[:daemonize] || Merb::Config[:cluster]</span>
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::SetupSession" id="Merb::BootLoader::SetupSession">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000608">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Enable the configured session container(s); any class that inherits from <a
href="#Merb::SessionContainer">SessionContainer</a> will be considered by
its session_store_type attribute.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1166</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-comment cmt"># Require all standard session containers.</span>
    <span class="ruby-constant">Dir</span>[<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">framework_root</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;merb-core&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;dispatch&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;session&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;*.rb&quot;</span>].<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">file</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">base_name</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">basename</span>(<span class="ruby-identifier">file</span>, <span class="ruby-value str">&quot;.rb&quot;</span>)
      <span class="ruby-identifier">require</span> <span class="ruby-identifier">file</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">base_name</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;container&quot;</span> <span class="ruby-operator">||</span> <span class="ruby-identifier">base_name</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;store_container&quot;</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># Set some defaults.</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:session_id_key</span>] <span class="ruby-operator">||=</span> <span class="ruby-value str">&quot;_session_id&quot;</span>

    <span class="ruby-comment cmt"># List of all session_stores from :session_stores and :session_store config options.</span>
    <span class="ruby-identifier">config_stores</span> = <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>.<span class="ruby-identifier">session_stores</span>

    <span class="ruby-comment cmt"># Register all configured session stores - any loaded session container class</span>
    <span class="ruby-comment cmt"># (subclassed from Merb::SessionContainer) will be available for registration.</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionContainer</span>.<span class="ruby-identifier">subclasses</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">class_name</span><span class="ruby-operator">|</span>
      <span class="ruby-keyword kw">if</span>(<span class="ruby-identifier">store</span> = <span class="ruby-constant">Object</span>.<span class="ruby-identifier">full_const_get</span>(<span class="ruby-identifier">class_name</span>)) <span class="ruby-operator">&amp;&amp;</span>
        <span class="ruby-identifier">config_stores</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">store</span>.<span class="ruby-identifier">session_store_type</span>)
          <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">register_session_type</span>(<span class="ruby-identifier">store</span>.<span class="ruby-identifier">session_store_type</span>, <span class="ruby-identifier">class_name</span>)
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-comment cmt"># Mixin the Merb::Session module to add app-level functionality to sessions</span>
    <span class="ruby-identifier">overrides</span> = (<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Session</span>.<span class="ruby-identifier">instance_methods</span> <span class="ruby-operator">&amp;</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionContainer</span>.<span class="ruby-identifier">instance_methods</span>)
    <span class="ruby-identifier">overrides</span>.<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">m</span><span class="ruby-operator">|</span> 
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">logger</span>.<span class="ruby-identifier">warn!</span>(<span class="ruby-node">&quot;Warning: Merb::Session##{m} overrides existing &quot;</span> \
                        <span class="ruby-node">&quot;Merb::SessionContainer##{m}&quot;</span>)
    <span class="ruby-keyword kw">end</span>    
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">SessionContainer</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:include</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Session</span>)
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::RackUpApplication" id="Merb::BootLoader::RackUpApplication">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000609">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Setup the <a href="#Merb">Merb</a> <a href="#Merb::Rack">Rack</a> App or
read a rackup file located at Merb::Config[:rackup] with the same syntax as
the rackup tool that comes with rack. Automatically evals the file in the
context of a Rack::Builder.new { } block. Allows for mounting additional
apps or middleware.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1265</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-identifier">require</span> <span class="ruby-value str">'rack'</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:config</span>) <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;rack.rb&quot;</span>)
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:rackup</span>] <span class="ruby-operator">||=</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:config</span>) <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;rack.rb&quot;</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:rackup</span>]
      <span class="ruby-identifier">rackup_code</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">read</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:rackup</span>])
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:app</span>] = <span class="ruby-identifier">eval</span>(<span class="ruby-node">&quot;::Rack::Builder.new {( #{rackup_code}\n )}.to_app&quot;</span>, <span class="ruby-constant">TOPLEVEL_BINDING</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:rackup</span>])
    <span class="ruby-keyword kw">else</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:app</span>] = <span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Builder</span>.<span class="ruby-identifier">new</span> {
         <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">prefix</span> = <span class="ruby-operator">::</span><span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:path_prefix</span>]
           <span class="ruby-identifier">use</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">PathPrefix</span>, <span class="ruby-identifier">prefix</span>
         <span class="ruby-keyword kw">end</span>
         <span class="ruby-identifier">use</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Static</span>, <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:public</span>)
         <span class="ruby-identifier">run</span> <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Rack</span><span class="ruby-operator">::</span><span class="ruby-constant">Application</span>.<span class="ruby-identifier">new</span>
       }.<span class="ruby-identifier">to_app</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::Cookies" id="Merb::BootLoader::Cookies">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Set up cookies support in <a href="#Merb::Controller">Merb::Controller</a>
and <a href="#Merb::Request">Merb::Request</a>
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000610">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Set up cookies support in <a href="#Merb::Controller">Merb::Controller</a>
and <a href="#Merb::Request">Merb::Request</a>
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1148</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-identifier">require</span> <span class="ruby-value str">'merb-core/dispatch/cookies'</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Controller</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:include</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">CookiesMixin</span>)
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Request</span>.<span class="ruby-identifier">send</span>(<span class="ruby-identifier">:include</span>, <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">CookiesMixin</span><span class="ruby-operator">::</span><span class="ruby-constant">RequestMixin</span>)
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::SetupStubClasses" id="Merb::BootLoader::SetupStubClasses">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
In case someone&#8217;s running a sparse app, the default exceptions
require the Exceptions class. This must run prior to the <a
href="#Merb::BootLoader::AfterAppLoads">AfterAppLoads</a> <a
href="#Merb::BootLoader">BootLoader</a> so that plugins may have ensured
access in the after_app_loads block
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000611">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Declares empty Application and <a href="#Exception">Exception</a>
controllers.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1210</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-keyword kw">unless</span> <span class="ruby-keyword kw">defined?</span>(<span class="ruby-constant">Exceptions</span>)
      <span class="ruby-constant">Object</span>.<span class="ruby-identifier">class_eval</span> <span class="ruby-value str">&quot;class Application &lt; Merb::Controller\nabstract!\nend\n\nclass Exceptions &lt; Merb::Controller\nend\n&quot;</span>
    <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::MimeTypes" id="Merb::BootLoader::MimeTypes">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Registers the default MIME types:
</p>
<p>
By default, the mime-types include:
</p>
<table>
<tr><td valign="top">:all:</td><td>no transform, <b>/</b>

</td></tr>
<tr><td valign="top">:yaml:</td><td>to_yaml, application/x-yaml or text/yaml

</td></tr>
<tr><td valign="top">:text:</td><td>to_text, text/plain

</td></tr>
<tr><td valign="top">:html:</td><td>to_html, text/html or application/xhtml+xml or application/html

</td></tr>
<tr><td valign="top">:xml:</td><td>to_xml, application/xml or text/xml or application/x-xml

</td></tr>
<tr><td valign="top">:js:</td><td>to_json, text/javascript ot application/javascript or
application/x-javascript

</td></tr>
<tr><td valign="top">:json:</td><td>to_json, application/json or text/x-json

</td></tr>
</table>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="run" type="Public" category="Class" id="M000612">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Registers the default MIME types.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1127</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:all</span>,  <span class="ruby-keyword kw">nil</span>,      <span class="ruby-node">%w[*/*]</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:yaml</span>, <span class="ruby-identifier">:to_yaml</span>, <span class="ruby-node">%w[application/x-yaml text/yaml]</span>, <span class="ruby-identifier">:charset</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;utf-8&quot;</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:text</span>, <span class="ruby-identifier">:to_text</span>, <span class="ruby-node">%w[text/plain]</span>, <span class="ruby-identifier">:charset</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;utf-8&quot;</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:html</span>, <span class="ruby-identifier">:to_html</span>, <span class="ruby-node">%w[text/html application/xhtml+xml application/html]</span>, <span class="ruby-identifier">:charset</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;utf-8&quot;</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:xml</span>,  <span class="ruby-identifier">:to_xml</span>,  <span class="ruby-node">%w[application/xml text/xml application/x-xml]</span>, {<span class="ruby-identifier">:charset</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;utf-8&quot;</span>}, <span class="ruby-value">0</span><span class="ruby-value">.9998</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:js</span>,   <span class="ruby-identifier">:to_json</span>, <span class="ruby-node">%w[text/javascript application/javascript application/x-javascript]</span>, <span class="ruby-identifier">:charset</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;utf-8&quot;</span>)
    <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">add_mime_type</span>(<span class="ruby-identifier">:json</span>, <span class="ruby-identifier">:to_json</span>, <span class="ruby-node">%w[application/json text/x-json]</span>, <span class="ruby-identifier">:charset</span> =<span class="ruby-operator">&gt;</span> <span class="ruby-value str">&quot;utf-8&quot;</span>)
    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::Router" id="Merb::BootLoader::Router">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Loads the router file. This needs to happen after everything else is loaded
while merb is starting up to ensure the router has everything it needs to
run.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="router_file" type="Public" category="Class" id="M000614">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Tries to find the router file.
</p>
<h4>Returns</h4>
<table>
<tr><td valign="top">String:</td><td>The path to the router file if it exists, nil otherwise.

</td></tr>
</table>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1051</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">router_file</span>
      <span class="ruby-ivar">@router_file</span> <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">file?</span>(<span class="ruby-identifier">router</span> = <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">dir_for</span>(<span class="ruby-identifier">:router</span>) <span class="ruby-operator">/</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">glob_for</span>(<span class="ruby-identifier">:router</span>))
          <span class="ruby-identifier">router</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000613">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
load the router file
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 1039</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run</span>
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span><span class="ruby-operator">::</span><span class="ruby-constant">LoadClasses</span>.<span class="ruby-identifier">load_file</span>(<span class="ruby-identifier">router_file</span>) <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">router_file</span>

      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::BuildFramework" id="Merb::BootLoader::BuildFramework">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Build the framework paths.
</p>
<p>
By default, the following paths will be used:
</p>
<table>
<tr><td valign="top">application:</td><td>Merb.root/app/controller/application.rb

</td></tr>
<tr><td valign="top">config:</td><td>Merb.root/config

</td></tr>
<tr><td valign="top">lib:</td><td>Merb.root/lib

</td></tr>
<tr><td valign="top">log:</td><td>Merb.root/log

</td></tr>
<tr><td valign="top">view:</td><td>Merb.root/app/views

</td></tr>
<tr><td valign="top">model:</td><td>Merb.root/app/models

</td></tr>
<tr><td valign="top">controller:</td><td>Merb.root/app/controllers

</td></tr>
<tr><td valign="top">helper:</td><td>Merb.root/app/helpers

</td></tr>
<tr><td valign="top">mailer:</td><td>Merb.root/app/mailers

</td></tr>
<tr><td valign="top">part:</td><td>Merb.root/app/parts

</td></tr>
</table>
<p>
To override the default, set Merb::Config[:framework] in your
initialization file. Merb::Config[:framework] takes a <a
href="#Hash">Hash</a> whose key is the name of the path, and whose values
can be passed into Merb.push_path (see Merb.push_path for full details).
</p>
<h4>Notes</h4>
<p>
All paths will default to Merb.root, so you can get a flat-file structure
by doing Merb::Config[:framework] = {}.
</p>
<h4>Example</h4>
<pre>
  Merb::Config[:framework] = {
    :view   =&gt; Merb.root / &quot;views&quot;,
    :model  =&gt; Merb.root / &quot;models&quot;,
    :lib    =&gt; Merb.root / &quot;lib&quot;,
    :public =&gt; [Merb.root / &quot;public&quot;, nil]
    :router =&gt; [Merb.root / &quot;config&quot;, &quot;router.rb&quot;]
  }
</pre>
<p>
That will set up a flat directory structure with the config files and
controller files under Merb.root, but with models, views, and lib with
their own folders off of Merb.root.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="build_framework" type="Public" category="Class" id="M000616">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Sets up merb paths to support the app&#8217;s file layout. First,
config/framework.rb is checked, next we look for Merb.root/framework.rb,
finally we use the default merb layout (<a
href="#M000577">Merb::BootLoader.default_framework</a>)
</p>
<p>
This method can be overridden to support other application layouts.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin @overridable
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 345</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">build_framework</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;config&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;framework.rb&quot;</span>)
        <span class="ruby-identifier">require</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;config&quot;</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;framework&quot;</span>
      <span class="ruby-keyword kw">elsif</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">exists?</span>(<span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;framework.rb&quot;</span>)
        <span class="ruby-identifier">require</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-operator">/</span> <span class="ruby-value str">&quot;framework&quot;</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">BootLoader</span>.<span class="ruby-identifier">default_framework</span>
      <span class="ruby-keyword kw">end</span>
      (<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:framework</span>] <span class="ruby-operator">||</span> {}).<span class="ruby-identifier">each</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">name</span>, <span class="ruby-identifier">path</span><span class="ruby-operator">|</span>
        <span class="ruby-identifier">path</span> = <span class="ruby-constant">Array</span>(<span class="ruby-identifier">path</span>)
        <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">push_path</span>(<span class="ruby-identifier">name</span>, <span class="ruby-identifier">path</span>.<span class="ruby-identifier">first</span>, <span class="ruby-identifier">path</span>.<span class="ruby-identifier">length</span> <span class="ruby-operator">==</span> <span class="ruby-value">2</span> <span class="ruby-operator">?</span> <span class="ruby-identifier">path</span>[<span class="ruby-value">1</span>] <span class="ruby-operator">:</span> <span class="ruby-value str">&quot;**/*.rb&quot;</span>)
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000615">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Builds the framework directory structure.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 329</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">run</span>
      <span class="ruby-identifier">$:</span>.<span class="ruby-identifier">push</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-keyword kw">unless</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">root</span> <span class="ruby-operator">==</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">expand_path</span>(<span class="ruby-constant">Dir</span>.<span class="ruby-identifier">pwd</span>)
      <span class="ruby-identifier">build_framework</span>
      <span class="ruby-keyword kw">nil</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::BootLoader::Logger" id="Merb::BootLoader::Logger">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37bootloader.rb">lib/merb-core/bootloader.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::BootLoader">Merb::BootLoader</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Set up the logger.
</p>
<p>
Place the logger inside of the <a href="#Merb">Merb</a> log directory (set
up in <a
href="#Merb::BootLoader::BuildFramework">Merb::BootLoader::BuildFramework</a>)
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="print_warnings" type="Public" category="Class" id="M000618">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Print a warning if the installed version of rubygems is not supported
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 239</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">print_warnings</span>
    <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Version</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">RubyGemsVersion</span>) <span class="ruby-operator">&lt;</span> <span class="ruby-constant">Gem</span><span class="ruby-operator">::</span><span class="ruby-constant">Version</span>.<span class="ruby-identifier">new</span>(<span class="ruby-value str">&quot;1.1&quot;</span>)
      <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">fatal!</span> <span class="ruby-value str">&quot;Merb requires Rubygems 1.1 and later. &quot;</span> \
        <span class="ruby-value str">&quot;Please upgrade RubyGems with gem update --system.&quot;</span>
    <span class="ruby-keyword kw">end</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="run" type="Public" category="Class" id="M000617">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Sets Merb.logger to a new logger created based on the config settings.
</p>
<h4>Returns</h4>
<p>
nil
</p>
<p>
:api: plugin
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/bootloader.rb, line 216</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">run</span>
    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_level</span>] <span class="ruby-operator">||=</span> <span class="ruby-keyword kw">begin</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">environment</span> <span class="ruby-operator">==</span> <span class="ruby-value str">&quot;production&quot;</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Logger</span><span class="ruby-operator">::</span><span class="ruby-constant">Levels</span>[<span class="ruby-identifier">:warn</span>]
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Logger</span><span class="ruby-operator">::</span><span class="ruby-constant">Levels</span>[<span class="ruby-identifier">:debug</span>]
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>

    <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:log_stream</span>] = 
      <span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:original_log_stream</span>] <span class="ruby-operator">||</span> <span class="ruby-constant">Merb</span>.<span class="ruby-identifier">log_stream</span>

    <span class="ruby-identifier">print_warnings</span>

    <span class="ruby-keyword kw">nil</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::Counter" id="Merb::Counter">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37run_specs.rb">lib/merb-core/test/run_specs.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <contents>





      <attribute-list>

        <attribute name="time">

          <attribute-rw>RW</attribute-rw>

          <description><![CDATA[]]></description>
        </attribute>

      </attribute-list>



        <method-list type="Public" category="Class">


        <method name="new" type="Public" category="Class" id="M000619">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/run_specs.rb, line 29</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">initialize</span>
      <span class="ruby-ivar">@examples</span>, <span class="ruby-ivar">@failures</span>, <span class="ruby-ivar">@errors</span>, <span class="ruby-ivar">@pending</span>, <span class="ruby-ivar">@total_time</span> = <span class="ruby-value">0</span>, <span class="ruby-value">0</span>, <span class="ruby-value">0</span>, <span class="ruby-value">0</span>, <span class="ruby-value">0</span>
      <span class="ruby-ivar">@err</span> = <span class="ruby-value str">&quot;&quot;</span>
      <span class="ruby-ivar">@mutex</span> = <span class="ruby-constant">Mutex</span>.<span class="ruby-identifier">new</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="add" type="Public" category="Instance" id="M000621">
          <parameters>(spec, out, err)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/run_specs.rb, line 39</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">add</span>(<span class="ruby-identifier">spec</span>, <span class="ruby-identifier">out</span>, <span class="ruby-identifier">err</span>)
      <span class="ruby-ivar">@mutex</span>.<span class="ruby-identifier">synchronize</span> <span class="ruby-keyword kw">do</span>
        <span class="ruby-identifier">puts</span>
        <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;Running #{spec}.&quot;</span>
        <span class="ruby-constant">STDOUT</span>.<span class="ruby-identifier">puts</span> <span class="ruby-identifier">out</span>
        <span class="ruby-constant">STDOUT</span>.<span class="ruby-identifier">flush</span>
        <span class="ruby-identifier">match</span> = <span class="ruby-identifier">out</span>.<span class="ruby-identifier">match</span>(<span class="ruby-regexp re">/(\d+) examples?, (\d+) failures?(?:, (\d+) errors?)?(?:, (\d+) pending?)?/</span><span class="ruby-identifier">m</span>)
        <span class="ruby-identifier">time</span> = <span class="ruby-identifier">out</span>.<span class="ruby-identifier">match</span>(<span class="ruby-regexp re">/Finished in (\d+\.\d+) seconds/</span>)
        <span class="ruby-ivar">@total_time</span> <span class="ruby-operator">+=</span> <span class="ruby-identifier">time</span>[<span class="ruby-value">1</span>].<span class="ruby-identifier">to_f</span> <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">time</span>
        <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">match</span>
          <span class="ruby-identifier">e</span>, <span class="ruby-identifier">f</span>, <span class="ruby-identifier">errors</span>, <span class="ruby-identifier">pending</span> = <span class="ruby-identifier">match</span>[<span class="ruby-value">1</span><span class="ruby-operator">..</span><span class="ruby-value">-1</span>]
          <span class="ruby-ivar">@examples</span> <span class="ruby-operator">+=</span> <span class="ruby-identifier">e</span>.<span class="ruby-identifier">to_i</span>
          <span class="ruby-ivar">@failures</span> <span class="ruby-operator">+=</span> <span class="ruby-identifier">f</span>.<span class="ruby-identifier">to_i</span>
          <span class="ruby-ivar">@errors</span> <span class="ruby-operator">+=</span> <span class="ruby-identifier">errors</span>.<span class="ruby-identifier">to_i</span>
          <span class="ruby-ivar">@pending</span> <span class="ruby-operator">+=</span> <span class="ruby-identifier">pending</span>.<span class="ruby-identifier">to_i</span>
        <span class="ruby-keyword kw">end</span>
        <span class="ruby-keyword kw">unless</span> <span class="ruby-identifier">err</span>.<span class="ruby-identifier">chomp</span>.<span class="ruby-identifier">empty?</span>
          <span class="ruby-ivar">@err</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-identifier">err</span>.<span class="ruby-identifier">chomp</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-value str">&quot;\n&quot;</span>
        <span class="ruby-keyword kw">end</span>
      <span class="ruby-keyword kw">end</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="failed?" type="Public" category="Instance" id="M000620">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/run_specs.rb, line 35</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">failed?</span>
      <span class="ruby-ivar">@failures</span> <span class="ruby-operator">&gt;</span> <span class="ruby-value">0</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="report" type="Public" category="Instance" id="M000622">
          <parameters>()</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/run_specs.rb, line 61</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">report</span>
      <span class="ruby-identifier">i</span> = <span class="ruby-value">0</span>
      <span class="ruby-ivar">@err</span>.<span class="ruby-identifier">gsub!</span>(<span class="ruby-regexp re">/^\d*\)\s*/</span>) <span class="ruby-keyword kw">do</span>
        <span class="ruby-node">&quot;#{i += 1})\n&quot;</span>
      <span class="ruby-keyword kw">end</span>
      
      <span class="ruby-identifier">puts</span> <span class="ruby-ivar">@err</span>
      <span class="ruby-identifier">puts</span>
      <span class="ruby-keyword kw">if</span> <span class="ruby-ivar">@failures</span> <span class="ruby-operator">!=</span> <span class="ruby-value">0</span> <span class="ruby-operator">||</span> <span class="ruby-ivar">@errors</span> <span class="ruby-operator">!=</span> <span class="ruby-value">0</span>
        <span class="ruby-identifier">print</span> <span class="ruby-value str">&quot;\e[31m&quot;</span> <span class="ruby-comment cmt"># Red</span>
      <span class="ruby-keyword kw">elsif</span> <span class="ruby-ivar">@pending</span> <span class="ruby-operator">!=</span> <span class="ruby-value">0</span>
        <span class="ruby-identifier">print</span> <span class="ruby-value str">&quot;\e[33m&quot;</span> <span class="ruby-comment cmt"># Yellow</span>
      <span class="ruby-keyword kw">else</span>
        <span class="ruby-identifier">print</span> <span class="ruby-value str">&quot;\e[32m&quot;</span> <span class="ruby-comment cmt"># Green</span>
      <span class="ruby-keyword kw">end</span>
      <span class="ruby-identifier">puts</span> <span class="ruby-node">&quot;#{@examples} examples, #{@failures} failures, #{@errors} errors, #{@pending} pending, #{sprintf(&quot;suite run in %3.3f seconds&quot;, @time.real)}&quot;</span>
      <span class="ruby-comment cmt"># TODO: we need to report pending examples all together</span>
       <span class="ruby-identifier">puts</span> <span class="ruby-value str">&quot;\e[0m&quot;</span>    
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Class name="Merb::MemorySession" id="Merb::MemorySession">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37dispatch37session37memory.rb">lib/merb-core/dispatch/session/memory.rb</a></infile>

      </infiles>


     <superclass><a href="#Merb::SessionStoreContainer">Merb::SessionStoreContainer</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
Sessions stored in memory.
</p>
<p>
Set it up by adding the following to your init file:
</p>
<pre>
 Merb::Config.use do |c|
   c[:session_store]      = :memory
   c[:memory_session_ttl] = 3600 # in seconds, one hour
 end
</pre>
<p>
Sessions will remain in memory until the server is stopped or the time as
set in :memory_session_ttl expires. Expired sessions are cleaned up in the
background by a separate thread. Every time reaper cleans up expired
sessions, garbage collection is scheduled start.
</p>
<p>
Memory session is accessed in a thread safe manner.
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Class">


        <method name="store" type="Public" category="Class" id="M000624">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Lazy load/setup of <a
href="#Merb::MemorySessionStore">MemorySessionStore</a>. :api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 31</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">store</span>
      <span class="ruby-ivar">@_store</span> <span class="ruby-operator">||=</span> <span class="ruby-constant">MemorySessionStore</span>.<span class="ruby-identifier">new</span>(<span class="ruby-constant">Merb</span><span class="ruby-operator">::</span><span class="ruby-constant">Config</span>[<span class="ruby-identifier">:memory_session_ttl</span>])
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>

        <method-list type="Public" category="Instance">


        <method name="store" type="Public" category="Instance" id="M000623">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
Bypass normal implicit class attribute reader - see below. :api: private
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/dispatch/session/memory.rb, line 25</span>
    <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">store</span>
      <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">class</span>.<span class="ruby-identifier">store</span>
    <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="Hpricot" id="Hpricot">
    <classmod-info>

      <infiles>

      </infiles>


    </classmod-info>

    <contents>









    </contents>

  </Module>

  <Class name="Hpricot::Elem" id="Hpricot::Elem">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37test37test_ext37hpricot.rb">lib/merb-core/test/test_ext/hpricot.rb</a></infile>

      </infiles>


     <superclass><a href="#Object">Object</a></superclass>

    </classmod-info>

    <description><![CDATA[
      <p>
<a
href="http://yehudakatz.com/2007/01/27/a-better-assert_select-assert_elements/">yehudakatz.com/2007/01/27/a-better-assert_select-assert_elements/</a>
based on assert_elements Author: Yehuda Katz Email: wycats @nospam@
gmail.com Web: <a href="http://www.yehudakatz.com">www.yehudakatz.com</a>
</p>
<p>
which was based on HpricotTestHelper Author: Luke Redpath Email: contact
@nospam@ lukeredpath.co.uk Web: <a
href="http://www.lukeredpath.co.uk">www.lukeredpath.co.uk</a> /
opensource.agileevolved.com
</p>

    ]]></description>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="contain?" type="Public" category="Instance" id="M000625">
          <parameters>(value)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/hpricot.rb, line 13</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">contain?</span>(<span class="ruby-identifier">value</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">inner_text</span>.<span class="ruby-identifier">include?</span>(<span class="ruby-identifier">value</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="contains?" type="Public" category="Instance" id="M000626">
          <parameters>(value)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000625">contain?</a>
</p>
          ]]></description>


        </method>

        <method name="inner_text" type="Public" category="Instance" id="M000629">
          <parameters>()</parameters>

          <description><![CDATA[
            <p>
courtesy of &#8216;thomas&#8217; from the comments of _whys blog - get in
touch if you want a better credit!
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/hpricot.rb, line 27</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">inner_text</span>
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">children</span>.<span class="ruby-identifier">collect</span> <span class="ruby-keyword kw">do</span> <span class="ruby-operator">|</span><span class="ruby-identifier">child</span><span class="ruby-operator">|</span>
      <span class="ruby-identifier">child</span>.<span class="ruby-identifier">is_a?</span>(<span class="ruby-constant">Hpricot</span><span class="ruby-operator">::</span><span class="ruby-constant">Text</span>) <span class="ruby-operator">?</span> <span class="ruby-identifier">child</span>.<span class="ruby-identifier">content</span> <span class="ruby-operator">:</span> ((<span class="ruby-identifier">child</span>.<span class="ruby-identifier">respond_to?</span>(<span class="ruby-value str">&quot;inner_text&quot;</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">child</span>.<span class="ruby-identifier">inner_text</span>) <span class="ruby-operator">||</span> <span class="ruby-value str">&quot;&quot;</span>)
    <span class="ruby-keyword kw">end</span>.<span class="ruby-identifier">join</span>.<span class="ruby-identifier">strip</span>
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="match?" type="Public" category="Instance" id="M000627">
          <parameters>(regex)</parameters>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/test/test_ext/hpricot.rb, line 19</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">match?</span>(<span class="ruby-identifier">regex</span>)
    <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">inner_text</span>.<span class="ruby-identifier">match</span>(<span class="ruby-identifier">regex</span>)
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="matches?" type="Public" category="Instance" id="M000628">
          <parameters>(regex)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000627">match?</a>
</p>
          ]]></description>


        </method>


      </method-list>





    </contents>

  </Class>

  <Module name="ColorfulMessages" id="ColorfulMessages">
    <classmod-info>

      <infiles>

        <infile><a href="#lib37merb-core37tasks37gem_management.rb">lib/merb-core/tasks/gem_management.rb</a></infile>

      </infiles>


    </classmod-info>

    <contents>







        <method-list type="Public" category="Instance">


        <method name="error" type="Public" category="Instance" id="M000630">
          <parameters>(*messages)</parameters>

          <description><![CDATA[
            <p>
red
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 6</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">error</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">messages</span>)
    <span class="ruby-identifier">puts</span> <span class="ruby-identifier">messages</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">msg</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;\033[1;31m#{msg}\033[0m&quot;</span> }
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="info" type="Public" category="Instance" id="M000635">
          <parameters>(*messages)</parameters>

          <description><![CDATA[
            <p>
blue
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 28</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">info</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">messages</span>)
    <span class="ruby-identifier">puts</span> <span class="ruby-identifier">messages</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">msg</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;\033[1;34m#{msg}\033[0m&quot;</span> }
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="message" type="Public" category="Instance" id="M000633">
          <parameters>(*messages)</parameters>

          <description><![CDATA[
            <p>
Alias for <a href="#M000632">success</a>
</p>
          ]]></description>


        </method>

        <method name="note" type="Public" category="Instance" id="M000634">
          <parameters>(*messages)</parameters>

          <description><![CDATA[
            <p>
magenta
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 23</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">note</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">messages</span>)
    <span class="ruby-identifier">puts</span> <span class="ruby-identifier">messages</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">msg</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;\033[1;35m#{msg}\033[0m&quot;</span> }
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="success" type="Public" category="Instance" id="M000632">
          <parameters>(*messages)</parameters>

          <description><![CDATA[
            <p>
green
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 16</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">success</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">messages</span>)
    <span class="ruby-identifier">puts</span> <span class="ruby-identifier">messages</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">msg</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;\033[1;32m#{msg}\033[0m&quot;</span> }
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>

        <method name="warning" type="Public" category="Instance" id="M000631">
          <parameters>(*messages)</parameters>

          <description><![CDATA[
            <p>
yellow
</p>
          ]]></description>


          <source-code-listing>
<span class="ruby-comment cmt"># File lib/merb-core/tasks/gem_management.rb, line 11</span>
  <span class="ruby-keyword kw">def</span> <span class="ruby-identifier">warning</span>(<span class="ruby-operator">*</span><span class="ruby-identifier">messages</span>)
    <span class="ruby-identifier">puts</span> <span class="ruby-identifier">messages</span>.<span class="ruby-identifier">map</span> { <span class="ruby-operator">|</span><span class="ruby-identifier">msg</span><span class="ruby-operator">|</span> <span class="ruby-node">&quot;\033[1;33m#{msg}\033[0m&quot;</span> }
  <span class="ruby-keyword kw">end</span>
          </source-code-listing>

        </method>


      </method-list>





    </contents>

  </Module>

</class-module-list>
</rdoc>